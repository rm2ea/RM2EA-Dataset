/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "maxY": 16132.0, "series": [{"data": [[0.0, 5.0], [0.1, 7.0], [0.2, 13.0], [0.3, 13.0], [0.4, 15.0], [0.5, 16.0], [0.6, 16.0], [0.7, 16.0], [0.8, 17.0], [0.9, 18.0], [1.0, 18.0], [1.1, 19.0], [1.2, 19.0], [1.3, 20.0], [1.4, 20.0], [1.5, 21.0], [1.6, 21.0], [1.7, 22.0], [1.8, 23.0], [1.9, 23.0], [2.0, 24.0], [2.1, 25.0], [2.2, 26.0], [2.3, 27.0], [2.4, 28.0], [2.5, 29.0], [2.6, 30.0], [2.7, 30.0], [2.8, 32.0], [2.9, 33.0], [3.0, 34.0], [3.1, 34.0], [3.2, 35.0], [3.3, 36.0], [3.4, 37.0], [3.5, 46.0], [3.6, 53.0], [3.7, 58.0], [3.8, 82.0], [3.9, 87.0], [4.0, 95.0], [4.1, 98.0], [4.2, 101.0], [4.3, 117.0], [4.4, 140.0], [4.5, 142.0], [4.6, 145.0], [4.7, 147.0], [4.8, 155.0], [4.9, 157.0], [5.0, 164.0], [5.1, 165.0], [5.2, 169.0], [5.3, 170.0], [5.4, 173.0], [5.5, 176.0], [5.6, 182.0], [5.7, 186.0], [5.8, 195.0], [5.9, 205.0], [6.0, 216.0], [6.1, 219.0], [6.2, 222.0], [6.3, 225.0], [6.4, 229.0], [6.5, 232.0], [6.6, 236.0], [6.7, 240.0], [6.8, 243.0], [6.9, 245.0], [7.0, 247.0], [7.1, 249.0], [7.2, 251.0], [7.3, 279.0], [7.4, 289.0], [7.5, 290.0], [7.6, 299.0], [7.7, 302.0], [7.8, 303.0], [7.9, 306.0], [8.0, 320.0], [8.1, 322.0], [8.2, 329.0], [8.3, 339.0], [8.4, 346.0], [8.5, 349.0], [8.6, 349.0], [8.7, 356.0], [8.8, 363.0], [8.9, 365.0], [9.0, 368.0], [9.1, 376.0], [9.2, 385.0], [9.3, 389.0], [9.4, 390.0], [9.5, 394.0], [9.6, 395.0], [9.7, 401.0], [9.8, 416.0], [9.9, 424.0], [10.0, 425.0], [10.1, 429.0], [10.2, 431.0], [10.3, 433.0], [10.4, 436.0], [10.5, 444.0], [10.6, 456.0], [10.7, 458.0], [10.8, 463.0], [10.9, 466.0], [11.0, 468.0], [11.1, 473.0], [11.2, 481.0], [11.3, 481.0], [11.4, 483.0], [11.5, 486.0], [11.6, 500.0], [11.7, 506.0], [11.8, 515.0], [11.9, 520.0], [12.0, 522.0], [12.1, 526.0], [12.2, 527.0], [12.3, 533.0], [12.4, 536.0], [12.5, 539.0], [12.6, 541.0], [12.7, 543.0], [12.8, 549.0], [12.9, 551.0], [13.0, 554.0], [13.1, 562.0], [13.2, 569.0], [13.3, 584.0], [13.4, 591.0], [13.5, 606.0], [13.6, 622.0], [13.7, 627.0], [13.8, 645.0], [13.9, 692.0], [14.0, 716.0], [14.1, 717.0], [14.2, 756.0], [14.3, 763.0], [14.4, 765.0], [14.5, 806.0], [14.6, 846.0], [14.7, 859.0], [14.8, 863.0], [14.9, 875.0], [15.0, 884.0], [15.1, 931.0], [15.2, 1028.0], [15.3, 1173.0], [15.4, 1182.0], [15.5, 1243.0], [15.6, 1268.0], [15.7, 1301.0], [15.8, 1314.0], [15.9, 1354.0], [16.0, 1383.0], [16.1, 1393.0], [16.2, 1423.0], [16.3, 1478.0], [16.4, 1530.0], [16.5, 1642.0], [16.6, 1644.0], [16.7, 1688.0], [16.8, 1854.0], [16.9, 1894.0], [17.0, 1940.0], [17.1, 2014.0], [17.2, 2080.0], [17.3, 2088.0], [17.4, 2104.0], [17.5, 2129.0], [17.6, 2161.0], [17.7, 2221.0], [17.8, 2235.0], [17.9, 2258.0], [18.0, 2345.0], [18.1, 2353.0], [18.2, 2504.0], [18.3, 2581.0], [18.4, 2626.0], [18.5, 2629.0], [18.6, 2636.0], [18.7, 2641.0], [18.8, 2643.0], [18.9, 2660.0], [19.0, 2709.0], [19.1, 2712.0], [19.2, 2713.0], [19.3, 2719.0], [19.4, 2723.0], [19.5, 2724.0], [19.6, 2727.0], [19.7, 2731.0], [19.8, 2735.0], [19.9, 2738.0], [20.0, 2739.0], [20.1, 2740.0], [20.2, 2742.0], [20.3, 2743.0], [20.4, 2747.0], [20.5, 2748.0], [20.6, 2750.0], [20.7, 2750.0], [20.8, 2756.0], [20.9, 2756.0], [21.0, 2758.0], [21.1, 2761.0], [21.2, 2765.0], [21.3, 2766.0], [21.4, 2767.0], [21.5, 2770.0], [21.6, 2772.0], [21.7, 2773.0], [21.8, 2774.0], [21.9, 2775.0], [22.0, 2776.0], [22.1, 2778.0], [22.2, 2778.0], [22.3, 2780.0], [22.4, 2782.0], [22.5, 2784.0], [22.6, 2786.0], [22.7, 2786.0], [22.8, 2786.0], [22.9, 2786.0], [23.0, 2789.0], [23.1, 2790.0], [23.2, 2791.0], [23.3, 2792.0], [23.4, 2795.0], [23.5, 2797.0], [23.6, 2801.0], [23.7, 2804.0], [23.8, 2810.0], [23.9, 2812.0], [24.0, 2815.0], [24.1, 2816.0], [24.2, 2819.0], [24.3, 2820.0], [24.4, 2820.0], [24.5, 2821.0], [24.6, 2822.0], [24.7, 2825.0], [24.8, 2825.0], [24.9, 2826.0], [25.0, 2826.0], [25.1, 2827.0], [25.2, 2829.0], [25.3, 2833.0], [25.4, 2834.0], [25.5, 2836.0], [25.6, 2838.0], [25.7, 2839.0], [25.8, 2839.0], [25.9, 2840.0], [26.0, 2841.0], [26.1, 2843.0], [26.2, 2849.0], [26.3, 2850.0], [26.4, 2852.0], [26.5, 2854.0], [26.6, 2857.0], [26.7, 2858.0], [26.8, 2859.0], [26.9, 2860.0], [27.0, 2863.0], [27.1, 2864.0], [27.2, 2865.0], [27.3, 2866.0], [27.4, 2867.0], [27.5, 2868.0], [27.6, 2868.0], [27.7, 2871.0], [27.8, 2874.0], [27.9, 2876.0], [28.0, 2881.0], [28.1, 2883.0], [28.2, 2885.0], [28.3, 2887.0], [28.4, 2889.0], [28.5, 2889.0], [28.6, 2890.0], [28.7, 2895.0], [28.8, 2898.0], [28.9, 2899.0], [29.0, 2902.0], [29.1, 2905.0], [29.2, 2913.0], [29.3, 2917.0], [29.4, 2922.0], [29.5, 2926.0], [29.6, 2931.0], [29.7, 2934.0], [29.8, 2935.0], [29.9, 2936.0], [30.0, 2939.0], [30.1, 2941.0], [30.2, 2942.0], [30.3, 2943.0], [30.4, 2945.0], [30.5, 2945.0], [30.6, 2947.0], [30.7, 2949.0], [30.8, 2950.0], [30.9, 2951.0], [31.0, 2952.0], [31.1, 2952.0], [31.2, 2953.0], [31.3, 2954.0], [31.4, 2956.0], [31.5, 2957.0], [31.6, 2960.0], [31.7, 2960.0], [31.8, 2960.0], [31.9, 2962.0], [32.0, 2964.0], [32.1, 2966.0], [32.2, 2967.0], [32.3, 2967.0], [32.4, 2971.0], [32.5, 2972.0], [32.6, 2973.0], [32.7, 2974.0], [32.8, 2976.0], [32.9, 2976.0], [33.0, 2978.0], [33.1, 2978.0], [33.2, 2979.0], [33.3, 2982.0], [33.4, 2982.0], [33.5, 2984.0], [33.6, 2987.0], [33.7, 2989.0], [33.8, 2991.0], [33.9, 2992.0], [34.0, 2995.0], [34.1, 2996.0], [34.2, 2998.0], [34.3, 2999.0], [34.4, 3003.0], [34.5, 3010.0], [34.6, 3012.0], [34.7, 3013.0], [34.8, 3015.0], [34.9, 3019.0], [35.0, 3022.0], [35.1, 3023.0], [35.2, 3023.0], [35.3, 3025.0], [35.4, 3025.0], [35.5, 3028.0], [35.6, 3029.0], [35.7, 3031.0], [35.8, 3033.0], [35.9, 3034.0], [36.0, 3036.0], [36.1, 3037.0], [36.2, 3038.0], [36.3, 3038.0], [36.4, 3039.0], [36.5, 3041.0], [36.6, 3043.0], [36.7, 3044.0], [36.8, 3045.0], [36.9, 3046.0], [37.0, 3047.0], [37.1, 3048.0], [37.2, 3049.0], [37.3, 3050.0], [37.4, 3051.0], [37.5, 3055.0], [37.6, 3057.0], [37.7, 3059.0], [37.8, 3060.0], [37.9, 3061.0], [38.0, 3062.0], [38.1, 3064.0], [38.2, 3066.0], [38.3, 3074.0], [38.4, 3075.0], [38.5, 3077.0], [38.6, 3078.0], [38.7, 3079.0], [38.8, 3082.0], [38.9, 3085.0], [39.0, 3087.0], [39.1, 3087.0], [39.2, 3096.0], [39.3, 3097.0], [39.4, 3098.0], [39.5, 3099.0], [39.6, 3100.0], [39.7, 3107.0], [39.8, 3117.0], [39.9, 3124.0], [40.0, 3129.0], [40.1, 3130.0], [40.2, 3130.0], [40.3, 3131.0], [40.4, 3132.0], [40.5, 3135.0], [40.6, 3137.0], [40.7, 3141.0], [40.8, 3143.0], [40.9, 3144.0], [41.0, 3145.0], [41.1, 3148.0], [41.2, 3150.0], [41.3, 3153.0], [41.4, 3155.0], [41.5, 3158.0], [41.6, 3162.0], [41.7, 3163.0], [41.8, 3163.0], [41.9, 3167.0], [42.0, 3172.0], [42.1, 3174.0], [42.2, 3174.0], [42.3, 3177.0], [42.4, 3178.0], [42.5, 3182.0], [42.6, 3185.0], [42.7, 3186.0], [42.8, 3187.0], [42.9, 3188.0], [43.0, 3190.0], [43.1, 3190.0], [43.2, 3191.0], [43.3, 3192.0], [43.4, 3199.0], [43.5, 3200.0], [43.6, 3200.0], [43.7, 3202.0], [43.8, 3203.0], [43.9, 3204.0], [44.0, 3205.0], [44.1, 3205.0], [44.2, 3206.0], [44.3, 3207.0], [44.4, 3208.0], [44.5, 3209.0], [44.6, 3210.0], [44.7, 3211.0], [44.8, 3212.0], [44.9, 3215.0], [45.0, 3216.0], [45.1, 3217.0], [45.2, 3218.0], [45.3, 3219.0], [45.4, 3220.0], [45.5, 3222.0], [45.6, 3223.0], [45.7, 3224.0], [45.8, 3224.0], [45.9, 3224.0], [46.0, 3226.0], [46.1, 3228.0], [46.2, 3228.0], [46.3, 3230.0], [46.4, 3230.0], [46.5, 3232.0], [46.6, 3233.0], [46.7, 3233.0], [46.8, 3234.0], [46.9, 3235.0], [47.0, 3235.0], [47.1, 3236.0], [47.2, 3237.0], [47.3, 3241.0], [47.4, 3242.0], [47.5, 3243.0], [47.6, 3244.0], [47.7, 3245.0], [47.8, 3246.0], [47.9, 3248.0], [48.0, 3248.0], [48.1, 3248.0], [48.2, 3249.0], [48.3, 3249.0], [48.4, 3250.0], [48.5, 3250.0], [48.6, 3250.0], [48.7, 3250.0], [48.8, 3250.0], [48.9, 3251.0], [49.0, 3251.0], [49.1, 3253.0], [49.2, 3253.0], [49.3, 3254.0], [49.4, 3254.0], [49.5, 3255.0], [49.6, 3256.0], [49.7, 3256.0], [49.8, 3257.0], [49.9, 3257.0], [50.0, 3261.0], [50.1, 3263.0], [50.2, 3264.0], [50.3, 3267.0], [50.4, 3269.0], [50.5, 3270.0], [50.6, 3271.0], [50.7, 3272.0], [50.8, 3275.0], [50.9, 3277.0], [51.0, 3278.0], [51.1, 3283.0], [51.2, 3283.0], [51.3, 3283.0], [51.4, 3285.0], [51.5, 3286.0], [51.6, 3286.0], [51.7, 3288.0], [51.8, 3288.0], [51.9, 3289.0], [52.0, 3290.0], [52.1, 3290.0], [52.2, 3292.0], [52.3, 3294.0], [52.4, 3295.0], [52.5, 3295.0], [52.6, 3295.0], [52.7, 3296.0], [52.8, 3296.0], [52.9, 3298.0], [53.0, 3298.0], [53.1, 3298.0], [53.2, 3299.0], [53.3, 3299.0], [53.4, 3300.0], [53.5, 3301.0], [53.6, 3303.0], [53.7, 3304.0], [53.8, 3304.0], [53.9, 3304.0], [54.0, 3306.0], [54.1, 3306.0], [54.2, 3308.0], [54.3, 3309.0], [54.4, 3310.0], [54.5, 3310.0], [54.6, 3312.0], [54.7, 3312.0], [54.8, 3313.0], [54.9, 3313.0], [55.0, 3314.0], [55.1, 3314.0], [55.2, 3314.0], [55.3, 3315.0], [55.4, 3316.0], [55.5, 3316.0], [55.6, 3317.0], [55.7, 3318.0], [55.8, 3318.0], [55.9, 3318.0], [56.0, 3318.0], [56.1, 3319.0], [56.2, 3319.0], [56.3, 3319.0], [56.4, 3319.0], [56.5, 3320.0], [56.6, 3320.0], [56.7, 3321.0], [56.8, 3321.0], [56.9, 3321.0], [57.0, 3321.0], [57.1, 3322.0], [57.2, 3323.0], [57.3, 3323.0], [57.4, 3324.0], [57.5, 3324.0], [57.6, 3324.0], [57.7, 3325.0], [57.8, 3325.0], [57.9, 3326.0], [58.0, 3326.0], [58.1, 3326.0], [58.2, 3327.0], [58.3, 3327.0], [58.4, 3328.0], [58.5, 3328.0], [58.6, 3328.0], [58.7, 3329.0], [58.8, 3329.0], [58.9, 3329.0], [59.0, 3330.0], [59.1, 3331.0], [59.2, 3331.0], [59.3, 3331.0], [59.4, 3332.0], [59.5, 3332.0], [59.6, 3332.0], [59.7, 3332.0], [59.8, 3333.0], [59.9, 3333.0], [60.0, 3333.0], [60.1, 3334.0], [60.2, 3334.0], [60.3, 3335.0], [60.4, 3335.0], [60.5, 3335.0], [60.6, 3336.0], [60.7, 3336.0], [60.8, 3337.0], [60.9, 3337.0], [61.0, 3338.0], [61.1, 3339.0], [61.2, 3339.0], [61.3, 3340.0], [61.4, 3340.0], [61.5, 3340.0], [61.6, 3341.0], [61.7, 3341.0], [61.8, 3341.0], [61.9, 3342.0], [62.0, 3342.0], [62.1, 3343.0], [62.2, 3343.0], [62.3, 3344.0], [62.4, 3344.0], [62.5, 3345.0], [62.6, 3345.0], [62.7, 3346.0], [62.8, 3346.0], [62.9, 3347.0], [63.0, 3347.0], [63.1, 3347.0], [63.2, 3348.0], [63.3, 3348.0], [63.4, 3349.0], [63.5, 3350.0], [63.6, 3351.0], [63.7, 3352.0], [63.8, 3353.0], [63.9, 3354.0], [64.0, 3355.0], [64.1, 3355.0], [64.2, 3355.0], [64.3, 3355.0], [64.4, 3356.0], [64.5, 3357.0], [64.6, 3357.0], [64.7, 3357.0], [64.8, 3358.0], [64.9, 3358.0], [65.0, 3358.0], [65.1, 3359.0], [65.2, 3359.0], [65.3, 3360.0], [65.4, 3361.0], [65.5, 3361.0], [65.6, 3361.0], [65.7, 3362.0], [65.8, 3362.0], [65.9, 3362.0], [66.0, 3363.0], [66.1, 3364.0], [66.2, 3364.0], [66.3, 3364.0], [66.4, 3365.0], [66.5, 3365.0], [66.6, 3366.0], [66.7, 3366.0], [66.8, 3366.0], [66.9, 3367.0], [67.0, 3368.0], [67.1, 3369.0], [67.2, 3371.0], [67.3, 3372.0], [67.4, 3373.0], [67.5, 3376.0], [67.6, 3377.0], [67.7, 3379.0], [67.8, 3379.0], [67.9, 3380.0], [68.0, 3381.0], [68.1, 3382.0], [68.2, 3383.0], [68.3, 3386.0], [68.4, 3386.0], [68.5, 3388.0], [68.6, 3388.0], [68.7, 3389.0], [68.8, 3390.0], [68.9, 3391.0], [69.0, 3393.0], [69.1, 3397.0], [69.2, 3399.0], [69.3, 3404.0], [69.4, 3406.0], [69.5, 3412.0], [69.6, 3421.0], [69.7, 3429.0], [69.8, 3432.0], [69.9, 3439.0], [70.0, 3441.0], [70.1, 3443.0], [70.2, 3444.0], [70.3, 3449.0], [70.4, 3456.0], [70.5, 3458.0], [70.6, 3474.0], [70.7, 3480.0], [70.8, 3482.0], [70.9, 3485.0], [71.0, 3486.0], [71.1, 3492.0], [71.2, 3495.0], [71.3, 3498.0], [71.4, 3501.0], [71.5, 3504.0], [71.6, 3505.0], [71.7, 3506.0], [71.8, 3508.0], [71.9, 3511.0], [72.0, 3515.0], [72.1, 3516.0], [72.2, 3520.0], [72.3, 3522.0], [72.4, 3526.0], [72.5, 3528.0], [72.6, 3529.0], [72.7, 3531.0], [72.8, 3533.0], [72.9, 3534.0], [73.0, 3535.0], [73.1, 3536.0], [73.2, 3537.0], [73.3, 3539.0], [73.4, 3540.0], [73.5, 3540.0], [73.6, 3544.0], [73.7, 3546.0], [73.8, 3553.0], [73.9, 3555.0], [74.0, 3558.0], [74.1, 3560.0], [74.2, 3562.0], [74.3, 3568.0], [74.4, 3570.0], [74.5, 3581.0], [74.6, 3587.0], [74.7, 3591.0], [74.8, 3605.0], [74.9, 3607.0], [75.0, 3610.0], [75.1, 3613.0], [75.2, 3618.0], [75.3, 3619.0], [75.4, 3620.0], [75.5, 3620.0], [75.6, 3620.0], [75.7, 3620.0], [75.8, 3623.0], [75.9, 3625.0], [76.0, 3625.0], [76.1, 3626.0], [76.2, 3626.0], [76.3, 3627.0], [76.4, 3628.0], [76.5, 3630.0], [76.6, 3632.0], [76.7, 3632.0], [76.8, 3633.0], [76.9, 3634.0], [77.0, 3635.0], [77.1, 3636.0], [77.2, 3636.0], [77.3, 3638.0], [77.4, 3639.0], [77.5, 3639.0], [77.6, 3640.0], [77.7, 3641.0], [77.8, 3642.0], [77.9, 3642.0], [78.0, 3643.0], [78.1, 3643.0], [78.2, 3646.0], [78.3, 3648.0], [78.4, 3648.0], [78.5, 3649.0], [78.6, 3649.0], [78.7, 3650.0], [78.8, 3650.0], [78.9, 3651.0], [79.0, 3651.0], [79.1, 3652.0], [79.2, 3653.0], [79.3, 3653.0], [79.4, 3653.0], [79.5, 3653.0], [79.6, 3654.0], [79.7, 3654.0], [79.8, 3656.0], [79.9, 3657.0], [80.0, 3658.0], [80.1, 3658.0], [80.2, 3659.0], [80.3, 3660.0], [80.4, 3660.0], [80.5, 3661.0], [80.6, 3661.0], [80.7, 3662.0], [80.8, 3662.0], [80.9, 3665.0], [81.0, 3665.0], [81.1, 3667.0], [81.2, 3668.0], [81.3, 3669.0], [81.4, 3669.0], [81.5, 3672.0], [81.6, 3673.0], [81.7, 3675.0], [81.8, 3676.0], [81.9, 3676.0], [82.0, 3676.0], [82.1, 3677.0], [82.2, 3677.0], [82.3, 3678.0], [82.4, 3679.0], [82.5, 3681.0], [82.6, 3682.0], [82.7, 3682.0], [82.8, 3684.0], [82.9, 3686.0], [83.0, 3687.0], [83.1, 3688.0], [83.2, 3688.0], [83.3, 3689.0], [83.4, 3690.0], [83.5, 3690.0], [83.6, 3691.0], [83.7, 3691.0], [83.8, 3693.0], [83.9, 3694.0], [84.0, 3694.0], [84.1, 3695.0], [84.2, 3696.0], [84.3, 3697.0], [84.4, 3698.0], [84.5, 3699.0], [84.6, 3700.0], [84.7, 3701.0], [84.8, 3702.0], [84.9, 3703.0], [85.0, 3704.0], [85.1, 3704.0], [85.2, 3704.0], [85.3, 3705.0], [85.4, 3707.0], [85.5, 3708.0], [85.6, 3709.0], [85.7, 3709.0], [85.8, 3709.0], [85.9, 3712.0], [86.0, 3713.0], [86.1, 3714.0], [86.2, 3716.0], [86.3, 3718.0], [86.4, 3719.0], [86.5, 3721.0], [86.6, 3722.0], [86.7, 3724.0], [86.8, 3729.0], [86.9, 3732.0], [87.0, 3732.0], [87.1, 3734.0], [87.2, 3735.0], [87.3, 3736.0], [87.4, 3737.0], [87.5, 3738.0], [87.6, 3739.0], [87.7, 3740.0], [87.8, 3742.0], [87.9, 3745.0], [88.0, 3745.0], [88.1, 3747.0], [88.2, 3749.0], [88.3, 3752.0], [88.4, 3753.0], [88.5, 3753.0], [88.6, 3758.0], [88.7, 3762.0], [88.8, 3766.0], [88.9, 3767.0], [89.0, 3768.0], [89.1, 3772.0], [89.2, 3773.0], [89.3, 3776.0], [89.4, 3777.0], [89.5, 3781.0], [89.6, 3790.0], [89.7, 3791.0], [89.8, 3792.0], [89.9, 3792.0], [90.0, 3797.0], [90.1, 3803.0], [90.2, 3805.0], [90.3, 3808.0], [90.4, 3810.0], [90.5, 3816.0], [90.6, 3820.0], [90.7, 3824.0], [90.8, 3826.0], [90.9, 3829.0], [91.0, 3843.0], [91.1, 3845.0], [91.2, 3851.0], [91.3, 3852.0], [91.4, 3856.0], [91.5, 3857.0], [91.6, 3874.0], [91.7, 3884.0], [91.8, 3887.0], [91.9, 3891.0], [92.0, 3900.0], [92.1, 3902.0], [92.2, 3906.0], [92.3, 3909.0], [92.4, 3924.0], [92.5, 3931.0], [92.6, 3939.0], [92.7, 3953.0], [92.8, 3965.0], [92.9, 3969.0], [93.0, 3972.0], [93.1, 3984.0], [93.2, 4002.0], [93.3, 4020.0], [93.4, 4027.0], [93.5, 4031.0], [93.6, 4049.0], [93.7, 4053.0], [93.8, 4064.0], [93.9, 4070.0], [94.0, 4098.0], [94.1, 4126.0], [94.2, 4162.0], [94.3, 4227.0], [94.4, 4276.0], [94.5, 4302.0], [94.6, 4565.0], [94.7, 4600.0], [94.8, 4662.0], [94.9, 4734.0], [95.0, 4897.0], [95.1, 4923.0], [95.2, 4941.0], [95.3, 4942.0], [95.4, 4974.0], [95.5, 5032.0], [95.6, 5078.0], [95.7, 5085.0], [95.8, 5104.0], [95.9, 5159.0], [96.0, 5231.0], [96.1, 5265.0], [96.2, 5294.0], [96.3, 5534.0], [96.4, 5566.0], [96.5, 5632.0], [96.6, 5795.0], [96.7, 5857.0], [96.8, 5959.0], [96.9, 6281.0], [97.0, 6601.0], [97.1, 6609.0], [97.2, 7135.0], [97.3, 7315.0], [97.4, 7318.0], [97.5, 7463.0], [97.6, 7837.0], [97.7, 7877.0], [97.8, 8700.0], [97.9, 9268.0], [98.0, 10104.0], [98.1, 10445.0], [98.2, 10655.0], [98.3, 11097.0], [98.4, 11320.0], [98.5, 11405.0], [98.6, 11744.0], [98.7, 11760.0], [98.8, 11907.0], [98.9, 11930.0], [99.0, 12649.0], [99.1, 12657.0], [99.2, 12716.0], [99.3, 12835.0], [99.4, 13388.0], [99.5, 13650.0], [99.6, 13843.0], [99.7, 14066.0], [99.8, 14326.0], [99.9, 14359.0]], "isOverall": false, "label": "/HandleService/backtransmit", "isController": false}, {"data": [[0.0, 25.0], [0.1, 35.0], [0.2, 37.0], [0.3, 37.0], [0.4, 38.0], [0.5, 38.0], [0.6, 39.0], [0.7, 40.0], [0.8, 42.0], [0.9, 44.0], [1.0, 45.0], [1.1, 45.0], [1.2, 48.0], [1.3, 51.0], [1.4, 51.0], [1.5, 53.0], [1.6, 54.0], [1.7, 57.0], [1.8, 61.0], [1.9, 73.0], [2.0, 89.0], [2.1, 133.0], [2.2, 156.0], [2.3, 167.0], [2.4, 183.0], [2.5, 211.0], [2.6, 240.0], [2.7, 247.0], [2.8, 258.0], [2.9, 263.0], [3.0, 266.0], [3.1, 268.0], [3.2, 275.0], [3.3, 286.0], [3.4, 295.0], [3.5, 310.0], [3.6, 311.0], [3.7, 317.0], [3.8, 321.0], [3.9, 328.0], [4.0, 343.0], [4.1, 345.0], [4.2, 346.0], [4.3, 360.0], [4.4, 366.0], [4.5, 372.0], [4.6, 377.0], [4.7, 391.0], [4.8, 396.0], [4.9, 400.0], [5.0, 414.0], [5.1, 418.0], [5.2, 426.0], [5.3, 433.0], [5.4, 439.0], [5.5, 444.0], [5.6, 452.0], [5.7, 454.0], [5.8, 459.0], [5.9, 479.0], [6.0, 483.0], [6.1, 491.0], [6.2, 502.0], [6.3, 530.0], [6.4, 539.0], [6.5, 549.0], [6.6, 555.0], [6.7, 588.0], [6.8, 594.0], [6.9, 620.0], [7.0, 690.0], [7.1, 817.0], [7.2, 874.0], [7.3, 898.0], [7.4, 922.0], [7.5, 942.0], [7.6, 980.0], [7.7, 999.0], [7.8, 1001.0], [7.9, 1034.0], [8.0, 1042.0], [8.1, 1046.0], [8.2, 1069.0], [8.3, 1120.0], [8.4, 1121.0], [8.5, 1123.0], [8.6, 1126.0], [8.7, 1149.0], [8.8, 1151.0], [8.9, 1161.0], [9.0, 1171.0], [9.1, 1175.0], [9.2, 1181.0], [9.3, 1232.0], [9.4, 1241.0], [9.5, 1256.0], [9.6, 1264.0], [9.7, 1275.0], [9.8, 1279.0], [9.9, 1290.0], [10.0, 1300.0], [10.1, 1309.0], [10.2, 1321.0], [10.3, 1333.0], [10.4, 1343.0], [10.5, 1362.0], [10.6, 1366.0], [10.7, 1371.0], [10.8, 1374.0], [10.9, 1379.0], [11.0, 1408.0], [11.1, 1411.0], [11.2, 1432.0], [11.3, 1442.0], [11.4, 1455.0], [11.5, 1459.0], [11.6, 1464.0], [11.7, 1476.0], [11.8, 1492.0], [11.9, 1500.0], [12.0, 1503.0], [12.1, 1519.0], [12.2, 1528.0], [12.3, 1553.0], [12.4, 1555.0], [12.5, 1562.0], [12.6, 1567.0], [12.7, 1581.0], [12.8, 1588.0], [12.9, 1597.0], [13.0, 1604.0], [13.1, 1605.0], [13.2, 1608.0], [13.3, 1631.0], [13.4, 1633.0], [13.5, 1639.0], [13.6, 1655.0], [13.7, 1665.0], [13.8, 1674.0], [13.9, 1684.0], [14.0, 1685.0], [14.1, 1689.0], [14.2, 1693.0], [14.3, 1708.0], [14.4, 1710.0], [14.5, 1718.0], [14.6, 1723.0], [14.7, 1734.0], [14.8, 1741.0], [14.9, 1745.0], [15.0, 1750.0], [15.1, 1756.0], [15.2, 1757.0], [15.3, 1764.0], [15.4, 1783.0], [15.5, 1786.0], [15.6, 1793.0], [15.7, 1801.0], [15.8, 1809.0], [15.9, 1812.0], [16.0, 1817.0], [16.1, 1823.0], [16.2, 1827.0], [16.3, 1837.0], [16.4, 1840.0], [16.5, 1843.0], [16.6, 1871.0], [16.7, 1874.0], [16.8, 1877.0], [16.9, 1886.0], [17.0, 1905.0], [17.1, 1912.0], [17.2, 1922.0], [17.3, 1929.0], [17.4, 1939.0], [17.5, 1941.0], [17.6, 1944.0], [17.7, 1949.0], [17.8, 1961.0], [17.9, 1963.0], [18.0, 1966.0], [18.1, 1995.0], [18.2, 1998.0], [18.3, 2000.0], [18.4, 2003.0], [18.5, 2009.0], [18.6, 2017.0], [18.7, 2022.0], [18.8, 2033.0], [18.9, 2038.0], [19.0, 2045.0], [19.1, 2061.0], [19.2, 2064.0], [19.3, 2068.0], [19.4, 2075.0], [19.5, 2088.0], [19.6, 2100.0], [19.7, 2103.0], [19.8, 2104.0], [19.9, 2121.0], [20.0, 2124.0], [20.1, 2129.0], [20.2, 2131.0], [20.3, 2134.0], [20.4, 2141.0], [20.5, 2145.0], [20.6, 2153.0], [20.7, 2161.0], [20.8, 2163.0], [20.9, 2166.0], [21.0, 2167.0], [21.1, 2178.0], [21.2, 2186.0], [21.3, 2190.0], [21.4, 2191.0], [21.5, 2199.0], [21.6, 2202.0], [21.7, 2213.0], [21.8, 2215.0], [21.9, 2228.0], [22.0, 2237.0], [22.1, 2243.0], [22.2, 2248.0], [22.3, 2254.0], [22.4, 2264.0], [22.5, 2272.0], [22.6, 2275.0], [22.7, 2276.0], [22.8, 2281.0], [22.9, 2287.0], [23.0, 2295.0], [23.1, 2298.0], [23.2, 2312.0], [23.3, 2316.0], [23.4, 2325.0], [23.5, 2331.0], [23.6, 2336.0], [23.7, 2342.0], [23.8, 2348.0], [23.9, 2351.0], [24.0, 2356.0], [24.1, 2364.0], [24.2, 2367.0], [24.3, 2376.0], [24.4, 2379.0], [24.5, 2389.0], [24.6, 2393.0], [24.7, 2402.0], [24.8, 2415.0], [24.9, 2427.0], [25.0, 2438.0], [25.1, 2451.0], [25.2, 2467.0], [25.3, 2475.0], [25.4, 2478.0], [25.5, 2490.0], [25.6, 2505.0], [25.7, 2511.0], [25.8, 2516.0], [25.9, 2522.0], [26.0, 2527.0], [26.1, 2535.0], [26.2, 2540.0], [26.3, 2545.0], [26.4, 2559.0], [26.5, 2560.0], [26.6, 2568.0], [26.7, 2576.0], [26.8, 2581.0], [26.9, 2592.0], [27.0, 2607.0], [27.1, 2616.0], [27.2, 2623.0], [27.3, 2628.0], [27.4, 2639.0], [27.5, 2643.0], [27.6, 2649.0], [27.7, 2662.0], [27.8, 2664.0], [27.9, 2672.0], [28.0, 2679.0], [28.1, 2685.0], [28.2, 2695.0], [28.3, 2710.0], [28.4, 2712.0], [28.5, 2715.0], [28.6, 2716.0], [28.7, 2719.0], [28.8, 2722.0], [28.9, 2723.0], [29.0, 2725.0], [29.1, 2728.0], [29.2, 2730.0], [29.3, 2736.0], [29.4, 2739.0], [29.5, 2743.0], [29.6, 2743.0], [29.7, 2744.0], [29.8, 2745.0], [29.9, 2745.0], [30.0, 2746.0], [30.1, 2746.0], [30.2, 2748.0], [30.3, 2751.0], [30.4, 2752.0], [30.5, 2752.0], [30.6, 2754.0], [30.7, 2755.0], [30.8, 2756.0], [30.9, 2757.0], [31.0, 2758.0], [31.1, 2758.0], [31.2, 2758.0], [31.3, 2759.0], [31.4, 2760.0], [31.5, 2761.0], [31.6, 2762.0], [31.7, 2762.0], [31.8, 2763.0], [31.9, 2763.0], [32.0, 2765.0], [32.1, 2766.0], [32.2, 2767.0], [32.3, 2767.0], [32.4, 2768.0], [32.5, 2768.0], [32.6, 2769.0], [32.7, 2769.0], [32.8, 2769.0], [32.9, 2770.0], [33.0, 2771.0], [33.1, 2771.0], [33.2, 2771.0], [33.3, 2772.0], [33.4, 2772.0], [33.5, 2773.0], [33.6, 2773.0], [33.7, 2774.0], [33.8, 2774.0], [33.9, 2774.0], [34.0, 2774.0], [34.1, 2775.0], [34.2, 2775.0], [34.3, 2775.0], [34.4, 2775.0], [34.5, 2776.0], [34.6, 2777.0], [34.7, 2777.0], [34.8, 2777.0], [34.9, 2778.0], [35.0, 2779.0], [35.1, 2779.0], [35.2, 2779.0], [35.3, 2780.0], [35.4, 2780.0], [35.5, 2781.0], [35.6, 2781.0], [35.7, 2781.0], [35.8, 2782.0], [35.9, 2782.0], [36.0, 2782.0], [36.1, 2783.0], [36.2, 2783.0], [36.3, 2784.0], [36.4, 2784.0], [36.5, 2785.0], [36.6, 2785.0], [36.7, 2786.0], [36.8, 2787.0], [36.9, 2789.0], [37.0, 2789.0], [37.1, 2790.0], [37.2, 2790.0], [37.3, 2791.0], [37.4, 2792.0], [37.5, 2793.0], [37.6, 2793.0], [37.7, 2793.0], [37.8, 2794.0], [37.9, 2794.0], [38.0, 2794.0], [38.1, 2794.0], [38.2, 2795.0], [38.3, 2795.0], [38.4, 2795.0], [38.5, 2796.0], [38.6, 2796.0], [38.7, 2796.0], [38.8, 2796.0], [38.9, 2797.0], [39.0, 2797.0], [39.1, 2798.0], [39.2, 2798.0], [39.3, 2798.0], [39.4, 2799.0], [39.5, 2799.0], [39.6, 2800.0], [39.7, 2800.0], [39.8, 2800.0], [39.9, 2801.0], [40.0, 2801.0], [40.1, 2802.0], [40.2, 2803.0], [40.3, 2803.0], [40.4, 2804.0], [40.5, 2804.0], [40.6, 2804.0], [40.7, 2805.0], [40.8, 2806.0], [40.9, 2807.0], [41.0, 2807.0], [41.1, 2808.0], [41.2, 2808.0], [41.3, 2808.0], [41.4, 2809.0], [41.5, 2810.0], [41.6, 2811.0], [41.7, 2812.0], [41.8, 2812.0], [41.9, 2812.0], [42.0, 2814.0], [42.1, 2814.0], [42.2, 2814.0], [42.3, 2815.0], [42.4, 2816.0], [42.5, 2817.0], [42.6, 2818.0], [42.7, 2818.0], [42.8, 2820.0], [42.9, 2823.0], [43.0, 2826.0], [43.1, 2830.0], [43.2, 2830.0], [43.3, 2832.0], [43.4, 2834.0], [43.5, 2837.0], [43.6, 2838.0], [43.7, 2841.0], [43.8, 2843.0], [43.9, 2846.0], [44.0, 2847.0], [44.1, 2850.0], [44.2, 2851.0], [44.3, 2852.0], [44.4, 2854.0], [44.5, 2856.0], [44.6, 2857.0], [44.7, 2858.0], [44.8, 2859.0], [44.9, 2860.0], [45.0, 2862.0], [45.1, 2862.0], [45.2, 2863.0], [45.3, 2863.0], [45.4, 2864.0], [45.5, 2865.0], [45.6, 2866.0], [45.7, 2867.0], [45.8, 2867.0], [45.9, 2867.0], [46.0, 2868.0], [46.1, 2869.0], [46.2, 2869.0], [46.3, 2870.0], [46.4, 2870.0], [46.5, 2871.0], [46.6, 2871.0], [46.7, 2872.0], [46.8, 2873.0], [46.9, 2873.0], [47.0, 2873.0], [47.1, 2874.0], [47.2, 2874.0], [47.3, 2875.0], [47.4, 2875.0], [47.5, 2876.0], [47.6, 2876.0], [47.7, 2876.0], [47.8, 2877.0], [47.9, 2878.0], [48.0, 2878.0], [48.1, 2878.0], [48.2, 2879.0], [48.3, 2880.0], [48.4, 2881.0], [48.5, 2881.0], [48.6, 2882.0], [48.7, 2883.0], [48.8, 2884.0], [48.9, 2885.0], [49.0, 2886.0], [49.1, 2887.0], [49.2, 2888.0], [49.3, 2889.0], [49.4, 2890.0], [49.5, 2890.0], [49.6, 2890.0], [49.7, 2892.0], [49.8, 2894.0], [49.9, 2895.0], [50.0, 2898.0], [50.1, 2904.0], [50.2, 2905.0], [50.3, 2906.0], [50.4, 2910.0], [50.5, 2911.0], [50.6, 2914.0], [50.7, 2917.0], [50.8, 2920.0], [50.9, 2921.0], [51.0, 2923.0], [51.1, 2923.0], [51.2, 2925.0], [51.3, 2934.0], [51.4, 2934.0], [51.5, 2935.0], [51.6, 2940.0], [51.7, 2940.0], [51.8, 2943.0], [51.9, 2944.0], [52.0, 2945.0], [52.1, 2951.0], [52.2, 2953.0], [52.3, 2955.0], [52.4, 2958.0], [52.5, 2959.0], [52.6, 2961.0], [52.7, 2962.0], [52.8, 2966.0], [52.9, 2971.0], [53.0, 2974.0], [53.1, 2977.0], [53.2, 2978.0], [53.3, 2979.0], [53.4, 2982.0], [53.5, 2988.0], [53.6, 2990.0], [53.7, 2990.0], [53.8, 2992.0], [53.9, 2993.0], [54.0, 2994.0], [54.1, 2995.0], [54.2, 2999.0], [54.3, 2999.0], [54.4, 3000.0], [54.5, 3003.0], [54.6, 3005.0], [54.7, 3007.0], [54.8, 3009.0], [54.9, 3015.0], [55.0, 3015.0], [55.1, 3019.0], [55.2, 3022.0], [55.3, 3023.0], [55.4, 3024.0], [55.5, 3026.0], [55.6, 3027.0], [55.7, 3027.0], [55.8, 3029.0], [55.9, 3032.0], [56.0, 3033.0], [56.1, 3036.0], [56.2, 3039.0], [56.3, 3041.0], [56.4, 3041.0], [56.5, 3042.0], [56.6, 3044.0], [56.7, 3045.0], [56.8, 3050.0], [56.9, 3053.0], [57.0, 3055.0], [57.1, 3055.0], [57.2, 3056.0], [57.3, 3057.0], [57.4, 3060.0], [57.5, 3060.0], [57.6, 3061.0], [57.7, 3062.0], [57.8, 3063.0], [57.9, 3064.0], [58.0, 3065.0], [58.1, 3065.0], [58.2, 3066.0], [58.3, 3068.0], [58.4, 3068.0], [58.5, 3070.0], [58.6, 3071.0], [58.7, 3072.0], [58.8, 3072.0], [58.9, 3075.0], [59.0, 3077.0], [59.1, 3080.0], [59.2, 3081.0], [59.3, 3082.0], [59.4, 3084.0], [59.5, 3085.0], [59.6, 3086.0], [59.7, 3086.0], [59.8, 3091.0], [59.9, 3094.0], [60.0, 3097.0], [60.1, 3097.0], [60.2, 3099.0], [60.3, 3103.0], [60.4, 3103.0], [60.5, 3106.0], [60.6, 3109.0], [60.7, 3111.0], [60.8, 3112.0], [60.9, 3115.0], [61.0, 3116.0], [61.1, 3117.0], [61.2, 3119.0], [61.3, 3121.0], [61.4, 3123.0], [61.5, 3126.0], [61.6, 3127.0], [61.7, 3130.0], [61.8, 3131.0], [61.9, 3132.0], [62.0, 3134.0], [62.1, 3138.0], [62.2, 3138.0], [62.3, 3139.0], [62.4, 3141.0], [62.5, 3142.0], [62.6, 3144.0], [62.7, 3146.0], [62.8, 3147.0], [62.9, 3147.0], [63.0, 3150.0], [63.1, 3152.0], [63.2, 3154.0], [63.3, 3156.0], [63.4, 3158.0], [63.5, 3160.0], [63.6, 3161.0], [63.7, 3162.0], [63.8, 3162.0], [63.9, 3163.0], [64.0, 3164.0], [64.1, 3164.0], [64.2, 3165.0], [64.3, 3166.0], [64.4, 3170.0], [64.5, 3170.0], [64.6, 3173.0], [64.7, 3174.0], [64.8, 3176.0], [64.9, 3178.0], [65.0, 3183.0], [65.1, 3184.0], [65.2, 3185.0], [65.3, 3186.0], [65.4, 3186.0], [65.5, 3186.0], [65.6, 3187.0], [65.7, 3188.0], [65.8, 3193.0], [65.9, 3196.0], [66.0, 3201.0], [66.1, 3206.0], [66.2, 3207.0], [66.3, 3212.0], [66.4, 3217.0], [66.5, 3218.0], [66.6, 3219.0], [66.7, 3221.0], [66.8, 3225.0], [66.9, 3227.0], [67.0, 3229.0], [67.1, 3230.0], [67.2, 3230.0], [67.3, 3238.0], [67.4, 3240.0], [67.5, 3249.0], [67.6, 3250.0], [67.7, 3253.0], [67.8, 3255.0], [67.9, 3256.0], [68.0, 3258.0], [68.1, 3263.0], [68.2, 3264.0], [68.3, 3265.0], [68.4, 3266.0], [68.5, 3269.0], [68.6, 3271.0], [68.7, 3278.0], [68.8, 3279.0], [68.9, 3283.0], [69.0, 3286.0], [69.1, 3288.0], [69.2, 3291.0], [69.3, 3291.0], [69.4, 3294.0], [69.5, 3295.0], [69.6, 3297.0], [69.7, 3300.0], [69.8, 3303.0], [69.9, 3305.0], [70.0, 3306.0], [70.1, 3310.0], [70.2, 3311.0], [70.3, 3314.0], [70.4, 3316.0], [70.5, 3317.0], [70.6, 3318.0], [70.7, 3321.0], [70.8, 3322.0], [70.9, 3325.0], [71.0, 3326.0], [71.1, 3326.0], [71.2, 3327.0], [71.3, 3328.0], [71.4, 3331.0], [71.5, 3332.0], [71.6, 3334.0], [71.7, 3335.0], [71.8, 3335.0], [71.9, 3337.0], [72.0, 3338.0], [72.1, 3339.0], [72.2, 3340.0], [72.3, 3342.0], [72.4, 3343.0], [72.5, 3346.0], [72.6, 3348.0], [72.7, 3350.0], [72.8, 3351.0], [72.9, 3354.0], [73.0, 3356.0], [73.1, 3357.0], [73.2, 3359.0], [73.3, 3360.0], [73.4, 3360.0], [73.5, 3362.0], [73.6, 3362.0], [73.7, 3363.0], [73.8, 3365.0], [73.9, 3369.0], [74.0, 3370.0], [74.1, 3371.0], [74.2, 3373.0], [74.3, 3381.0], [74.4, 3383.0], [74.5, 3385.0], [74.6, 3387.0], [74.7, 3391.0], [74.8, 3396.0], [74.9, 3397.0], [75.0, 3403.0], [75.1, 3404.0], [75.2, 3407.0], [75.3, 3411.0], [75.4, 3417.0], [75.5, 3424.0], [75.6, 3426.0], [75.7, 3436.0], [75.8, 3438.0], [75.9, 3458.0], [76.0, 3468.0], [76.1, 3476.0], [76.2, 3479.0], [76.3, 3490.0], [76.4, 3499.0], [76.5, 3505.0], [76.6, 3524.0], [76.7, 3532.0], [76.8, 3547.0], [76.9, 3547.0], [77.0, 3561.0], [77.1, 3563.0], [77.2, 3581.0], [77.3, 3584.0], [77.4, 3585.0], [77.5, 3612.0], [77.6, 3614.0], [77.7, 3620.0], [77.8, 3626.0], [77.9, 3640.0], [78.0, 3644.0], [78.1, 3666.0], [78.2, 3686.0], [78.3, 3697.0], [78.4, 3707.0], [78.5, 3712.0], [78.6, 3720.0], [78.7, 3742.0], [78.8, 3745.0], [78.9, 3749.0], [79.0, 3751.0], [79.1, 3756.0], [79.2, 3763.0], [79.3, 3774.0], [79.4, 3785.0], [79.5, 3797.0], [79.6, 3815.0], [79.7, 3828.0], [79.8, 3833.0], [79.9, 3837.0], [80.0, 3842.0], [80.1, 3846.0], [80.2, 3852.0], [80.3, 3854.0], [80.4, 3860.0], [80.5, 3863.0], [80.6, 3874.0], [80.7, 3880.0], [80.8, 3883.0], [80.9, 3888.0], [81.0, 3896.0], [81.1, 3898.0], [81.2, 3904.0], [81.3, 3908.0], [81.4, 3908.0], [81.5, 3915.0], [81.6, 3924.0], [81.7, 3926.0], [81.8, 3928.0], [81.9, 3929.0], [82.0, 3932.0], [82.1, 3955.0], [82.2, 3977.0], [82.3, 3983.0], [82.4, 3985.0], [82.5, 3994.0], [82.6, 3999.0], [82.7, 4002.0], [82.8, 4007.0], [82.9, 4016.0], [83.0, 4022.0], [83.1, 4032.0], [83.2, 4033.0], [83.3, 4036.0], [83.4, 4049.0], [83.5, 4052.0], [83.6, 4057.0], [83.7, 4062.0], [83.8, 4064.0], [83.9, 4078.0], [84.0, 4086.0], [84.1, 4092.0], [84.2, 4096.0], [84.3, 4101.0], [84.4, 4102.0], [84.5, 4104.0], [84.6, 4107.0], [84.7, 4111.0], [84.8, 4118.0], [84.9, 4128.0], [85.0, 4130.0], [85.1, 4139.0], [85.2, 4142.0], [85.3, 4145.0], [85.4, 4146.0], [85.5, 4159.0], [85.6, 4167.0], [85.7, 4179.0], [85.8, 4184.0], [85.9, 4193.0], [86.0, 4200.0], [86.1, 4219.0], [86.2, 4221.0], [86.3, 4236.0], [86.4, 4272.0], [86.5, 4278.0], [86.6, 4306.0], [86.7, 4322.0], [86.8, 4341.0], [86.9, 4367.0], [87.0, 4386.0], [87.1, 4413.0], [87.2, 4424.0], [87.3, 4442.0], [87.4, 4494.0], [87.5, 4499.0], [87.6, 4524.0], [87.7, 4535.0], [87.8, 4563.0], [87.9, 4583.0], [88.0, 4604.0], [88.1, 4647.0], [88.2, 4707.0], [88.3, 4751.0], [88.4, 4833.0], [88.5, 4868.0], [88.6, 4880.0], [88.7, 4916.0], [88.8, 4939.0], [88.9, 5093.0], [89.0, 5108.0], [89.1, 5199.0], [89.2, 5317.0], [89.3, 5353.0], [89.4, 5391.0], [89.5, 5483.0], [89.6, 5499.0], [89.7, 5598.0], [89.8, 5643.0], [89.9, 5728.0], [90.0, 5849.0], [90.1, 5897.0], [90.2, 5916.0], [90.3, 6059.0], [90.4, 6215.0], [90.5, 6313.0], [90.6, 6346.0], [90.7, 6464.0], [90.8, 6558.0], [90.9, 6587.0], [91.0, 6626.0], [91.1, 6753.0], [91.2, 6866.0], [91.3, 6926.0], [91.4, 6997.0], [91.5, 7081.0], [91.6, 7237.0], [91.7, 7250.0], [91.8, 7265.0], [91.9, 7295.0], [92.0, 7330.0], [92.1, 7555.0], [92.2, 7925.0], [92.3, 7964.0], [92.4, 8299.0], [92.5, 8428.0], [92.6, 8492.0], [92.7, 8546.0], [92.8, 8552.0], [92.9, 8576.0], [93.0, 8598.0], [93.1, 8819.0], [93.2, 8878.0], [93.3, 8895.0], [93.4, 9195.0], [93.5, 9232.0], [93.6, 9245.0], [93.7, 9400.0], [93.8, 9732.0], [93.9, 9889.0], [94.0, 9942.0], [94.1, 10219.0], [94.2, 10329.0], [94.3, 10456.0], [94.4, 11429.0], [94.5, 11473.0], [94.6, 11570.0], [94.7, 11829.0], [94.8, 11998.0], [94.9, 12117.0], [95.0, 12305.0], [95.1, 12408.0], [95.2, 12808.0], [95.3, 12885.0], [95.4, 13012.0], [95.5, 13094.0], [95.6, 13175.0], [95.7, 13347.0], [95.8, 13552.0], [95.9, 13679.0], [96.0, 13715.0], [96.1, 13760.0], [96.2, 13887.0], [96.3, 14055.0], [96.4, 14228.0], [96.5, 14252.0], [96.6, 14375.0], [96.7, 14572.0], [96.8, 14632.0], [96.9, 14665.0], [97.0, 14778.0], [97.1, 14836.0], [97.2, 14876.0], [97.3, 14967.0], [97.4, 14987.0], [97.5, 15070.0], [97.6, 15095.0], [97.7, 15119.0], [97.8, 15172.0], [97.9, 15198.0], [98.0, 15215.0], [98.1, 15230.0], [98.2, 15233.0], [98.3, 15273.0], [98.4, 15289.0], [98.5, 15309.0], [98.6, 15329.0], [98.7, 15338.0], [98.8, 15342.0], [98.9, 15348.0], [99.0, 15359.0], [99.1, 15394.0], [99.2, 15483.0], [99.3, 15590.0], [99.4, 15626.0], [99.5, 15677.0], [99.6, 15710.0], [99.7, 15798.0], [99.8, 15878.0], [99.9, 15949.0]], "isOverall": false, "label": "/RepairService/submitRepair", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 318.0, "series": [{"data": [[0.0, 83.0], [600.0, 11.0], [700.0, 10.0], [800.0, 11.0], [900.0, 3.0], [1000.0, 1.0], [1100.0, 5.0], [1200.0, 4.0], [1300.0, 9.0], [1400.0, 5.0], [1500.0, 2.0], [1600.0, 5.0], [1800.0, 4.0], [1900.0, 2.0], [2000.0, 6.0], [2100.0, 6.0], [2300.0, 3.0], [2200.0, 7.0], [2400.0, 1.0], [2500.0, 3.0], [2600.0, 12.0], [2800.0, 107.0], [2700.0, 93.0], [2900.0, 108.0], [3000.0, 104.0], [3100.0, 79.0], [3300.0, 318.0], [3200.0, 198.0], [3400.0, 43.0], [3500.0, 67.0], [3700.0, 109.0], [3600.0, 197.0], [3800.0, 39.0], [3900.0, 24.0], [4000.0, 17.0], [4200.0, 4.0], [4100.0, 5.0], [4300.0, 2.0], [4500.0, 2.0], [4600.0, 3.0], [4700.0, 2.0], [4800.0, 2.0], [5100.0, 5.0], [4900.0, 9.0], [5000.0, 5.0], [5200.0, 5.0], [5300.0, 1.0], [5500.0, 4.0], [5600.0, 1.0], [5800.0, 3.0], [5700.0, 2.0], [5900.0, 2.0], [6200.0, 1.0], [6600.0, 4.0], [6500.0, 1.0], [7100.0, 1.0], [7200.0, 1.0], [7300.0, 4.0], [7400.0, 1.0], [7800.0, 3.0], [7700.0, 1.0], [8500.0, 1.0], [8700.0, 1.0], [9200.0, 2.0], [9400.0, 1.0], [10100.0, 1.0], [10300.0, 1.0], [10400.0, 2.0], [10600.0, 2.0], [11200.0, 1.0], [11000.0, 1.0], [11400.0, 1.0], [11300.0, 2.0], [11700.0, 3.0], [11500.0, 1.0], [11900.0, 3.0], [11800.0, 1.0], [12100.0, 1.0], [12700.0, 2.0], [12600.0, 4.0], [13300.0, 2.0], [13100.0, 1.0], [12800.0, 1.0], [13700.0, 1.0], [13600.0, 1.0], [13800.0, 1.0], [14300.0, 3.0], [14100.0, 1.0], [14000.0, 1.0], [13900.0, 1.0], [14700.0, 1.0], [100.0, 35.0], [200.0, 35.0], [300.0, 40.0], [400.0, 38.0], [500.0, 37.0]], "isOverall": false, "label": "/HandleService/backtransmit", "isController": false}, {"data": [[0.0, 40.0], [100.0, 10.0], [200.0, 19.0], [300.0, 29.0], [400.0, 26.0], [500.0, 13.0], [600.0, 4.0], [700.0, 1.0], [800.0, 5.0], [900.0, 8.0], [1000.0, 10.0], [1100.0, 20.0], [1200.0, 14.0], [1300.0, 19.0], [1400.0, 19.0], [1500.0, 21.0], [1600.0, 26.0], [1700.0, 29.0], [1800.0, 26.0], [1900.0, 26.0], [2000.0, 26.0], [2100.0, 39.0], [2200.0, 32.0], [2300.0, 31.0], [2400.0, 18.0], [2500.0, 27.0], [2600.0, 26.0], [2700.0, 227.0], [2800.0, 210.0], [2900.0, 85.0], [3000.0, 118.0], [3100.0, 115.0], [3200.0, 75.0], [3300.0, 106.0], [3400.0, 29.0], [3500.0, 21.0], [3600.0, 17.0], [3700.0, 24.0], [3800.0, 32.0], [3900.0, 31.0], [4000.0, 32.0], [4100.0, 34.0], [4200.0, 12.0], [4300.0, 9.0], [4400.0, 10.0], [4500.0, 9.0], [4600.0, 4.0], [4700.0, 3.0], [4800.0, 6.0], [4900.0, 5.0], [5100.0, 4.0], [5000.0, 1.0], [5200.0, 1.0], [5300.0, 5.0], [5400.0, 4.0], [5500.0, 2.0], [5600.0, 3.0], [5800.0, 4.0], [5700.0, 1.0], [5900.0, 3.0], [6000.0, 1.0], [6100.0, 1.0], [6300.0, 3.0], [6200.0, 2.0], [6400.0, 3.0], [6500.0, 4.0], [6600.0, 2.0], [6700.0, 1.0], [6800.0, 2.0], [6900.0, 4.0], [7000.0, 2.0], [7100.0, 1.0], [7200.0, 7.0], [7300.0, 2.0], [7500.0, 2.0], [7600.0, 1.0], [7900.0, 4.0], [8200.0, 1.0], [8400.0, 3.0], [8300.0, 1.0], [8500.0, 8.0], [8800.0, 6.0], [9000.0, 1.0], [9200.0, 3.0], [9100.0, 2.0], [9300.0, 1.0], [9400.0, 1.0], [9500.0, 1.0], [9700.0, 1.0], [10100.0, 1.0], [10200.0, 2.0], [9900.0, 2.0], [9800.0, 2.0], [10300.0, 2.0], [10400.0, 1.0], [11400.0, 3.0], [11500.0, 2.0], [11300.0, 1.0], [11800.0, 2.0], [11900.0, 2.0], [12100.0, 2.0], [12000.0, 1.0], [12300.0, 2.0], [12400.0, 1.0], [12500.0, 1.0], [12800.0, 3.0], [12900.0, 1.0], [13000.0, 3.0], [13100.0, 2.0], [13300.0, 2.0], [13500.0, 2.0], [13400.0, 1.0], [13600.0, 1.0], [13700.0, 4.0], [13800.0, 3.0], [14000.0, 2.0], [14200.0, 4.0], [14300.0, 1.0], [14500.0, 3.0], [14600.0, 3.0], [14700.0, 2.0], [14800.0, 5.0], [15000.0, 4.0], [14900.0, 3.0], [15100.0, 6.0], [15200.0, 11.0], [15300.0, 13.0], [15500.0, 3.0], [15600.0, 4.0], [15400.0, 2.0], [15800.0, 3.0], [15700.0, 3.0], [15900.0, 1.0], [16100.0, 1.0]], "isOverall": false, "label": "/RepairService/submitRepair", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 16100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 210.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3434.0, "series": [{"data": [[0.0, 356.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 210.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3434.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 129.12500000000009, "minX": 1.629816318E12, "maxY": 1000.0, "series": [{"data": [[1.629816332E12, 129.12500000000009], [1.629816322E12, 1000.0], [1.629816324E12, 999.7027027027037], [1.629816326E12, 995.2285115303977], [1.629816328E12, 859.323076923076], [1.629816318E12, 1000.0], [1.62981632E12, 1000.0], [1.62981633E12, 420.26434782608646]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629816332E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 5.0, "minX": 2.0, "maxY": 15792.0, "series": [{"data": [[2.0, 6.5], [3.0, 5.0], [5.0, 42.5], [8.0, 37.666666666666664], [9.0, 58.0], [10.0, 95.0], [11.0, 289.0], [12.0, 98.0], [15.0, 3281.5], [16.0, 126.0], [17.0, 390.0], [18.0, 468.0], [19.0, 147.0], [21.0, 313.0], [22.0, 443.0], [23.0, 195.0], [24.0, 454.0], [25.0, 184.0], [26.0, 222.0], [27.0, 7463.0], [28.0, 205.0], [29.0, 6244.5], [30.0, 515.0], [31.0, 219.0], [32.0, 20.0], [35.0, 208.0], [34.0, 226.5], [37.0, 33.0], [36.0, 229.0], [39.0, 227.0], [38.0, 243.0], [40.0, 247.0], [43.0, 246.0], [42.0, 402.5], [45.0, 249.0], [44.0, 584.0], [47.0, 288.0], [46.0, 130.5], [48.0, 18.0], [51.0, 279.0], [50.0, 517.0], [53.0, 7606.0], [52.0, 289.0], [55.0, 4081.0], [57.0, 312.0], [56.0, 29.0], [58.0, 302.0], [61.0, 17.0], [60.0, 159.5], [63.0, 16.0], [62.0, 497.5], [67.0, 33.0], [66.0, 305.0], [65.0, 306.0], [64.0, 696.0], [71.0, 320.0], [70.0, 33.0], [69.0, 758.0], [68.0, 5632.0], [75.0, 983.0], [74.0, 320.0], [73.0, 322.0], [72.0, 172.5], [79.0, 347.0], [78.0, 349.0], [77.0, 349.0], [76.0, 329.0], [83.0, 850.0], [82.0, 591.0], [81.0, 34.0], [80.0, 345.5], [87.0, 465.0], [86.0, 4483.666666666666], [85.0, 440.0], [84.0, 339.0], [91.0, 395.0], [90.0, 364.0], [89.0, 363.0], [88.0, 376.0], [95.0, 401.0], [94.0, 37.0], [93.0, 212.0], [92.0, 30.0], [99.0, 3194.4000000000005], [98.0, 401.0], [97.0, 1140.0], [96.0, 30.0], [103.0, 3931.0], [102.0, 3365.25], [101.0, 433.0], [100.0, 26.0], [106.0, 4130.0], [105.0, 6930.0], [104.0, 319.0], [111.0, 483.0], [110.0, 4697.666666666667], [109.0, 486.0], [108.0, 490.3333333333333], [115.0, 2352.75], [114.0, 417.2], [112.0, 507.0], [118.0, 551.0], [117.0, 435.4], [116.0, 601.0], [123.0, 23.0], [122.0, 3848.5], [121.0, 539.0], [120.0, 545.0], [127.0, 580.0], [126.0, 3935.2500000000005], [124.0, 21.0], [135.0, 19.0], [134.0, 320.0], [133.0, 26.0], [132.0, 25.0], [131.0, 593.6666666666666], [130.0, 606.0], [129.0, 9470.5], [128.0, 569.0], [143.0, 2020.5], [142.0, 7821.6], [141.0, 1606.5], [140.0, 10262.0], [139.0, 3836.5], [137.0, 624.6666666666666], [151.0, 3587.0], [150.0, 5868.333333333333], [149.0, 1762.0], [148.0, 25.0], [147.0, 6117.0], [146.0, 756.0], [145.0, 5777.0], [144.0, 4123.0], [159.0, 4974.0], [158.0, 6604.0], [157.0, 8242.5], [156.0, 9183.5], [155.0, 2484.5], [154.0, 846.0], [153.0, 5795.0], [152.0, 5730.5], [167.0, 7322.0], [165.0, 37.5], [164.0, 6166.333333333333], [163.0, 875.0], [162.0, 6609.0], [161.0, 3669.5], [160.0, 3881.0], [175.0, 15.0], [173.0, 7578.8], [172.0, 6594.0], [171.0, 4126.0], [170.0, 6336.25], [169.0, 4121.0], [168.0, 7315.0], [183.0, 2550.5], [182.0, 22.0], [181.0, 4227.0], [180.0, 6592.0], [179.0, 5158.333333333333], [177.0, 5033.0], [176.0, 2020.0], [191.0, 5976.5], [190.0, 2547.0], [189.0, 5862.0], [188.0, 21.0], [187.0, 5085.0], [186.0, 7322.333333333333], [185.0, 1563.0], [184.0, 16.0], [198.0, 36.0], [196.0, 2161.0], [195.0, 3591.5], [194.0, 8963.0], [193.0, 24.0], [192.0, 5104.0], [207.0, 107.0], [205.0, 101.0], [204.0, 82.0], [203.0, 101.0], [202.0, 79.5], [200.0, 3261.5], [214.0, 155.0], [213.0, 154.75], [211.0, 13762.0], [210.0, 142.0], [209.0, 150.0], [208.0, 155.0], [223.0, 171.5], [222.0, 176.0], [221.0, 173.5], [220.0, 163.0], [218.0, 163.5], [217.0, 144.0], [216.0, 2645.5], [231.0, 3074.0], [230.0, 186.0], [229.0, 249.0], [228.0, 1148.3333333333335], [226.0, 199.0], [225.0, 173.0], [224.0, 192.0], [239.0, 279.0], [238.0, 251.0], [237.0, 216.0], [236.0, 217.0], [235.0, 225.0], [234.0, 234.0], [233.0, 240.0], [232.0, 244.0], [247.0, 389.0], [245.0, 382.0], [244.0, 374.0], [243.0, 360.5], [242.0, 2373.5], [241.0, 302.0], [240.0, 296.5], [255.0, 469.0], [254.0, 428.3333333333333], [253.0, 395.0], [252.0, 429.0], [251.0, 385.0], [250.0, 391.0], [249.0, 390.0], [248.0, 389.0], [270.0, 753.0], [271.0, 946.0], [269.0, 733.3333333333334], [268.0, 601.0], [267.0, 520.0], [266.0, 3609.0], [265.0, 469.5], [264.0, 481.0], [263.0, 460.0], [256.0, 2004.5], [258.0, 466.0], [257.0, 425.0], [262.0, 483.0], [261.0, 457.0], [260.0, 465.5], [286.0, 1423.0], [287.0, 2989.0], [285.0, 1472.0], [284.0, 5231.0], [283.0, 1394.5], [282.0, 3696.0], [281.0, 1383.0], [280.0, 1391.0], [279.0, 1354.0], [273.0, 6239.5], [272.0, 3063.0], [275.0, 1013.0], [274.0, 973.0], [278.0, 1310.0], [277.0, 1306.0], [276.0, 1210.0], [302.0, 2126.0], [303.0, 2235.0], [301.0, 4505.333333333333], [300.0, 2107.5], [299.0, 2088.0], [298.0, 2104.0], [297.0, 2080.0], [296.0, 2012.0], [295.0, 4084.0], [289.0, 1654.0], [288.0, 1644.0], [291.0, 1771.0], [290.0, 1861.0], [294.0, 1894.0], [293.0, 1741.5], [318.0, 2629.0], [319.0, 2628.0], [317.0, 2637.5], [316.0, 2641.0], [315.0, 2648.0], [314.0, 2660.0], [313.0, 2595.0], [311.0, 2581.0], [305.0, 2239.0], [304.0, 2224.0], [307.0, 2258.0], [306.0, 2280.0], [310.0, 2499.0], [309.0, 2558.0], [308.0, 4592.0], [333.0, 2776.0], [334.0, 2779.0], [332.0, 2778.5], [323.0, 2784.0], [322.0, 2786.0], [321.0, 2699.0], [320.0, 2773.0], [330.0, 2795.0], [329.0, 2794.0], [328.0, 2799.5], [326.0, 2750.0], [325.0, 2760.0], [324.0, 2758.0], [350.0, 2824.0], [351.0, 2825.0], [348.0, 2815.0], [339.0, 2808.0], [337.0, 2791.0], [336.0, 2791.0], [347.0, 2816.0], [346.0, 2827.0], [345.0, 5275.0], [344.0, 2818.5], [342.0, 2814.0], [341.0, 2815.0], [340.0, 6643.0], [365.0, 2857.0], [366.0, 2865.0], [364.0, 2858.0], [355.0, 2834.0], [354.0, 2833.0], [353.0, 2804.0], [352.0, 2810.0], [363.0, 2866.0], [362.0, 2830.0], [361.0, 2827.0], [360.0, 2835.0], [359.0, 2836.0], [358.0, 2826.0], [357.0, 2830.0], [382.0, 2876.0], [383.0, 2850.0], [381.0, 2867.5], [379.0, 2860.0], [378.0, 2848.5], [376.0, 2849.0], [374.0, 2856.5], [372.0, 2864.0], [371.0, 2840.0], [370.0, 2822.0], [369.0, 2867.0], [368.0, 2854.5], [398.0, 2896.0], [399.0, 2890.0], [397.0, 2896.0], [387.0, 2888.0], [386.0, 2889.0], [385.0, 2857.5], [395.0, 2895.0], [394.0, 2898.0], [393.0, 2893.0], [392.0, 2887.0], [391.0, 2869.5], [389.0, 2883.0], [388.0, 2886.0], [415.0, 2933.6666666666665], [412.0, 2905.0], [411.0, 2917.0], [410.0, 2899.0], [409.0, 2926.0], [408.0, 5294.0], [407.0, 2935.0], [406.0, 2910.6666666666665], [403.0, 2942.0], [402.0, 2924.0], [401.0, 2934.0], [400.0, 2902.0], [430.0, 2947.0], [431.0, 2943.0], [429.0, 2938.0], [428.0, 2948.0], [427.0, 2949.0], [426.0, 2956.0], [425.0, 2958.0], [424.0, 2960.0], [423.0, 2955.0], [416.0, 2913.0], [419.0, 2938.0], [417.0, 2931.0], [422.0, 7156.0], [421.0, 3745.0], [420.0, 2936.0], [446.0, 2953.3333333333335], [447.0, 2950.0], [444.0, 2967.0], [435.0, 3776.0], [434.0, 2945.0], [433.0, 2960.0], [432.0, 2951.0], [443.0, 2962.0], [442.0, 2935.0], [441.0, 2944.0], [440.0, 4597.0], [439.0, 2963.5], [437.0, 2953.0], [436.0, 2953.0], [462.0, 2976.0], [463.0, 2960.0], [461.0, 2950.0], [460.0, 2963.0], [458.0, 7204.0], [457.0, 2951.0], [456.0, 2978.0], [455.0, 2960.0], [449.0, 2967.0], [448.0, 2946.0], [451.0, 2964.0], [450.0, 2972.0], [454.0, 3787.0], [452.0, 2979.0], [478.0, 2998.0], [479.0, 2999.0], [477.0, 2990.0], [467.0, 2979.0], [466.0, 2964.0], [465.0, 2969.0], [475.0, 5845.5], [474.0, 2985.0], [472.0, 2996.5], [470.0, 2971.0], [469.0, 2967.0], [468.0, 2974.0], [494.0, 3022.5], [495.0, 3038.0], [492.0, 2984.0], [483.0, 3025.0], [482.0, 3002.0], [481.0, 3001.0], [491.0, 2985.0], [490.0, 2998.0], [489.0, 3019.0], [487.0, 3010.0], [486.0, 2995.0], [485.0, 3009.0], [484.0, 3025.0], [499.0, 3019.0], [510.0, 3037.0], [509.0, 3029.3333333333335], [506.0, 3012.0], [505.0, 3046.0], [504.0, 3025.0], [503.0, 3036.0], [502.0, 3048.0], [501.0, 3030.5], [498.0, 3023.0], [497.0, 3822.0], [537.0, 3044.0], [542.0, 3055.0], [543.0, 3067.0], [528.0, 3054.0], [530.0, 3045.0], [529.0, 3059.0], [541.0, 3076.0], [540.0, 3074.0], [538.0, 3062.0], [536.0, 3060.0], [518.0, 3045.0], [517.0, 3047.3333333333335], [514.0, 3037.0], [513.0, 3028.25], [527.0, 3028.0], [526.0, 3042.0], [524.0, 3043.0], [523.0, 3046.0], [522.0, 3031.0], [521.0, 3051.0], [520.0, 3057.5], [535.0, 3861.0], [533.0, 3048.0], [569.0, 3130.0], [573.0, 3099.0], [575.0, 4506.666666666667], [561.0, 3087.0], [560.0, 3107.0], [565.0, 3886.0], [564.0, 3094.3333333333335], [572.0, 3129.0], [571.0, 3126.0], [570.0, 3117.0], [568.0, 3098.0], [551.0, 3066.5], [549.0, 3068.0], [547.0, 3087.0], [546.0, 3099.0], [545.0, 3061.5], [559.0, 3094.6666666666665], [556.0, 3079.5], [555.0, 3087.0], [553.0, 3078.0], [552.0, 3063.0], [567.0, 3085.0], [566.0, 3096.0], [601.0, 3157.0], [606.0, 3184.0], [607.0, 3178.0], [592.0, 3151.0], [595.0, 3163.0], [594.0, 3155.5], [605.0, 3206.0], [604.0, 3163.0], [603.0, 3164.5], [600.0, 3159.0], [583.0, 3130.0], [582.0, 3124.0], [581.0, 3129.0], [580.0, 3130.0], [579.0, 3120.0], [578.0, 3140.0], [577.0, 3135.0], [576.0, 3131.0], [591.0, 3150.0], [590.0, 3145.0], [589.0, 3144.6666666666665], [586.0, 3150.0], [585.0, 3135.0], [599.0, 3154.0], [597.0, 3154.0], [633.0, 3255.0], [637.0, 3235.0], [638.0, 3229.0], [625.0, 3224.0], [624.0, 3200.0], [629.0, 3224.0], [627.0, 3223.0], [636.0, 3235.0], [635.0, 3237.0], [634.0, 3233.0], [632.0, 3224.0], [615.0, 3188.0], [614.0, 3177.0], [613.0, 3185.0], [611.0, 3174.0], [610.0, 3212.0], [608.0, 3176.0], [623.0, 3228.0], [622.0, 3192.0], [621.0, 3190.0], [620.0, 3188.0], [619.0, 3197.5], [617.0, 3198.0], [631.0, 3228.0], [630.0, 3230.0], [665.0, 3248.0], [670.0, 3256.0], [671.0, 3256.0], [657.0, 3247.5], [661.0, 3245.0], [659.0, 3252.5], [669.0, 3257.0], [668.0, 3258.0], [667.0, 3248.0], [664.0, 3269.0], [647.0, 3250.0], [646.0, 3253.0], [645.0, 3255.0], [644.0, 3249.0], [642.0, 3249.5], [640.0, 3237.0], [655.0, 3241.0], [654.0, 3251.0], [653.0, 3243.0], [652.0, 3248.0], [651.0, 3257.5], [648.0, 3251.0], [663.0, 3244.0], [662.0, 3250.0], [700.0, 3174.0], [703.0, 3187.0], [689.0, 3292.5], [688.0, 3240.0], [691.0, 3233.0], [690.0, 3253.0], [693.0, 3277.0], [692.0, 3271.0], [702.0, 3187.0], [701.0, 3168.0], [699.0, 3173.0], [698.0, 3182.0], [697.0, 3220.0], [696.0, 3200.0], [687.0, 3292.0], [672.0, 3253.0], [675.0, 3259.5], [673.0, 3256.0], [678.0, 3269.0], [676.0, 3251.0], [686.0, 3322.0], [685.0, 3250.0], [684.0, 3250.0], [683.0, 3250.0], [682.0, 3249.0], [681.0, 3272.0], [680.0, 3266.6666666666665], [695.0, 3207.0], [694.0, 3210.0], [729.0, 3224.0], [734.0, 3199.0], [735.0, 3232.0], [720.0, 3209.0], [724.0, 3222.5], [722.0, 3201.5], [733.0, 3215.5], [731.0, 3206.0], [730.0, 3224.0], [728.0, 3226.0], [711.0, 3210.0], [709.0, 3209.0], [708.0, 3204.0], [707.0, 3196.3333333333335], [705.0, 3191.0], [704.0, 3192.0], [718.0, 3204.0], [717.0, 3190.0], [716.0, 3194.0], [714.0, 3186.0], [713.0, 3212.0], [712.0, 3213.0], [727.0, 3208.5], [725.0, 3234.0], [760.0, 3283.0], [764.0, 3303.0], [767.0, 3306.0], [754.0, 3251.0], [752.0, 3268.0], [757.0, 3291.0], [755.0, 3275.0], [766.0, 3296.0], [765.0, 3297.0], [763.0, 3292.0], [762.0, 3296.0], [761.0, 3284.0], [751.0, 3243.5], [736.0, 3200.0], [738.0, 3228.0], [737.0, 3230.0], [741.0, 3219.0], [740.0, 3597.0], [749.0, 3262.0], [748.0, 3264.0], [747.0, 3269.0], [746.0, 3250.0], [745.0, 3217.0], [744.0, 3230.3333333333335], [759.0, 3290.0], [758.0, 3288.0], [797.0, 3311.0], [798.0, 6719.5], [785.0, 3296.5], [787.0, 3299.0], [786.0, 3314.0], [796.0, 3297.0], [794.0, 3316.0], [793.0, 3298.0], [792.0, 3299.0], [783.0, 3298.0], [770.0, 3280.0], [768.0, 3296.0], [772.0, 3303.0], [771.0, 3278.0], [775.0, 3289.5], [773.0, 3295.0], [782.0, 3312.0], [781.0, 3298.6666666666665], [778.0, 3288.0], [777.0, 3290.0], [791.0, 3296.0], [790.0, 3300.0], [789.0, 3298.0], [788.0, 3286.0], [829.0, 3312.0], [820.0, 3330.0], [831.0, 3321.0], [816.0, 3333.0], [819.0, 3331.0], [818.0, 3327.0], [828.0, 3326.5], [826.0, 3331.0], [824.0, 3309.0], [807.0, 3327.0], [805.0, 3310.3333333333335], [803.0, 3309.0], [801.0, 3321.0], [800.0, 3316.5], [815.0, 3325.0], [814.0, 3316.6666666666665], [811.0, 3326.0], [810.0, 3323.0], [809.0, 3321.0], [808.0, 3306.0], [823.0, 3314.0], [822.0, 3319.0], [821.0, 3334.0], [857.0, 3339.0], [862.0, 3337.0], [863.0, 3330.0], [848.0, 3339.5], [850.0, 3304.0], [849.0, 3357.0], [853.0, 3341.0], [851.0, 5543.0], [860.0, 3345.0], [859.0, 3340.0], [858.0, 3337.0], [856.0, 3344.0], [839.0, 3316.0], [838.0, 3328.0], [837.0, 3332.0], [836.0, 3304.0], [835.0, 3329.0], [834.0, 3322.5], [832.0, 3320.0], [846.0, 3307.3333333333335], [844.0, 3308.0], [843.0, 3316.0], [842.0, 3314.0], [841.0, 3318.0], [840.0, 3314.5], [855.0, 3326.0], [854.0, 3348.0], [892.0, 3318.5], [895.0, 3337.0], [881.0, 3343.0], [880.0, 3349.0], [883.0, 3332.0], [882.0, 3340.0], [885.0, 3347.0], [884.0, 4966.5], [894.0, 3325.0], [893.0, 3320.0], [891.0, 3308.0], [890.0, 3340.0], [889.0, 3325.0], [888.0, 3323.0], [879.0, 3355.0], [866.0, 3331.0], [865.0, 3344.5], [868.0, 3348.0], [867.0, 3351.0], [871.0, 3341.5], [869.0, 3344.0], [877.0, 3358.0], [876.0, 3326.6666666666665], [873.0, 3336.0], [872.0, 9417.0], [887.0, 3329.0], [886.0, 6850.5], [921.0, 3330.0], [926.0, 3320.5], [927.0, 3330.0], [913.0, 3322.0], [912.0, 3314.0], [924.0, 3338.0], [923.0, 3328.0], [922.0, 3339.0], [911.0, 3318.0], [898.0, 3332.0], [897.0, 3346.0], [901.0, 3324.0], [899.0, 3315.0], [903.0, 3326.0], [902.0, 3313.0], [910.0, 3326.0], [909.0, 3312.0], [908.0, 3329.0], [907.0, 3326.0], [905.0, 3342.0], [904.0, 3346.0], [919.0, 3335.0], [918.0, 3330.0], [916.0, 3321.0], [915.0, 3330.0], [956.0, 3388.0], [959.0, 3393.0], [944.0, 3341.0], [946.0, 3335.0], [945.0, 3335.0], [949.0, 3339.0], [947.0, 3334.0], [958.0, 3379.0], [957.0, 3404.0], [955.0, 3386.0], [954.0, 3388.0], [953.0, 3390.0], [952.0, 3398.0], [943.0, 3341.0], [928.0, 3321.0], [930.0, 3313.0], [929.0, 3324.0], [932.0, 3337.0], [931.0, 3340.0], [935.0, 3332.0], [934.0, 3338.5], [941.0, 3320.0], [940.0, 3356.0], [939.0, 3359.0], [938.0, 3337.0], [937.0, 3340.0], [951.0, 3386.0], [950.0, 3344.0], [990.0, 3382.0], [991.0, 4876.333333333333], [976.0, 3432.0], [989.0, 3382.0], [988.0, 3400.0], [987.0, 3392.0], [986.0, 1731.0], [985.0, 3396.0], [966.0, 3508.5], [962.0, 3406.0], [961.0, 3397.0], [960.0, 3391.0], [975.0, 3434.5], [973.0, 3456.0], [972.0, 3456.0], [971.0, 3483.3333333333335], [969.0, 3483.5], [982.0, 3389.0], [980.0, 3397.5], [978.0, 3421.0], [977.0, 3412.0], [1000.0, 3472.367666232075], [999.0, 3138.5454545454545], [998.0, 1865.0], [997.0, 2852.25], [996.0, 2787.2], [995.0, 2931.1111111111113], [994.0, 3031.166666666667], [993.0, 3126.0], [992.0, 4340.8]], "isOverall": false, "label": "/HandleService/backtransmit", "isController": false}, {"data": [[683.1390000000001, 3082.9540000000006]], "isOverall": false, "label": "/HandleService/backtransmit-Aggregated", "isController": false}, {"data": [[3.0, 343.66666666666663], [11.0, 152.5], [12.0, 414.0], [17.0, 55.0], [18.0, 243.0], [19.0, 452.0], [29.0, 255.0], [36.0, 264.0], [39.0, 425.5], [38.0, 574.0], [40.0, 259.0], [42.0, 44.0], [44.0, 300.0], [53.0, 217.66666666666666], [56.0, 690.0], [62.0, 323.5], [64.0, 314.5], [69.0, 366.0], [68.0, 198.5], [75.0, 416.33333333333337], [74.0, 344.5], [73.0, 511.66666666666663], [78.0, 369.0], [77.0, 363.0], [83.0, 377.0], [82.0, 215.0], [80.0, 372.0], [87.0, 740.0], [85.0, 399.0], [91.0, 40.0], [89.0, 8273.0], [88.0, 391.0], [93.0, 2752.0], [99.0, 339.25], [98.0, 438.0], [97.0, 516.3333333333334], [96.0, 421.0], [102.0, 262.25], [101.0, 459.0], [100.0, 1459.3333333333333], [105.0, 494.0], [110.0, 5809.666666666666], [109.0, 25.0], [108.0, 506.0], [115.0, 44.0], [114.0, 8216.5], [112.0, 54.0], [117.0, 6794.749999999999], [116.0, 3503.2], [122.0, 15682.0], [121.0, 15792.0], [120.0, 1092.0], [127.0, 4540.5], [126.0, 594.0], [135.0, 10635.4], [131.0, 5411.666666666667], [128.0, 333.0], [140.0, 10624.666666666668], [137.0, 9526.0], [151.0, 14876.0], [150.0, 5136.0], [149.0, 15342.0], [147.0, 9599.333333333334], [144.0, 12365.0], [159.0, 30.0], [158.0, 15238.0], [157.0, 15590.0], [155.0, 9094.333333333334], [167.0, 15342.0], [165.0, 3486.4], [164.0, 11256.333333333334], [163.0, 11390.5], [162.0, 15215.0], [175.0, 15289.0], [173.0, 12615.375], [171.0, 8196.0], [170.0, 15340.5], [183.0, 1693.0], [180.0, 15093.0], [179.0, 8262.285714285716], [177.0, 10020.0], [176.0, 9783.6], [190.0, 15137.0], [189.0, 8322.0], [188.0, 5108.0], [186.0, 8482.666666666666], [185.0, 49.0], [196.0, 86.33333333333333], [194.0, 8597.0], [193.0, 14967.0], [202.0, 154.66666666666666], [200.0, 5087.666666666666], [222.0, 183.0], [220.0, 196.0], [217.0, 182.0], [228.0, 211.0], [226.0, 253.5], [225.0, 234.0], [238.0, 5160.333333333334], [237.0, 3506.1111111111113], [235.0, 7576.5], [234.0, 262.0], [245.0, 418.0], [242.0, 406.0], [240.0, 6126.0], [253.0, 454.0], [252.0, 458.0], [250.0, 4413.0], [248.0, 400.0], [271.0, 7786.5], [270.0, 874.0], [269.0, 883.0], [265.0, 4042.125], [264.0, 491.0], [262.0, 14665.0], [258.0, 479.0], [286.0, 7944.5], [277.0, 1347.0], [275.0, 5529.333333333334], [303.0, 13757.0], [300.0, 8546.0], [299.0, 14171.0], [298.0, 2134.0], [297.0, 2102.0], [295.0, 7121.0], [294.0, 2067.25], [293.0, 8576.0], [289.0, 7295.0], [288.0, 1764.0], [308.0, 13347.0], [307.0, 2383.0], [306.0, 2522.0], [304.0, 5512.428571428572], [328.0, 14059.0], [326.0, 2780.0], [321.0, 2800.0], [351.0, 13899.0], [361.0, 2858.0], [379.0, 13760.0], [378.0, 7242.0], [376.0, 13887.0], [391.0, 2898.0], [389.0, 13828.0], [388.0, 13715.0], [429.0, 13679.0], [423.0, 13705.0], [417.0, 2966.0], [443.0, 2980.0], [439.0, 13421.0], [462.0, 13552.0], [455.0, 2992.0], [510.0, 3080.0], [524.0, 13301.0], [521.0, 3050.0], [513.0, 13594.0], [568.0, 13012.0], [566.0, 7265.0], [564.0, 13175.0], [561.0, 3116.0], [552.0, 13094.0], [603.0, 12808.0], [607.0, 3219.0], [601.0, 13034.0], [594.0, 12856.0], [590.0, 3178.0], [589.0, 3164.0], [586.0, 3184.0], [580.0, 13110.0], [578.0, 3138.0], [632.0, 3270.0], [627.0, 12944.0], [623.0, 3227.0], [614.0, 5391.0], [642.0, 8076.5], [690.0, 3241.0], [681.0, 3340.5], [673.0, 3258.0], [730.0, 3230.5], [717.0, 12372.0], [716.0, 9891.0], [713.0, 3207.0], [764.0, 12132.0], [749.0, 12408.0], [747.0, 3271.0], [798.0, 4621.5], [791.0, 3321.0], [773.0, 7804.5], [770.0, 12084.0], [829.0, 11998.0], [816.0, 11305.0], [811.0, 3339.0], [809.0, 12117.0], [803.0, 3334.0], [801.0, 3332.0], [856.0, 3354.0], [854.0, 3350.0], [853.0, 3360.5], [851.0, 3348.0], [844.0, 7649.5], [842.0, 3337.0], [832.0, 3343.0], [882.0, 7595.0], [881.0, 11829.0], [880.0, 4998.5], [923.0, 3360.0], [922.0, 3373.0], [945.0, 11570.0], [943.0, 3362.0], [934.0, 3352.0], [991.0, 3350.2222222222226], [990.0, 3401.75], [980.0, 11473.0], [978.0, 6090.666666666667], [977.0, 3438.0], [975.0, 11448.0], [973.0, 3458.0], [972.0, 3479.0], [969.0, 3500.0], [961.0, 11521.0], [960.0, 3414.0], [1000.0, 3031.124318429661], [999.0, 3074.2413793103456], [998.0, 3192.870967741935], [997.0, 3008.166666666667], [996.0, 3104.1454545454544], [995.0, 3000.9670329670325], [994.0, 3155.079365079365], [993.0, 3385.148148148149], [992.0, 3408.988235294117]], "isOverall": false, "label": "/RepairService/submitRepair", "isController": false}, {"data": [[865.0565000000005, 3585.736500000002]], "isOverall": false, "label": "/RepairService/submitRepair-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 35802.0, "minX": 1.629816318E12, "maxY": 98208.5, "series": [{"data": [[1.629816332E12, 57936.0], [1.629816322E12, 54060.0], [1.629816324E12, 60384.0], [1.629816326E12, 48654.0], [1.629816328E12, 53040.0], [1.629816318E12, 35802.0], [1.62981632E12, 39474.0], [1.62981633E12, 58650.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.629816332E12, 91899.0], [1.629816322E12, 78346.0], [1.629816324E12, 95505.0], [1.629816326E12, 98208.5], [1.629816328E12, 80371.0], [1.629816318E12, 74421.5], [1.62981632E12, 81988.5], [1.62981633E12, 83260.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629816332E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 25.666666666666668, "minX": 1.629816318E12, "maxY": 6377.6509433962265, "series": [{"data": [[1.629816332E12, 2280.7636887608087], [1.629816322E12, 3721.583535108959], [1.629816324E12, 3223.9945205479435], [1.629816326E12, 3027.3684210526308], [1.629816328E12, 3388.5096418732774], [1.629816318E12, 32.5], [1.62981632E12, 25.666666666666668], [1.62981633E12, 2804.904051172709]], "isOverall": false, "label": "/HandleService/backtransmit", "isController": false}, {"data": [[1.629816332E12, 5217.009049773759], [1.629816322E12, 4598.871794871793], [1.629816324E12, 3281.4889867841393], [1.629816326E12, 3189.0341685649178], [1.629816328E12, 4314.159235668791], [1.629816318E12, 1928.6017191977082], [1.62981632E12, 3409.1822916666692], [1.62981633E12, 6377.6509433962265]], "isOverall": false, "label": "/RepairService/submitRepair", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629816332E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 25.666666666666668, "minX": 1.629816318E12, "maxY": 6377.6509433962265, "series": [{"data": [[1.629816332E12, 2280.7492795389044], [1.629816322E12, 3721.5641646489103], [1.629816324E12, 3223.9698630136995], [1.629816326E12, 3027.342105263157], [1.629816328E12, 3388.49862258953], [1.629816318E12, 32.5], [1.62981632E12, 25.666666666666668], [1.62981633E12, 2804.8997867803855]], "isOverall": false, "label": "/HandleService/backtransmit", "isController": false}, {"data": [[1.629816332E12, 5216.995475113124], [1.629816322E12, 4598.854700854701], [1.629816324E12, 3281.471365638768], [1.629816326E12, 3189.01366742597], [1.629816328E12, 4314.140127388534], [1.629816318E12, 1928.5157593123215], [1.62981632E12, 3409.1197916666656], [1.62981633E12, 6377.6509433962265]], "isOverall": false, "label": "/RepairService/submitRepair", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629816332E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.629816318E12, "maxY": 481.96614583333326, "series": [{"data": [[1.629816332E12, 0.0], [1.629816322E12, 0.0], [1.629816324E12, 0.0], [1.629816326E12, 0.0], [1.629816328E12, 0.0], [1.629816318E12, 0.0], [1.62981632E12, 0.0], [1.62981633E12, 0.0]], "isOverall": false, "label": "/HandleService/backtransmit", "isController": false}, {"data": [[1.629816332E12, 20.493212669683256], [1.629816322E12, 59.598290598290596], [1.629816324E12, 13.158590308370048], [1.629816326E12, 2.719817767653762], [1.629816328E12, 9.796178343949045], [1.629816318E12, 253.61891117478504], [1.62981632E12, 481.96614583333326], [1.62981633E12, 40.169811320754725]], "isOverall": false, "label": "/RepairService/submitRepair", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629816332E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 5.0, "minX": 1.629816318E12, "maxY": 16132.0, "series": [{"data": [[1.629816332E12, 16132.0], [1.629816322E12, 6753.0], [1.629816324E12, 8803.0], [1.629816326E12, 10456.0], [1.629816328E12, 12513.0], [1.629816318E12, 3139.0], [1.62981632E12, 4944.0], [1.62981633E12, 14836.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.629816332E12, 14876.0], [1.629816322E12, 4129.8], [1.629816324E12, 3506.0], [1.629816326E12, 3166.6], [1.629816328E12, 3406.9], [1.629816318E12, 2675.2], [1.62981632E12, 4361.4], [1.62981633E12, 5282.599999999999]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.629816332E12, 15813.809999999998], [1.629816322E12, 6469.5199999999995], [1.629816324E12, 8340.580000000005], [1.629816326E12, 10234.399999999998], [1.629816328E12, 12128.849999999999], [1.629816318E12, 3119.2400000000002], [1.62981632E12, 4908.08], [1.62981633E12, 14586.400000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.629816332E12, 15322.699999999999], [1.629816322E12, 5492.4], [1.629816324E12, 5537.150000000001], [1.629816326E12, 3201.5], [1.629816328E12, 5814.999999999978], [1.629816318E12, 2829.3999999999996], [1.62981632E12, 4577.799999999999], [1.62981633E12, 13122.999999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.629816332E12, 5.0], [1.629816322E12, 3511.0], [1.629816324E12, 38.0], [1.629816326E12, 19.0], [1.629816328E12, 53.0], [1.629816318E12, 19.0], [1.62981632E12, 23.0], [1.62981633E12, 279.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.629816332E12, 453.0], [1.629816322E12, 3716.0], [1.629816324E12, 2870.0], [1.629816326E12, 2945.0], [1.629816328E12, 3321.0], [1.629816318E12, 1912.0], [1.62981632E12, 3359.0], [1.62981633E12, 2964.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629816332E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 366.0, "minX": 105.0, "maxY": 3884.5, "series": [{"data": [[167.0, 3792.0], [220.0, 3003.0], [230.0, 3071.0], [238.0, 3336.5], [246.0, 2104.5], [244.0, 3884.5], [247.0, 2864.0], [265.0, 2774.0], [257.0, 366.0], [286.0, 3658.5], [282.0, 3299.0], [272.0, 2383.0], [303.0, 3062.0], [311.0, 1693.0], [327.0, 3348.0], [105.0, 1362.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 327.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 366.0, "minX": 105.0, "maxY": 3884.5, "series": [{"data": [[167.0, 3792.0], [220.0, 3003.0], [230.0, 3071.0], [238.0, 3336.5], [246.0, 2104.5], [244.0, 3884.5], [247.0, 2864.0], [265.0, 2774.0], [257.0, 366.0], [286.0, 3658.5], [282.0, 3299.0], [272.0, 2383.0], [303.0, 3062.0], [311.0, 1693.0], [327.0, 3348.0], [105.0, 1362.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 327.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 79.5, "minX": 1.629816316E12, "maxY": 419.5, "series": [{"data": [[1.629816332E12, 165.0], [1.629816322E12, 266.0], [1.629816324E12, 293.5], [1.629816316E12, 419.5], [1.629816326E12, 234.5], [1.629816328E12, 91.5], [1.629816318E12, 256.0], [1.62981632E12, 194.5], [1.62981633E12, 79.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629816332E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 175.5, "minX": 1.629816318E12, "maxY": 296.0, "series": [{"data": [[1.629816332E12, 284.0], [1.629816322E12, 265.0], [1.629816324E12, 296.0], [1.629816326E12, 238.5], [1.629816328E12, 260.0], [1.629816318E12, 175.5], [1.62981632E12, 193.5], [1.62981633E12, 287.5]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629816332E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.629816318E12, "maxY": 234.5, "series": [{"data": [[1.629816332E12, 173.5], [1.629816322E12, 206.5], [1.629816324E12, 182.5], [1.629816326E12, 19.0], [1.629816328E12, 181.5], [1.629816318E12, 1.0], [1.62981632E12, 1.5], [1.62981633E12, 234.5]], "isOverall": false, "label": "/HandleService/backtransmit-success", "isController": false}, {"data": [[1.629816332E12, 110.5], [1.629816322E12, 58.5], [1.629816324E12, 113.5], [1.629816326E12, 219.5], [1.629816328E12, 78.5], [1.629816318E12, 174.5], [1.62981632E12, 192.0], [1.62981633E12, 53.0]], "isOverall": false, "label": "/RepairService/submitRepair-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629816332E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 175.5, "minX": 1.629816318E12, "maxY": 296.0, "series": [{"data": [[1.629816332E12, 284.0], [1.629816322E12, 265.0], [1.629816324E12, 296.0], [1.629816326E12, 238.5], [1.629816328E12, 260.0], [1.629816318E12, 175.5], [1.62981632E12, 193.5], [1.62981633E12, 287.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629816332E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

