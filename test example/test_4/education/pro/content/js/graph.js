/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "maxY": 10137.0, "series": [{"data": [[0.0, 8.0], [0.1, 10.0], [0.2, 10.0], [0.3, 10.0], [0.4, 11.0], [0.5, 11.0], [0.6, 11.0], [0.7, 11.0], [0.8, 12.0], [0.9, 12.0], [1.0, 13.0], [1.1, 14.0], [1.2, 14.0], [1.3, 14.0], [1.4, 14.0], [1.5, 15.0], [1.6, 16.0], [1.7, 16.0], [1.8, 16.0], [1.9, 16.0], [2.0, 18.0], [2.1, 18.0], [2.2, 18.0], [2.3, 18.0], [2.4, 19.0], [2.5, 19.0], [2.6, 20.0], [2.7, 21.0], [2.8, 21.0], [2.9, 22.0], [3.0, 23.0], [3.1, 23.0], [3.2, 24.0], [3.3, 25.0], [3.4, 25.0], [3.5, 26.0], [3.6, 26.0], [3.7, 26.0], [3.8, 26.0], [3.9, 26.0], [4.0, 27.0], [4.1, 27.0], [4.2, 27.0], [4.3, 28.0], [4.4, 28.0], [4.5, 28.0], [4.6, 28.0], [4.7, 28.0], [4.8, 29.0], [4.9, 29.0], [5.0, 30.0], [5.1, 30.0], [5.2, 31.0], [5.3, 31.0], [5.4, 32.0], [5.5, 32.0], [5.6, 32.0], [5.7, 33.0], [5.8, 34.0], [5.9, 34.0], [6.0, 34.0], [6.1, 35.0], [6.2, 35.0], [6.3, 35.0], [6.4, 35.0], [6.5, 36.0], [6.6, 37.0], [6.7, 38.0], [6.8, 38.0], [6.9, 38.0], [7.0, 38.0], [7.1, 39.0], [7.2, 39.0], [7.3, 41.0], [7.4, 42.0], [7.5, 42.0], [7.6, 43.0], [7.7, 44.0], [7.8, 44.0], [7.9, 49.0], [8.0, 49.0], [8.1, 49.0], [8.2, 49.0], [8.3, 50.0], [8.4, 51.0], [8.5, 52.0], [8.6, 53.0], [8.7, 53.0], [8.8, 54.0], [8.9, 54.0], [9.0, 55.0], [9.1, 55.0], [9.2, 57.0], [9.3, 58.0], [9.4, 59.0], [9.5, 59.0], [9.6, 60.0], [9.7, 61.0], [9.8, 66.0], [9.9, 66.0], [10.0, 68.0], [10.1, 69.0], [10.2, 70.0], [10.3, 71.0], [10.4, 71.0], [10.5, 72.0], [10.6, 75.0], [10.7, 76.0], [10.8, 76.0], [10.9, 78.0], [11.0, 78.0], [11.1, 79.0], [11.2, 79.0], [11.3, 81.0], [11.4, 81.0], [11.5, 85.0], [11.6, 87.0], [11.7, 88.0], [11.8, 91.0], [11.9, 94.0], [12.0, 99.0], [12.1, 105.0], [12.2, 114.0], [12.3, 116.0], [12.4, 120.0], [12.5, 131.0], [12.6, 131.0], [12.7, 139.0], [12.8, 146.0], [12.9, 151.0], [13.0, 170.0], [13.1, 173.0], [13.2, 177.0], [13.3, 180.0], [13.4, 194.0], [13.5, 203.0], [13.6, 217.0], [13.7, 262.0], [13.8, 272.0], [13.9, 313.0], [14.0, 322.0], [14.1, 332.0], [14.2, 333.0], [14.3, 350.0], [14.4, 363.0], [14.5, 366.0], [14.6, 381.0], [14.7, 381.0], [14.8, 401.0], [14.9, 415.0], [15.0, 433.0], [15.1, 436.0], [15.2, 439.0], [15.3, 488.0], [15.4, 497.0], [15.5, 501.0], [15.6, 501.0], [15.7, 513.0], [15.8, 535.0], [15.9, 542.0], [16.0, 547.0], [16.1, 551.0], [16.2, 551.0], [16.3, 553.0], [16.4, 565.0], [16.5, 566.0], [16.6, 581.0], [16.7, 589.0], [16.8, 602.0], [16.9, 635.0], [17.0, 636.0], [17.1, 637.0], [17.2, 649.0], [17.3, 655.0], [17.4, 669.0], [17.5, 675.0], [17.6, 687.0], [17.7, 705.0], [17.8, 766.0], [17.9, 837.0], [18.0, 870.0], [18.1, 876.0], [18.2, 920.0], [18.3, 982.0], [18.4, 982.0], [18.5, 1020.0], [18.6, 1027.0], [18.7, 1027.0], [18.8, 1086.0], [18.9, 1111.0], [19.0, 1133.0], [19.1, 1221.0], [19.2, 1245.0], [19.3, 1246.0], [19.4, 1346.0], [19.5, 1360.0], [19.6, 1400.0], [19.7, 1460.0], [19.8, 1501.0], [19.9, 1579.0], [20.0, 1596.0], [20.1, 1643.0], [20.2, 1703.0], [20.3, 1728.0], [20.4, 1734.0], [20.5, 1738.0], [20.6, 1788.0], [20.7, 1826.0], [20.8, 1853.0], [20.9, 1947.0], [21.0, 1989.0], [21.1, 2113.0], [21.2, 2168.0], [21.3, 2254.0], [21.4, 2264.0], [21.5, 2278.0], [21.6, 2289.0], [21.7, 2334.0], [21.8, 2452.0], [21.9, 2508.0], [22.0, 2510.0], [22.1, 2545.0], [22.2, 2546.0], [22.3, 2550.0], [22.4, 2551.0], [22.5, 2551.0], [22.6, 2557.0], [22.7, 2557.0], [22.8, 2559.0], [22.9, 2561.0], [23.0, 2564.0], [23.1, 2565.0], [23.2, 2566.0], [23.3, 2567.0], [23.4, 2582.0], [23.5, 2591.0], [23.6, 2615.0], [23.7, 2628.0], [23.8, 2629.0], [23.9, 2634.0], [24.0, 2635.0], [24.1, 2641.0], [24.2, 2648.0], [24.3, 2650.0], [24.4, 2652.0], [24.5, 2652.0], [24.6, 2653.0], [24.7, 2656.0], [24.8, 2661.0], [24.9, 2664.0], [25.0, 2665.0], [25.1, 2669.0], [25.2, 2672.0], [25.3, 2677.0], [25.4, 2681.0], [25.5, 2682.0], [25.6, 2685.0], [25.7, 2686.0], [25.8, 2688.0], [25.9, 2692.0], [26.0, 2695.0], [26.1, 2695.0], [26.2, 2696.0], [26.3, 2697.0], [26.4, 2707.0], [26.5, 2707.0], [26.6, 2710.0], [26.7, 2715.0], [26.8, 2718.0], [26.9, 2719.0], [27.0, 2720.0], [27.1, 2720.0], [27.2, 2723.0], [27.3, 2724.0], [27.4, 2726.0], [27.5, 2730.0], [27.6, 2734.0], [27.7, 2742.0], [27.8, 2743.0], [27.9, 2744.0], [28.0, 2744.0], [28.1, 2746.0], [28.2, 2746.0], [28.3, 2749.0], [28.4, 2750.0], [28.5, 2751.0], [28.6, 2752.0], [28.7, 2754.0], [28.8, 2755.0], [28.9, 2761.0], [29.0, 2761.0], [29.1, 2766.0], [29.2, 2766.0], [29.3, 2767.0], [29.4, 2768.0], [29.5, 2769.0], [29.6, 2772.0], [29.7, 2775.0], [29.8, 2775.0], [29.9, 2775.0], [30.0, 2778.0], [30.1, 2779.0], [30.2, 2783.0], [30.3, 2784.0], [30.4, 2785.0], [30.5, 2787.0], [30.6, 2791.0], [30.7, 2792.0], [30.8, 2793.0], [30.9, 2801.0], [31.0, 2815.0], [31.1, 2818.0], [31.2, 2823.0], [31.3, 2840.0], [31.4, 2910.0], [31.5, 2926.0], [31.6, 2931.0], [31.7, 2934.0], [31.8, 2940.0], [31.9, 2945.0], [32.0, 2947.0], [32.1, 2948.0], [32.2, 2954.0], [32.3, 2959.0], [32.4, 2960.0], [32.5, 2961.0], [32.6, 2962.0], [32.7, 2965.0], [32.8, 2965.0], [32.9, 2965.0], [33.0, 2967.0], [33.1, 2971.0], [33.2, 2971.0], [33.3, 2971.0], [33.4, 2973.0], [33.5, 2974.0], [33.6, 2976.0], [33.7, 2977.0], [33.8, 2978.0], [33.9, 2979.0], [34.0, 2979.0], [34.1, 2981.0], [34.2, 2981.0], [34.3, 2983.0], [34.4, 2985.0], [34.5, 2985.0], [34.6, 2986.0], [34.7, 2986.0], [34.8, 2986.0], [34.9, 2992.0], [35.0, 2992.0], [35.1, 2992.0], [35.2, 2992.0], [35.3, 2994.0], [35.4, 2999.0], [35.5, 3000.0], [35.6, 3001.0], [35.7, 3006.0], [35.8, 3007.0], [35.9, 3007.0], [36.0, 3007.0], [36.1, 3008.0], [36.2, 3008.0], [36.3, 3009.0], [36.4, 3013.0], [36.5, 3015.0], [36.6, 3016.0], [36.7, 3016.0], [36.8, 3017.0], [36.9, 3018.0], [37.0, 3019.0], [37.1, 3019.0], [37.2, 3022.0], [37.3, 3024.0], [37.4, 3024.0], [37.5, 3024.0], [37.6, 3025.0], [37.7, 3026.0], [37.8, 3026.0], [37.9, 3026.0], [38.0, 3028.0], [38.1, 3030.0], [38.2, 3031.0], [38.3, 3032.0], [38.4, 3033.0], [38.5, 3036.0], [38.6, 3037.0], [38.7, 3038.0], [38.8, 3038.0], [38.9, 3039.0], [39.0, 3041.0], [39.1, 3042.0], [39.2, 3047.0], [39.3, 3047.0], [39.4, 3047.0], [39.5, 3050.0], [39.6, 3050.0], [39.7, 3053.0], [39.8, 3054.0], [39.9, 3055.0], [40.0, 3061.0], [40.1, 3064.0], [40.2, 3066.0], [40.3, 3066.0], [40.4, 3068.0], [40.5, 3071.0], [40.6, 3071.0], [40.7, 3075.0], [40.8, 3080.0], [40.9, 3082.0], [41.0, 3086.0], [41.1, 3087.0], [41.2, 3089.0], [41.3, 3094.0], [41.4, 3096.0], [41.5, 3114.0], [41.6, 3125.0], [41.7, 3152.0], [41.8, 3358.0], [41.9, 3363.0], [42.0, 3373.0], [42.1, 3375.0], [42.2, 3380.0], [42.3, 3381.0], [42.4, 3387.0], [42.5, 3390.0], [42.6, 3391.0], [42.7, 3391.0], [42.8, 3393.0], [42.9, 3397.0], [43.0, 3398.0], [43.1, 3401.0], [43.2, 3403.0], [43.3, 3404.0], [43.4, 3423.0], [43.5, 3424.0], [43.6, 3427.0], [43.7, 3430.0], [43.8, 3432.0], [43.9, 3434.0], [44.0, 3438.0], [44.1, 3443.0], [44.2, 3446.0], [44.3, 3455.0], [44.4, 3457.0], [44.5, 3459.0], [44.6, 3460.0], [44.7, 3462.0], [44.8, 3463.0], [44.9, 3463.0], [45.0, 3465.0], [45.1, 3468.0], [45.2, 3470.0], [45.3, 3470.0], [45.4, 3471.0], [45.5, 3471.0], [45.6, 3474.0], [45.7, 3476.0], [45.8, 3477.0], [45.9, 3479.0], [46.0, 3481.0], [46.1, 3482.0], [46.2, 3484.0], [46.3, 3485.0], [46.4, 3485.0], [46.5, 3486.0], [46.6, 3486.0], [46.7, 3488.0], [46.8, 3490.0], [46.9, 3491.0], [47.0, 3495.0], [47.1, 3497.0], [47.2, 3499.0], [47.3, 3501.0], [47.4, 3502.0], [47.5, 3503.0], [47.6, 3504.0], [47.7, 3504.0], [47.8, 3504.0], [47.9, 3507.0], [48.0, 3508.0], [48.1, 3509.0], [48.2, 3509.0], [48.3, 3512.0], [48.4, 3513.0], [48.5, 3517.0], [48.6, 3517.0], [48.7, 3519.0], [48.8, 3520.0], [48.9, 3520.0], [49.0, 3521.0], [49.1, 3522.0], [49.2, 3522.0], [49.3, 3524.0], [49.4, 3525.0], [49.5, 3526.0], [49.6, 3526.0], [49.7, 3527.0], [49.8, 3527.0], [49.9, 3530.0], [50.0, 3533.0], [50.1, 3536.0], [50.2, 3539.0], [50.3, 3540.0], [50.4, 3541.0], [50.5, 3542.0], [50.6, 3543.0], [50.7, 3547.0], [50.8, 3547.0], [50.9, 3553.0], [51.0, 3564.0], [51.1, 3565.0], [51.2, 3568.0], [51.3, 3568.0], [51.4, 3569.0], [51.5, 3575.0], [51.6, 3578.0], [51.7, 3578.0], [51.8, 3582.0], [51.9, 3582.0], [52.0, 3582.0], [52.1, 3584.0], [52.2, 3586.0], [52.3, 3588.0], [52.4, 3589.0], [52.5, 3589.0], [52.6, 3590.0], [52.7, 3593.0], [52.8, 3593.0], [52.9, 3594.0], [53.0, 3594.0], [53.1, 3595.0], [53.2, 3598.0], [53.3, 3600.0], [53.4, 3600.0], [53.5, 3601.0], [53.6, 3603.0], [53.7, 3603.0], [53.8, 3604.0], [53.9, 3605.0], [54.0, 3605.0], [54.1, 3606.0], [54.2, 3606.0], [54.3, 3608.0], [54.4, 3608.0], [54.5, 3608.0], [54.6, 3609.0], [54.7, 3610.0], [54.8, 3612.0], [54.9, 3612.0], [55.0, 3613.0], [55.1, 3614.0], [55.2, 3615.0], [55.3, 3617.0], [55.4, 3617.0], [55.5, 3618.0], [55.6, 3618.0], [55.7, 3619.0], [55.8, 3619.0], [55.9, 3620.0], [56.0, 3620.0], [56.1, 3621.0], [56.2, 3621.0], [56.3, 3622.0], [56.4, 3622.0], [56.5, 3623.0], [56.6, 3623.0], [56.7, 3624.0], [56.8, 3625.0], [56.9, 3626.0], [57.0, 3627.0], [57.1, 3627.0], [57.2, 3627.0], [57.3, 3627.0], [57.4, 3627.0], [57.5, 3627.0], [57.6, 3628.0], [57.7, 3628.0], [57.8, 3628.0], [57.9, 3629.0], [58.0, 3629.0], [58.1, 3630.0], [58.2, 3630.0], [58.3, 3630.0], [58.4, 3631.0], [58.5, 3631.0], [58.6, 3631.0], [58.7, 3631.0], [58.8, 3632.0], [58.9, 3632.0], [59.0, 3632.0], [59.1, 3632.0], [59.2, 3633.0], [59.3, 3633.0], [59.4, 3633.0], [59.5, 3633.0], [59.6, 3633.0], [59.7, 3634.0], [59.8, 3634.0], [59.9, 3634.0], [60.0, 3634.0], [60.1, 3634.0], [60.2, 3634.0], [60.3, 3634.0], [60.4, 3634.0], [60.5, 3634.0], [60.6, 3634.0], [60.7, 3635.0], [60.8, 3635.0], [60.9, 3636.0], [61.0, 3636.0], [61.1, 3636.0], [61.2, 3636.0], [61.3, 3637.0], [61.4, 3637.0], [61.5, 3637.0], [61.6, 3637.0], [61.7, 3637.0], [61.8, 3637.0], [61.9, 3637.0], [62.0, 3638.0], [62.1, 3638.0], [62.2, 3638.0], [62.3, 3639.0], [62.4, 3639.0], [62.5, 3639.0], [62.6, 3639.0], [62.7, 3640.0], [62.8, 3640.0], [62.9, 3640.0], [63.0, 3640.0], [63.1, 3640.0], [63.2, 3641.0], [63.3, 3641.0], [63.4, 3642.0], [63.5, 3642.0], [63.6, 3642.0], [63.7, 3643.0], [63.8, 3643.0], [63.9, 3643.0], [64.0, 3644.0], [64.1, 3644.0], [64.2, 3644.0], [64.3, 3644.0], [64.4, 3645.0], [64.5, 3645.0], [64.6, 3646.0], [64.7, 3646.0], [64.8, 3646.0], [64.9, 3646.0], [65.0, 3647.0], [65.1, 3648.0], [65.2, 3648.0], [65.3, 3648.0], [65.4, 3648.0], [65.5, 3648.0], [65.6, 3648.0], [65.7, 3648.0], [65.8, 3649.0], [65.9, 3649.0], [66.0, 3649.0], [66.1, 3649.0], [66.2, 3650.0], [66.3, 3650.0], [66.4, 3650.0], [66.5, 3650.0], [66.6, 3650.0], [66.7, 3651.0], [66.8, 3651.0], [66.9, 3651.0], [67.0, 3652.0], [67.1, 3652.0], [67.2, 3652.0], [67.3, 3653.0], [67.4, 3653.0], [67.5, 3653.0], [67.6, 3654.0], [67.7, 3654.0], [67.8, 3654.0], [67.9, 3655.0], [68.0, 3655.0], [68.1, 3655.0], [68.2, 3655.0], [68.3, 3656.0], [68.4, 3656.0], [68.5, 3656.0], [68.6, 3656.0], [68.7, 3656.0], [68.8, 3657.0], [68.9, 3657.0], [69.0, 3657.0], [69.1, 3657.0], [69.2, 3657.0], [69.3, 3657.0], [69.4, 3658.0], [69.5, 3658.0], [69.6, 3658.0], [69.7, 3658.0], [69.8, 3658.0], [69.9, 3659.0], [70.0, 3659.0], [70.1, 3659.0], [70.2, 3660.0], [70.3, 3660.0], [70.4, 3660.0], [70.5, 3660.0], [70.6, 3660.0], [70.7, 3661.0], [70.8, 3661.0], [70.9, 3661.0], [71.0, 3661.0], [71.1, 3662.0], [71.2, 3662.0], [71.3, 3662.0], [71.4, 3662.0], [71.5, 3662.0], [71.6, 3662.0], [71.7, 3662.0], [71.8, 3662.0], [71.9, 3662.0], [72.0, 3663.0], [72.1, 3663.0], [72.2, 3663.0], [72.3, 3663.0], [72.4, 3663.0], [72.5, 3663.0], [72.6, 3664.0], [72.7, 3664.0], [72.8, 3664.0], [72.9, 3665.0], [73.0, 3665.0], [73.1, 3665.0], [73.2, 3666.0], [73.3, 3666.0], [73.4, 3666.0], [73.5, 3666.0], [73.6, 3667.0], [73.7, 3667.0], [73.8, 3667.0], [73.9, 3668.0], [74.0, 3668.0], [74.1, 3668.0], [74.2, 3668.0], [74.3, 3669.0], [74.4, 3669.0], [74.5, 3669.0], [74.6, 3669.0], [74.7, 3669.0], [74.8, 3669.0], [74.9, 3669.0], [75.0, 3670.0], [75.1, 3670.0], [75.2, 3670.0], [75.3, 3670.0], [75.4, 3671.0], [75.5, 3671.0], [75.6, 3672.0], [75.7, 3673.0], [75.8, 3673.0], [75.9, 3673.0], [76.0, 3673.0], [76.1, 3673.0], [76.2, 3673.0], [76.3, 3674.0], [76.4, 3674.0], [76.5, 3674.0], [76.6, 3674.0], [76.7, 3675.0], [76.8, 3675.0], [76.9, 3676.0], [77.0, 3676.0], [77.1, 3676.0], [77.2, 3676.0], [77.3, 3676.0], [77.4, 3677.0], [77.5, 3677.0], [77.6, 3677.0], [77.7, 3677.0], [77.8, 3678.0], [77.9, 3678.0], [78.0, 3678.0], [78.1, 3678.0], [78.2, 3679.0], [78.3, 3680.0], [78.4, 3680.0], [78.5, 3680.0], [78.6, 3680.0], [78.7, 3680.0], [78.8, 3681.0], [78.9, 3683.0], [79.0, 3683.0], [79.1, 3684.0], [79.2, 3684.0], [79.3, 3685.0], [79.4, 3685.0], [79.5, 3686.0], [79.6, 3686.0], [79.7, 3686.0], [79.8, 3686.0], [79.9, 3686.0], [80.0, 3687.0], [80.1, 3687.0], [80.2, 3687.0], [80.3, 3687.0], [80.4, 3688.0], [80.5, 3688.0], [80.6, 3688.0], [80.7, 3688.0], [80.8, 3688.0], [80.9, 3689.0], [81.0, 3690.0], [81.1, 3690.0], [81.2, 3690.0], [81.3, 3690.0], [81.4, 3690.0], [81.5, 3691.0], [81.6, 3691.0], [81.7, 3691.0], [81.8, 3692.0], [81.9, 3692.0], [82.0, 3692.0], [82.1, 3692.0], [82.2, 3692.0], [82.3, 3692.0], [82.4, 3692.0], [82.5, 3692.0], [82.6, 3693.0], [82.7, 3693.0], [82.8, 3693.0], [82.9, 3694.0], [83.0, 3694.0], [83.1, 3694.0], [83.2, 3694.0], [83.3, 3695.0], [83.4, 3696.0], [83.5, 3696.0], [83.6, 3697.0], [83.7, 3697.0], [83.8, 3697.0], [83.9, 3697.0], [84.0, 3698.0], [84.1, 3698.0], [84.2, 3698.0], [84.3, 3699.0], [84.4, 3700.0], [84.5, 3700.0], [84.6, 3700.0], [84.7, 3700.0], [84.8, 3701.0], [84.9, 3701.0], [85.0, 3702.0], [85.1, 3702.0], [85.2, 3702.0], [85.3, 3702.0], [85.4, 3702.0], [85.5, 3703.0], [85.6, 3703.0], [85.7, 3704.0], [85.8, 3704.0], [85.9, 3705.0], [86.0, 3705.0], [86.1, 3706.0], [86.2, 3706.0], [86.3, 3706.0], [86.4, 3707.0], [86.5, 3707.0], [86.6, 3707.0], [86.7, 3707.0], [86.8, 3708.0], [86.9, 3708.0], [87.0, 3708.0], [87.1, 3709.0], [87.2, 3709.0], [87.3, 3710.0], [87.4, 3710.0], [87.5, 3711.0], [87.6, 3711.0], [87.7, 3711.0], [87.8, 3711.0], [87.9, 3712.0], [88.0, 3712.0], [88.1, 3712.0], [88.2, 3712.0], [88.3, 3713.0], [88.4, 3713.0], [88.5, 3713.0], [88.6, 3714.0], [88.7, 3714.0], [88.8, 3714.0], [88.9, 3714.0], [89.0, 3718.0], [89.1, 3720.0], [89.2, 3720.0], [89.3, 3721.0], [89.4, 3721.0], [89.5, 3721.0], [89.6, 3722.0], [89.7, 3723.0], [89.8, 3723.0], [89.9, 3723.0], [90.0, 3723.0], [90.1, 3724.0], [90.2, 3724.0], [90.3, 3725.0], [90.4, 3725.0], [90.5, 3725.0], [90.6, 3726.0], [90.7, 3726.0], [90.8, 3727.0], [90.9, 3727.0], [91.0, 3727.0], [91.1, 3728.0], [91.2, 3728.0], [91.3, 3728.0], [91.4, 3728.0], [91.5, 3729.0], [91.6, 3730.0], [91.7, 3731.0], [91.8, 3731.0], [91.9, 3732.0], [92.0, 3733.0], [92.1, 3733.0], [92.2, 3734.0], [92.3, 3734.0], [92.4, 3734.0], [92.5, 3734.0], [92.6, 3734.0], [92.7, 3734.0], [92.8, 3735.0], [92.9, 3736.0], [93.0, 3736.0], [93.1, 3738.0], [93.2, 3739.0], [93.3, 3740.0], [93.4, 3740.0], [93.5, 3740.0], [93.6, 3740.0], [93.7, 3740.0], [93.8, 3741.0], [93.9, 3742.0], [94.0, 3742.0], [94.1, 3743.0], [94.2, 3743.0], [94.3, 3745.0], [94.4, 3745.0], [94.5, 3746.0], [94.6, 3746.0], [94.7, 3748.0], [94.8, 3748.0], [94.9, 3748.0], [95.0, 3749.0], [95.1, 3749.0], [95.2, 3749.0], [95.3, 3750.0], [95.4, 3750.0], [95.5, 3752.0], [95.6, 3756.0], [95.7, 3760.0], [95.8, 3902.0], [95.9, 3980.0], [96.0, 3998.0], [96.1, 4351.0], [96.2, 5031.0], [96.3, 5164.0], [96.4, 5236.0], [96.5, 5249.0], [96.6, 5343.0], [96.7, 5346.0], [96.8, 5504.0], [96.9, 5813.0], [97.0, 5972.0], [97.1, 6039.0], [97.2, 6045.0], [97.3, 6060.0], [97.4, 6071.0], [97.5, 6074.0], [97.6, 6110.0], [97.7, 6232.0], [97.8, 6256.0], [97.9, 6281.0], [98.0, 6309.0], [98.1, 6321.0], [98.2, 6346.0], [98.3, 6362.0], [98.4, 6420.0], [98.5, 6512.0], [98.6, 6524.0], [98.7, 6864.0], [98.8, 6963.0], [98.9, 7105.0], [99.0, 7115.0], [99.1, 7580.0], [99.2, 8054.0], [99.3, 8190.0], [99.4, 8233.0], [99.5, 8241.0], [99.6, 8398.0], [99.7, 8627.0], [99.8, 8711.0], [99.9, 8766.0], [100.0, 9362.0]], "isOverall": false, "label": "/UserService/resetPsw", "isController": false}, {"data": [[0.0, 39.0], [0.1, 72.0], [0.2, 172.0], [0.3, 172.0], [0.4, 446.0], [0.5, 493.0], [0.6, 510.0], [0.7, 523.0], [0.8, 528.0], [0.9, 535.0], [1.0, 536.0], [1.1, 542.0], [1.2, 545.0], [1.3, 550.0], [1.4, 550.0], [1.5, 552.0], [1.6, 556.0], [1.7, 557.0], [1.8, 568.0], [1.9, 575.0], [2.0, 586.0], [2.1, 590.0], [2.2, 595.0], [2.3, 603.0], [2.4, 606.0], [2.5, 608.0], [2.6, 638.0], [2.7, 665.0], [2.8, 680.0], [2.9, 718.0], [3.0, 768.0], [3.1, 771.0], [3.2, 771.0], [3.3, 777.0], [3.4, 787.0], [3.5, 787.0], [3.6, 788.0], [3.7, 845.0], [3.8, 846.0], [3.9, 848.0], [4.0, 855.0], [4.1, 860.0], [4.2, 861.0], [4.3, 863.0], [4.4, 863.0], [4.5, 877.0], [4.6, 881.0], [4.7, 887.0], [4.8, 905.0], [4.9, 906.0], [5.0, 912.0], [5.1, 912.0], [5.2, 917.0], [5.3, 923.0], [5.4, 927.0], [5.5, 928.0], [5.6, 968.0], [5.7, 970.0], [5.8, 985.0], [5.9, 992.0], [6.0, 995.0], [6.1, 1006.0], [6.2, 1012.0], [6.3, 1013.0], [6.4, 1020.0], [6.5, 1020.0], [6.6, 1037.0], [6.7, 1038.0], [6.8, 1039.0], [6.9, 1041.0], [7.0, 1061.0], [7.1, 1064.0], [7.2, 1070.0], [7.3, 1070.0], [7.4, 1079.0], [7.5, 1083.0], [7.6, 1086.0], [7.7, 1088.0], [7.8, 1088.0], [7.9, 1089.0], [8.0, 1093.0], [8.1, 1097.0], [8.2, 1099.0], [8.3, 1099.0], [8.4, 1114.0], [8.5, 1135.0], [8.6, 1137.0], [8.7, 1143.0], [8.8, 1148.0], [8.9, 1148.0], [9.0, 1155.0], [9.1, 1157.0], [9.2, 1161.0], [9.3, 1162.0], [9.4, 1168.0], [9.5, 1170.0], [9.6, 1171.0], [9.7, 1173.0], [9.8, 1176.0], [9.9, 1177.0], [10.0, 1196.0], [10.1, 1199.0], [10.2, 1200.0], [10.3, 1202.0], [10.4, 1207.0], [10.5, 1207.0], [10.6, 1209.0], [10.7, 1223.0], [10.8, 1224.0], [10.9, 1230.0], [11.0, 1232.0], [11.1, 1251.0], [11.2, 1253.0], [11.3, 1257.0], [11.4, 1260.0], [11.5, 1266.0], [11.6, 1266.0], [11.7, 1267.0], [11.8, 1267.0], [11.9, 1284.0], [12.0, 1289.0], [12.1, 1293.0], [12.2, 1296.0], [12.3, 1301.0], [12.4, 1301.0], [12.5, 1302.0], [12.6, 1302.0], [12.7, 1304.0], [12.8, 1306.0], [12.9, 1311.0], [13.0, 1311.0], [13.1, 1312.0], [13.2, 1313.0], [13.3, 1314.0], [13.4, 1324.0], [13.5, 1325.0], [13.6, 1328.0], [13.7, 1332.0], [13.8, 1340.0], [13.9, 1343.0], [14.0, 1347.0], [14.1, 1348.0], [14.2, 1353.0], [14.3, 1360.0], [14.4, 1361.0], [14.5, 1368.0], [14.6, 1369.0], [14.7, 1376.0], [14.8, 1377.0], [14.9, 1379.0], [15.0, 1390.0], [15.1, 1397.0], [15.2, 1406.0], [15.3, 1406.0], [15.4, 1409.0], [15.5, 1409.0], [15.6, 1411.0], [15.7, 1412.0], [15.8, 1420.0], [15.9, 1428.0], [16.0, 1435.0], [16.1, 1436.0], [16.2, 1438.0], [16.3, 1438.0], [16.4, 1442.0], [16.5, 1443.0], [16.6, 1443.0], [16.7, 1452.0], [16.8, 1465.0], [16.9, 1467.0], [17.0, 1467.0], [17.1, 1468.0], [17.2, 1470.0], [17.3, 1474.0], [17.4, 1475.0], [17.5, 1475.0], [17.6, 1475.0], [17.7, 1479.0], [17.8, 1479.0], [17.9, 1483.0], [18.0, 1484.0], [18.1, 1488.0], [18.2, 1488.0], [18.3, 1490.0], [18.4, 1493.0], [18.5, 1503.0], [18.6, 1510.0], [18.7, 1515.0], [18.8, 1521.0], [18.9, 1521.0], [19.0, 1523.0], [19.1, 1524.0], [19.2, 1529.0], [19.3, 1530.0], [19.4, 1535.0], [19.5, 1536.0], [19.6, 1553.0], [19.7, 1555.0], [19.8, 1555.0], [19.9, 1556.0], [20.0, 1556.0], [20.1, 1558.0], [20.2, 1569.0], [20.3, 1575.0], [20.4, 1581.0], [20.5, 1582.0], [20.6, 1585.0], [20.7, 1586.0], [20.8, 1593.0], [20.9, 1593.0], [21.0, 1596.0], [21.1, 1597.0], [21.2, 1598.0], [21.3, 1600.0], [21.4, 1607.0], [21.5, 1614.0], [21.6, 1614.0], [21.7, 1663.0], [21.8, 1671.0], [21.9, 1675.0], [22.0, 1682.0], [22.1, 1682.0], [22.2, 1684.0], [22.3, 1690.0], [22.4, 1734.0], [22.5, 1742.0], [22.6, 1743.0], [22.7, 1768.0], [22.8, 1771.0], [22.9, 1776.0], [23.0, 1785.0], [23.1, 1826.0], [23.2, 1830.0], [23.3, 1839.0], [23.4, 1862.0], [23.5, 1863.0], [23.6, 1868.0], [23.7, 1871.0], [23.8, 1873.0], [23.9, 1887.0], [24.0, 1899.0], [24.1, 1902.0], [24.2, 1907.0], [24.3, 1940.0], [24.4, 1942.0], [24.5, 1942.0], [24.6, 1943.0], [24.7, 1955.0], [24.8, 1956.0], [24.9, 1981.0], [25.0, 1988.0], [25.1, 1993.0], [25.2, 2015.0], [25.3, 2027.0], [25.4, 2029.0], [25.5, 2035.0], [25.6, 2035.0], [25.7, 2036.0], [25.8, 2054.0], [25.9, 2067.0], [26.0, 2068.0], [26.1, 2072.0], [26.2, 2072.0], [26.3, 2072.0], [26.4, 2112.0], [26.5, 2121.0], [26.6, 2122.0], [26.7, 2123.0], [26.8, 2129.0], [26.9, 2129.0], [27.0, 2162.0], [27.1, 2167.0], [27.2, 2259.0], [27.3, 2273.0], [27.4, 2273.0], [27.5, 2277.0], [27.6, 2282.0], [27.7, 2289.0], [27.8, 2290.0], [27.9, 2292.0], [28.0, 2310.0], [28.1, 2312.0], [28.2, 2316.0], [28.3, 2320.0], [28.4, 2321.0], [28.5, 2323.0], [28.6, 2324.0], [28.7, 2334.0], [28.8, 2341.0], [28.9, 2352.0], [29.0, 2367.0], [29.1, 2367.0], [29.2, 2372.0], [29.3, 2375.0], [29.4, 2383.0], [29.5, 2383.0], [29.6, 2385.0], [29.7, 2391.0], [29.8, 2399.0], [29.9, 2419.0], [30.0, 2420.0], [30.1, 2427.0], [30.2, 2428.0], [30.3, 2430.0], [30.4, 2434.0], [30.5, 2442.0], [30.6, 2445.0], [30.7, 2452.0], [30.8, 2485.0], [30.9, 2505.0], [31.0, 2505.0], [31.1, 2528.0], [31.2, 2529.0], [31.3, 2535.0], [31.4, 2536.0], [31.5, 2547.0], [31.6, 2548.0], [31.7, 2549.0], [31.8, 2559.0], [31.9, 2560.0], [32.0, 2569.0], [32.1, 2587.0], [32.2, 2616.0], [32.3, 2618.0], [32.4, 2621.0], [32.5, 2627.0], [32.6, 2628.0], [32.7, 2628.0], [32.8, 2629.0], [32.9, 2639.0], [33.0, 2647.0], [33.1, 2651.0], [33.2, 2659.0], [33.3, 2666.0], [33.4, 2669.0], [33.5, 2682.0], [33.6, 2683.0], [33.7, 2685.0], [33.8, 2687.0], [33.9, 2690.0], [34.0, 2690.0], [34.1, 2699.0], [34.2, 2702.0], [34.3, 2717.0], [34.4, 2719.0], [34.5, 2721.0], [34.6, 2721.0], [34.7, 2723.0], [34.8, 2725.0], [34.9, 2726.0], [35.0, 2728.0], [35.1, 2730.0], [35.2, 2738.0], [35.3, 2740.0], [35.4, 2745.0], [35.5, 2747.0], [35.6, 2748.0], [35.7, 2750.0], [35.8, 2752.0], [35.9, 2761.0], [36.0, 2766.0], [36.1, 2769.0], [36.2, 2772.0], [36.3, 2780.0], [36.4, 2780.0], [36.5, 2784.0], [36.6, 2784.0], [36.7, 2791.0], [36.8, 2791.0], [36.9, 2798.0], [37.0, 2806.0], [37.1, 2814.0], [37.2, 2816.0], [37.3, 2819.0], [37.4, 2820.0], [37.5, 2825.0], [37.6, 2829.0], [37.7, 2833.0], [37.8, 2835.0], [37.9, 2838.0], [38.0, 2840.0], [38.1, 2841.0], [38.2, 2842.0], [38.3, 2842.0], [38.4, 2849.0], [38.5, 2852.0], [38.6, 2854.0], [38.7, 2857.0], [38.8, 2857.0], [38.9, 2860.0], [39.0, 2860.0], [39.1, 2873.0], [39.2, 2877.0], [39.3, 2880.0], [39.4, 2881.0], [39.5, 2882.0], [39.6, 2885.0], [39.7, 2889.0], [39.8, 2891.0], [39.9, 2894.0], [40.0, 2897.0], [40.1, 2899.0], [40.2, 2900.0], [40.3, 2904.0], [40.4, 2904.0], [40.5, 2904.0], [40.6, 2906.0], [40.7, 2909.0], [40.8, 2928.0], [40.9, 2929.0], [41.0, 2932.0], [41.1, 2937.0], [41.2, 2937.0], [41.3, 2943.0], [41.4, 2950.0], [41.5, 2953.0], [41.6, 2954.0], [41.7, 2957.0], [41.8, 2965.0], [41.9, 2973.0], [42.0, 2993.0], [42.1, 2998.0], [42.2, 3007.0], [42.3, 3012.0], [42.4, 3013.0], [42.5, 3034.0], [42.6, 3039.0], [42.7, 3040.0], [42.8, 3041.0], [42.9, 3043.0], [43.0, 3046.0], [43.1, 3047.0], [43.2, 3057.0], [43.3, 3058.0], [43.4, 3075.0], [43.5, 3079.0], [43.6, 3087.0], [43.7, 3089.0], [43.8, 3093.0], [43.9, 3096.0], [44.0, 3099.0], [44.1, 3101.0], [44.2, 3102.0], [44.3, 3103.0], [44.4, 3104.0], [44.5, 3105.0], [44.6, 3106.0], [44.7, 3109.0], [44.8, 3121.0], [44.9, 3122.0], [45.0, 3123.0], [45.1, 3127.0], [45.2, 3133.0], [45.3, 3133.0], [45.4, 3134.0], [45.5, 3141.0], [45.6, 3142.0], [45.7, 3142.0], [45.8, 3150.0], [45.9, 3152.0], [46.0, 3152.0], [46.1, 3153.0], [46.2, 3159.0], [46.3, 3169.0], [46.4, 3173.0], [46.5, 3185.0], [46.6, 3187.0], [46.7, 3202.0], [46.8, 3204.0], [46.9, 3205.0], [47.0, 3206.0], [47.1, 3211.0], [47.2, 3213.0], [47.3, 3214.0], [47.4, 3219.0], [47.5, 3220.0], [47.6, 3232.0], [47.7, 3234.0], [47.8, 3236.0], [47.9, 3242.0], [48.0, 3242.0], [48.1, 3253.0], [48.2, 3270.0], [48.3, 3273.0], [48.4, 3274.0], [48.5, 3276.0], [48.6, 3286.0], [48.7, 3286.0], [48.8, 3287.0], [48.9, 3293.0], [49.0, 3301.0], [49.1, 3306.0], [49.2, 3316.0], [49.3, 3319.0], [49.4, 3320.0], [49.5, 3322.0], [49.6, 3330.0], [49.7, 3334.0], [49.8, 3340.0], [49.9, 3343.0], [50.0, 3343.0], [50.1, 3347.0], [50.2, 3351.0], [50.3, 3352.0], [50.4, 3353.0], [50.5, 3360.0], [50.6, 3360.0], [50.7, 3360.0], [50.8, 3367.0], [50.9, 3373.0], [51.0, 3373.0], [51.1, 3374.0], [51.2, 3379.0], [51.3, 3380.0], [51.4, 3383.0], [51.5, 3394.0], [51.6, 3395.0], [51.7, 3399.0], [51.8, 3406.0], [51.9, 3418.0], [52.0, 3433.0], [52.1, 3434.0], [52.2, 3437.0], [52.3, 3441.0], [52.4, 3442.0], [52.5, 3497.0], [52.6, 3516.0], [52.7, 3522.0], [52.8, 3540.0], [52.9, 3542.0], [53.0, 3549.0], [53.1, 3552.0], [53.2, 3556.0], [53.3, 3557.0], [53.4, 3562.0], [53.5, 3565.0], [53.6, 3566.0], [53.7, 3568.0], [53.8, 3572.0], [53.9, 3583.0], [54.0, 3584.0], [54.1, 3589.0], [54.2, 3590.0], [54.3, 3593.0], [54.4, 3595.0], [54.5, 3595.0], [54.6, 3599.0], [54.7, 3601.0], [54.8, 3602.0], [54.9, 3602.0], [55.0, 3602.0], [55.1, 3605.0], [55.2, 3620.0], [55.3, 3622.0], [55.4, 3623.0], [55.5, 3627.0], [55.6, 3628.0], [55.7, 3629.0], [55.8, 3631.0], [55.9, 3631.0], [56.0, 3643.0], [56.1, 3644.0], [56.2, 3651.0], [56.3, 3651.0], [56.4, 3652.0], [56.5, 3652.0], [56.6, 3653.0], [56.7, 3654.0], [56.8, 3655.0], [56.9, 3656.0], [57.0, 3656.0], [57.1, 3656.0], [57.2, 3659.0], [57.3, 3660.0], [57.4, 3664.0], [57.5, 3667.0], [57.6, 3672.0], [57.7, 3674.0], [57.8, 3676.0], [57.9, 3676.0], [58.0, 3677.0], [58.1, 3680.0], [58.2, 3685.0], [58.3, 3690.0], [58.4, 3699.0], [58.5, 3707.0], [58.6, 3716.0], [58.7, 3718.0], [58.8, 3720.0], [58.9, 3722.0], [59.0, 3723.0], [59.1, 3725.0], [59.2, 3727.0], [59.3, 3730.0], [59.4, 3732.0], [59.5, 3736.0], [59.6, 3736.0], [59.7, 3736.0], [59.8, 3736.0], [59.9, 3737.0], [60.0, 3738.0], [60.1, 3743.0], [60.2, 3744.0], [60.3, 3746.0], [60.4, 3751.0], [60.5, 3751.0], [60.6, 3752.0], [60.7, 3755.0], [60.8, 3756.0], [60.9, 3757.0], [61.0, 3759.0], [61.1, 3763.0], [61.2, 3765.0], [61.3, 3780.0], [61.4, 3782.0], [61.5, 3796.0], [61.6, 3799.0], [61.7, 3801.0], [61.8, 3801.0], [61.9, 3801.0], [62.0, 3806.0], [62.1, 3807.0], [62.2, 3810.0], [62.3, 3810.0], [62.4, 3813.0], [62.5, 3821.0], [62.6, 3827.0], [62.7, 3831.0], [62.8, 3840.0], [62.9, 3847.0], [63.0, 3848.0], [63.1, 3855.0], [63.2, 3859.0], [63.3, 3867.0], [63.4, 3867.0], [63.5, 3867.0], [63.6, 3884.0], [63.7, 3888.0], [63.8, 3897.0], [63.9, 3904.0], [64.0, 3910.0], [64.1, 3921.0], [64.2, 3922.0], [64.3, 3923.0], [64.4, 3924.0], [64.5, 3928.0], [64.6, 3929.0], [64.7, 3930.0], [64.8, 3932.0], [64.9, 3949.0], [65.0, 3949.0], [65.1, 3950.0], [65.2, 3951.0], [65.3, 3966.0], [65.4, 3968.0], [65.5, 3969.0], [65.6, 3971.0], [65.7, 3973.0], [65.8, 3977.0], [65.9, 3979.0], [66.0, 3980.0], [66.1, 3985.0], [66.2, 3999.0], [66.3, 3999.0], [66.4, 4000.0], [66.5, 4005.0], [66.6, 4012.0], [66.7, 4015.0], [66.8, 4016.0], [66.9, 4021.0], [67.0, 4023.0], [67.1, 4028.0], [67.2, 4029.0], [67.3, 4034.0], [67.4, 4036.0], [67.5, 4042.0], [67.6, 4042.0], [67.7, 4051.0], [67.8, 4055.0], [67.9, 4058.0], [68.0, 4072.0], [68.1, 4082.0], [68.2, 4085.0], [68.3, 4099.0], [68.4, 4102.0], [68.5, 4106.0], [68.6, 4108.0], [68.7, 4110.0], [68.8, 4113.0], [68.9, 4116.0], [69.0, 4121.0], [69.1, 4124.0], [69.2, 4136.0], [69.3, 4142.0], [69.4, 4149.0], [69.5, 4150.0], [69.6, 4162.0], [69.7, 4163.0], [69.8, 4175.0], [69.9, 4177.0], [70.0, 4181.0], [70.1, 4183.0], [70.2, 4184.0], [70.3, 4185.0], [70.4, 4187.0], [70.5, 4214.0], [70.6, 4307.0], [70.7, 4317.0], [70.8, 4329.0], [70.9, 4336.0], [71.0, 4345.0], [71.1, 4359.0], [71.2, 4371.0], [71.3, 4410.0], [71.4, 4415.0], [71.5, 4419.0], [71.6, 4439.0], [71.7, 4440.0], [71.8, 4456.0], [71.9, 4574.0], [72.0, 4654.0], [72.1, 4974.0], [72.2, 4984.0], [72.3, 5009.0], [72.4, 5013.0], [72.5, 5022.0], [72.6, 5038.0], [72.7, 5073.0], [72.8, 5086.0], [72.9, 5099.0], [73.0, 5116.0], [73.1, 5118.0], [73.2, 5119.0], [73.3, 5129.0], [73.4, 5133.0], [73.5, 5137.0], [73.6, 5157.0], [73.7, 5160.0], [73.8, 5167.0], [73.9, 5189.0], [74.0, 5192.0], [74.1, 5204.0], [74.2, 5212.0], [74.3, 5213.0], [74.4, 5228.0], [74.5, 5235.0], [74.6, 5239.0], [74.7, 5243.0], [74.8, 5255.0], [74.9, 5255.0], [75.0, 5256.0], [75.1, 5278.0], [75.2, 5281.0], [75.3, 5282.0], [75.4, 5285.0], [75.5, 5292.0], [75.6, 5299.0], [75.7, 5311.0], [75.8, 5316.0], [75.9, 5316.0], [76.0, 5317.0], [76.1, 5320.0], [76.2, 5321.0], [76.3, 5328.0], [76.4, 5329.0], [76.5, 5357.0], [76.6, 5357.0], [76.7, 5365.0], [76.8, 5366.0], [76.9, 5367.0], [77.0, 5388.0], [77.1, 5404.0], [77.2, 5412.0], [77.3, 5414.0], [77.4, 5416.0], [77.5, 5424.0], [77.6, 5433.0], [77.7, 5435.0], [77.8, 5464.0], [77.9, 5479.0], [78.0, 5483.0], [78.1, 5493.0], [78.2, 5495.0], [78.3, 5506.0], [78.4, 5508.0], [78.5, 5515.0], [78.6, 5532.0], [78.7, 5539.0], [78.8, 5540.0], [78.9, 5542.0], [79.0, 5550.0], [79.1, 5553.0], [79.2, 5558.0], [79.3, 5561.0], [79.4, 5563.0], [79.5, 5573.0], [79.6, 5576.0], [79.7, 5589.0], [79.8, 5600.0], [79.9, 5603.0], [80.0, 5615.0], [80.1, 5620.0], [80.2, 5622.0], [80.3, 5629.0], [80.4, 5629.0], [80.5, 5631.0], [80.6, 5633.0], [80.7, 5635.0], [80.8, 5640.0], [80.9, 5646.0], [81.0, 5661.0], [81.1, 5674.0], [81.2, 5678.0], [81.3, 5690.0], [81.4, 5695.0], [81.5, 5696.0], [81.6, 5723.0], [81.7, 5752.0], [81.8, 5772.0], [81.9, 5780.0], [82.0, 5783.0], [82.1, 5793.0], [82.2, 5797.0], [82.3, 5800.0], [82.4, 5812.0], [82.5, 5834.0], [82.6, 5861.0], [82.7, 5878.0], [82.8, 5885.0], [82.9, 5950.0], [83.0, 6007.0], [83.1, 6013.0], [83.2, 6218.0], [83.3, 6270.0], [83.4, 6309.0], [83.5, 6393.0], [83.6, 6562.0], [83.7, 6589.0], [83.8, 6809.0], [83.9, 6814.0], [84.0, 6814.0], [84.1, 7003.0], [84.2, 7101.0], [84.3, 7197.0], [84.4, 7419.0], [84.5, 7441.0], [84.6, 7466.0], [84.7, 7542.0], [84.8, 7681.0], [84.9, 7695.0], [85.0, 7730.0], [85.1, 7735.0], [85.2, 7740.0], [85.3, 7917.0], [85.4, 7919.0], [85.5, 7921.0], [85.6, 7926.0], [85.7, 7927.0], [85.8, 7932.0], [85.9, 7933.0], [86.0, 7934.0], [86.1, 7938.0], [86.2, 7942.0], [86.3, 7945.0], [86.4, 7948.0], [86.5, 7957.0], [86.6, 7957.0], [86.7, 7957.0], [86.8, 7969.0], [86.9, 7969.0], [87.0, 7970.0], [87.1, 7976.0], [87.2, 7985.0], [87.3, 7989.0], [87.4, 8029.0], [87.5, 8055.0], [87.6, 8056.0], [87.7, 8057.0], [87.8, 8079.0], [87.9, 8081.0], [88.0, 8136.0], [88.1, 8139.0], [88.2, 8151.0], [88.3, 8154.0], [88.4, 8161.0], [88.5, 8177.0], [88.6, 8212.0], [88.7, 8218.0], [88.8, 8321.0], [88.9, 8391.0], [89.0, 8407.0], [89.1, 8413.0], [89.2, 8415.0], [89.3, 8420.0], [89.4, 8426.0], [89.5, 8433.0], [89.6, 8444.0], [89.7, 8474.0], [89.8, 8477.0], [89.9, 8546.0], [90.0, 8640.0], [90.1, 8644.0], [90.2, 8648.0], [90.3, 8650.0], [90.4, 8660.0], [90.5, 8666.0], [90.6, 8674.0], [90.7, 8692.0], [90.8, 8708.0], [90.9, 8723.0], [91.0, 8730.0], [91.1, 8733.0], [91.2, 8747.0], [91.3, 8749.0], [91.4, 8749.0], [91.5, 8769.0], [91.6, 8779.0], [91.7, 8797.0], [91.8, 8798.0], [91.9, 8804.0], [92.0, 8806.0], [92.1, 8807.0], [92.2, 8807.0], [92.3, 8840.0], [92.4, 8858.0], [92.5, 8892.0], [92.6, 8899.0], [92.7, 8911.0], [92.8, 8915.0], [92.9, 8928.0], [93.0, 8965.0], [93.1, 8972.0], [93.2, 8973.0], [93.3, 8987.0], [93.4, 8995.0], [93.5, 9000.0], [93.6, 9001.0], [93.7, 9001.0], [93.8, 9004.0], [93.9, 9004.0], [94.0, 9005.0], [94.1, 9006.0], [94.2, 9008.0], [94.3, 9011.0], [94.4, 9013.0], [94.5, 9024.0], [94.6, 9025.0], [94.7, 9026.0], [94.8, 9029.0], [94.9, 9036.0], [95.0, 9039.0], [95.1, 9046.0], [95.2, 9047.0], [95.3, 9052.0], [95.4, 9057.0], [95.5, 9058.0], [95.6, 9060.0], [95.7, 9062.0], [95.8, 9066.0], [95.9, 9068.0], [96.0, 9072.0], [96.1, 9078.0], [96.2, 9088.0], [96.3, 9119.0], [96.4, 9224.0], [96.5, 9232.0], [96.6, 9309.0], [96.7, 9326.0], [96.8, 9347.0], [96.9, 9378.0], [97.0, 9384.0], [97.1, 9413.0], [97.2, 9419.0], [97.3, 9420.0], [97.4, 9425.0], [97.5, 9427.0], [97.6, 9429.0], [97.7, 9431.0], [97.8, 9431.0], [97.9, 9438.0], [98.0, 9446.0], [98.1, 9464.0], [98.2, 9482.0], [98.3, 9482.0], [98.4, 9499.0], [98.5, 9517.0], [98.6, 9537.0], [98.7, 9539.0], [98.8, 9541.0], [98.9, 9541.0], [99.0, 9556.0], [99.1, 9557.0], [99.2, 9567.0], [99.3, 9679.0], [99.4, 9726.0], [99.5, 9801.0], [99.6, 9868.0], [99.7, 10019.0], [99.8, 10109.0], [99.9, 10137.0]], "isOverall": false, "label": "/UserService/freezeA", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 311.0, "series": [{"data": [[0.0, 121.0], [600.0, 9.0], [700.0, 2.0], [800.0, 3.0], [900.0, 3.0], [1000.0, 3.0], [1100.0, 2.0], [1200.0, 3.0], [1300.0, 2.0], [1400.0, 2.0], [1500.0, 3.0], [1600.0, 1.0], [1700.0, 5.0], [1800.0, 2.0], [1900.0, 2.0], [2100.0, 2.0], [2200.0, 4.0], [2300.0, 1.0], [2400.0, 1.0], [2500.0, 17.0], [2600.0, 28.0], [2800.0, 5.0], [2700.0, 45.0], [2900.0, 41.0], [3000.0, 60.0], [3100.0, 3.0], [3300.0, 13.0], [3400.0, 42.0], [3500.0, 60.0], [3600.0, 311.0], [3700.0, 114.0], [3900.0, 3.0], [4300.0, 1.0], [5100.0, 1.0], [5000.0, 1.0], [5200.0, 2.0], [5300.0, 2.0], [5500.0, 1.0], [5800.0, 1.0], [6100.0, 1.0], [6000.0, 5.0], [5900.0, 1.0], [6200.0, 3.0], [6300.0, 4.0], [6400.0, 1.0], [6500.0, 2.0], [6800.0, 1.0], [6900.0, 1.0], [7100.0, 2.0], [7500.0, 1.0], [8000.0, 1.0], [8100.0, 1.0], [8200.0, 2.0], [8700.0, 2.0], [8300.0, 1.0], [8600.0, 1.0], [9300.0, 1.0], [100.0, 14.0], [200.0, 4.0], [300.0, 9.0], [400.0, 7.0], [500.0, 13.0]], "isOverall": false, "label": "/UserService/resetPsw", "isController": false}, {"data": [[0.0, 2.0], [600.0, 6.0], [700.0, 8.0], [800.0, 12.0], [900.0, 13.0], [1000.0, 23.0], [1100.0, 18.0], [1200.0, 21.0], [1300.0, 29.0], [1400.0, 33.0], [1500.0, 27.0], [1600.0, 11.0], [1700.0, 7.0], [1800.0, 10.0], [1900.0, 11.0], [2000.0, 12.0], [2100.0, 8.0], [2200.0, 8.0], [2300.0, 19.0], [2400.0, 10.0], [2500.0, 13.0], [2600.0, 20.0], [2700.0, 28.0], [2800.0, 32.0], [2900.0, 20.0], [3000.0, 19.0], [3100.0, 26.0], [3200.0, 23.0], [3300.0, 28.0], [3400.0, 8.0], [3500.0, 21.0], [3600.0, 38.0], [3700.0, 32.0], [3800.0, 22.0], [3900.0, 25.0], [4000.0, 20.0], [4100.0, 21.0], [4200.0, 1.0], [4300.0, 7.0], [4400.0, 6.0], [4500.0, 1.0], [4600.0, 1.0], [4900.0, 2.0], [5000.0, 7.0], [5100.0, 12.0], [5200.0, 16.0], [5300.0, 14.0], [5400.0, 12.0], [5500.0, 15.0], [5600.0, 18.0], [5700.0, 7.0], [5800.0, 6.0], [5900.0, 1.0], [6000.0, 2.0], [6200.0, 2.0], [6300.0, 2.0], [6500.0, 2.0], [6800.0, 3.0], [7000.0, 1.0], [7100.0, 2.0], [7400.0, 3.0], [7500.0, 1.0], [7600.0, 2.0], [7700.0, 3.0], [7900.0, 21.0], [8100.0, 6.0], [8000.0, 6.0], [8700.0, 11.0], [8200.0, 2.0], [8400.0, 9.0], [8300.0, 2.0], [8600.0, 8.0], [8500.0, 1.0], [9000.0, 28.0], [8900.0, 8.0], [8800.0, 8.0], [9100.0, 1.0], [9200.0, 2.0], [9500.0, 8.0], [9400.0, 14.0], [9300.0, 5.0], [9700.0, 1.0], [9600.0, 1.0], [9800.0, 2.0], [10100.0, 2.0], [10000.0, 1.0], [100.0, 1.0], [300.0, 1.0], [400.0, 2.0], [500.0, 16.0]], "isOverall": false, "label": "/UserService/freezeA", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 161.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1618.0, "series": [{"data": [[0.0, 161.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 221.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1618.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 66.53125, "minX": 1.629778492E12, "maxY": 984.2456140350876, "series": [{"data": [[1.629778494E12, 973.9433198380564], [1.629778496E12, 929.4199475065618], [1.629778492E12, 984.2456140350876], [1.629778502E12, 66.53125], [1.6297785E12, 244.89655172413788], [1.629778498E12, 648.3166332665334]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629778502E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.0, "maxY": 9875.666666666666, "series": [{"data": [[4.0, 139.33333333333334], [6.0, 86.0], [7.0, 26.0], [8.0, 81.0], [11.0, 81.66666666666667], [12.0, 91.0], [13.0, 1501.0], [14.0, 766.0], [16.0, 365.0], [18.0, 178.5], [19.0, 116.0], [20.0, 6963.0], [21.0, 6256.0], [22.0, 10.0], [23.0, 8.0], [25.0, 733.0], [26.0, 350.0], [27.0, 332.0], [28.0, 837.0], [29.0, 381.0], [31.0, 4043.5], [32.0, 6524.0], [35.0, 5031.0], [34.0, 3279.5], [37.0, 30.0], [36.0, 433.0], [39.0, 436.0], [38.0, 27.0], [41.0, 439.0], [40.0, 581.0], [43.0, 6864.0], [42.0, 5972.0], [45.0, 266.0], [47.0, 3404.0], [46.0, 1738.0], [49.0, 551.0], [48.0, 10.0], [51.0, 566.0], [50.0, 60.0], [53.0, 551.0], [52.0, 9362.0], [55.0, 4351.0], [54.0, 553.0], [57.0, 26.5], [59.0, 23.0], [58.0, 565.0], [61.0, 602.0], [60.0, 131.0], [63.0, 705.0], [62.0, 8711.0], [67.0, 669.0], [66.0, 635.0], [65.0, 87.0], [64.0, 637.0], [71.0, 920.0], [70.0, 57.0], [69.0, 18.0], [68.0, 547.0], [75.0, 649.0], [74.0, 369.0], [72.0, 59.0], [79.0, 870.0], [78.0, 53.0], [77.0, 32.0], [76.0, 25.0], [83.0, 6321.0], [82.0, 39.0], [81.0, 22.0], [80.0, 876.0], [87.0, 18.0], [86.0, 5236.0], [85.0, 28.0], [84.0, 29.0], [91.0, 58.0], [90.0, 1086.0], [89.0, 70.0], [88.0, 6309.0], [95.0, 8627.0], [94.0, 34.0], [93.0, 1111.0], [92.0, 55.0], [99.0, 1346.0], [98.0, 38.0], [97.0, 6420.0], [96.0, 26.0], [103.0, 7115.0], [102.0, 1126.5], [100.0, 2113.0], [107.0, 66.0], [106.0, 72.0], [105.0, 76.0], [104.0, 81.0], [111.0, 37.0], [110.0, 5504.0], [109.0, 59.0], [108.0, 61.0], [115.0, 28.0], [114.0, 31.0], [112.0, 32.0], [119.0, 13.0], [118.0, 8398.0], [117.0, 3026.0], [116.0, 19.0], [123.0, 38.0], [122.0, 50.0], [121.0, 8190.0], [120.0, 12.0], [127.0, 42.0], [126.0, 38.0], [125.0, 36.5], [134.0, 8233.0], [133.0, 151.0], [132.0, 8766.0], [131.0, 11.0], [130.0, 13.0], [129.0, 35.0], [128.0, 6346.0], [143.0, 42.0], [142.0, 71.0], [141.0, 69.0], [140.0, 146.0], [139.0, 2085.5], [137.0, 194.0], [136.0, 7301.5], [151.0, 3980.0], [150.0, 24.0], [149.0, 363.0], [148.0, 6281.0], [147.0, 34.0], [146.0, 3138.0], [144.0, 44.0], [159.0, 15.0], [158.0, 21.0], [157.0, 35.0], [156.0, 5343.0], [155.0, 262.0], [154.0, 272.0], [153.0, 3902.0], [152.0, 8054.0], [167.0, 71.0], [166.0, 3687.0], [165.0, 53.0], [164.0, 75.0], [163.0, 120.0], [162.0, 131.0], [161.0, 5346.0], [160.0, 6060.0], [175.0, 33.0], [174.0, 15.0], [173.0, 17.0], [172.0, 34.0], [171.0, 54.0], [170.0, 5249.0], [169.0, 66.0], [168.0, 6039.0], [183.0, 3038.0], [181.0, 11.0], [179.0, 7580.0], [178.0, 28.0], [177.0, 12.0], [176.0, 35.0], [191.0, 14.0], [190.0, 16.0], [189.0, 18.0], [188.0, 18.0], [187.0, 14.0], [186.0, 19.0], [185.0, 23.0], [184.0, 25.0], [199.0, 655.0], [198.0, 636.0], [197.0, 497.0], [196.0, 313.0], [195.0, 366.0], [194.0, 322.0], [193.0, 675.0], [192.0, 11.0], [207.0, 1221.0], [206.0, 1020.0], [205.0, 1243.5], [203.0, 589.0], [202.0, 1579.0], [201.0, 1302.5], [215.0, 2567.0], [214.0, 1826.0], [213.0, 1853.0], [212.0, 2510.0], [211.0, 2546.0], [210.0, 1788.0], [209.0, 1246.0], [208.0, 1400.0], [223.0, 2545.0], [222.0, 2586.5], [220.0, 2508.0], [219.0, 2248.5], [217.0, 1989.0], [216.0, 1643.0], [231.0, 2566.0], [230.0, 2564.0], [229.0, 2551.0], [228.0, 2561.0], [227.0, 2551.0], [226.0, 2557.0], [225.0, 2558.0], [239.0, 2629.0], [238.0, 2615.0], [237.0, 2648.0], [236.0, 2686.0], [235.0, 2672.0], [234.0, 2656.0], [233.0, 2634.0], [232.0, 2565.0], [247.0, 2681.0], [246.0, 2665.0], [245.0, 2653.0], [244.0, 2656.5], [242.0, 2628.0], [241.0, 2682.0], [240.0, 2641.0], [255.0, 2677.0], [254.0, 2650.0], [253.0, 2652.0], [252.0, 2669.0], [251.0, 2692.0], [250.0, 2719.0], [249.0, 2723.0], [248.0, 2707.0], [269.0, 2746.0], [271.0, 2723.0], [268.0, 2718.0], [259.0, 2710.0], [258.0, 2664.0], [257.0, 2635.0], [256.0, 2685.0], [267.0, 2697.0], [266.0, 2696.0], [265.0, 2720.0], [264.0, 2707.0], [263.0, 2695.0], [262.0, 2688.0], [261.0, 2695.0], [260.0, 2715.0], [286.0, 2784.0], [287.0, 2791.0], [284.0, 2818.0], [273.0, 2724.0], [272.0, 2768.0], [283.0, 2799.0], [281.0, 2792.0], [280.0, 2761.0], [278.0, 2746.0], [277.0, 2744.0], [276.0, 2740.0], [300.0, 2775.0], [302.0, 2840.0], [303.0, 2784.0], [301.0, 2766.0], [299.0, 2757.6666666666665], [296.0, 2749.0], [295.0, 5813.0], [288.0, 2775.0], [291.0, 2748.0], [289.0, 2769.0], [294.0, 2744.0], [293.0, 2742.0], [292.0, 2787.0], [318.0, 3391.0], [319.0, 3358.0], [317.0, 3397.0], [316.0, 3403.0], [315.0, 3375.0], [314.0, 3363.0], [313.0, 3373.0], [312.0, 5164.0], [311.0, 2801.0], [304.0, 2766.0], [307.0, 2793.0], [306.0, 2793.5], [310.0, 2778.0], [309.0, 2761.0], [308.0, 2761.0], [334.0, 3457.0], [335.0, 3463.0], [333.0, 3393.0], [332.0, 3446.0], [331.0, 3390.0], [330.0, 3387.0], [329.0, 3381.0], [328.0, 3380.0], [327.0, 3424.0], [321.0, 3423.0], [320.0, 3391.0], [323.0, 3470.0], [322.0, 3430.0], [326.0, 3398.0], [325.0, 3401.0], [324.0, 3465.0], [350.0, 3484.0], [351.0, 3470.0], [349.0, 3526.0], [348.0, 3517.0], [347.0, 3503.0], [346.0, 3455.0], [345.0, 3471.0], [344.0, 3471.0], [343.0, 3459.0], [337.0, 3488.0], [336.0, 3468.0], [339.0, 3432.0], [338.0, 3427.0], [342.0, 3438.0], [341.0, 3434.0], [340.0, 3443.0], [366.0, 3485.0], [367.0, 3526.0], [365.0, 3504.0], [364.0, 3485.0], [363.0, 3504.0], [362.0, 3575.0], [361.0, 3495.0], [360.0, 3504.0], [359.0, 3482.0], [353.0, 3463.0], [352.0, 3460.0], [355.0, 3462.0], [354.0, 3491.0], [358.0, 3490.0], [357.0, 3477.0], [356.0, 3476.0], [382.0, 3643.0], [383.0, 3565.0], [381.0, 3541.0], [380.0, 3608.0], [379.0, 3578.0], [378.0, 3633.0], [377.0, 3564.0], [376.0, 3650.0], [375.0, 3668.0], [369.0, 3481.0], [368.0, 3512.0], [371.0, 3522.0], [370.0, 3527.0], [374.0, 3588.0], [373.0, 3569.0], [372.0, 3513.0], [387.0, 3630.0], [398.0, 3532.0], [399.0, 3502.0], [396.0, 3511.0], [386.0, 3594.0], [385.0, 3589.0], [384.0, 3595.0], [395.0, 3520.0], [392.0, 3486.0], [391.0, 3479.0], [390.0, 3486.0], [389.0, 3474.0], [388.0, 3509.0], [414.0, 3584.0], [415.0, 3547.0], [413.0, 3530.0], [412.0, 3524.0], [411.0, 3521.0], [410.0, 3509.0], [408.0, 3508.0], [407.0, 3519.0], [401.0, 3503.0], [403.0, 3536.0], [402.0, 3527.0], [406.0, 3517.0], [405.0, 3568.0], [404.0, 3520.0], [429.0, 3568.0], [430.0, 3603.0], [428.0, 3608.0], [419.0, 3547.0], [418.0, 3557.3333333333335], [427.0, 3582.0], [426.0, 3582.0], [425.0, 3578.0], [424.0, 3609.0], [423.0, 3582.0], [422.0, 3558.3333333333335], [446.0, 3650.0], [447.0, 3637.0], [445.0, 3663.5], [434.0, 3634.0], [433.0, 3598.0], [432.0, 3601.5], [443.0, 3618.0], [442.0, 3618.0], [441.0, 3627.0], [440.0, 3605.0], [439.0, 3621.5], [437.0, 3593.0], [436.0, 3619.5], [463.0, 3648.0], [462.0, 3653.6666666666665], [451.0, 3627.0], [450.0, 3601.0], [449.0, 3658.0], [448.0, 3606.0], [459.0, 3634.0], [458.0, 3697.0], [457.0, 3677.0], [456.0, 3652.0], [455.0, 3637.0], [454.0, 3637.0], [453.0, 3639.5], [476.0, 3706.0], [478.0, 3651.0], [479.0, 3654.0], [477.0, 3594.0], [475.0, 3705.6666666666665], [473.0, 3685.0], [471.0, 3695.5], [467.0, 3659.0], [466.0, 3653.3333333333335], [469.0, 3723.0], [468.0, 3706.0], [494.0, 3627.0], [495.0, 3639.0], [493.0, 3624.0], [492.0, 3648.0], [491.0, 3650.0], [490.0, 3615.0], [489.0, 3636.0], [488.0, 4852.5], [486.0, 3646.0], [481.0, 3586.0], [480.0, 3603.0], [483.0, 3608.0], [482.0, 3606.0], [485.0, 3643.0], [484.0, 6074.0], [510.0, 3632.0], [511.0, 3633.0], [509.0, 3632.0], [508.0, 3632.0], [507.0, 3635.0], [506.0, 3621.0], [505.0, 3631.0], [504.0, 3647.0], [503.0, 3622.0], [499.0, 3634.0], [498.0, 3636.6666666666665], [502.0, 3631.0], [501.0, 3656.0], [500.0, 3605.0], [538.0, 3722.0], [542.0, 3743.0], [543.0, 3734.0], [531.0, 3656.0], [530.0, 3653.6666666666665], [541.0, 3731.0], [540.0, 3730.0], [539.0, 3738.3333333333335], [536.0, 3710.0], [519.0, 3636.0], [517.0, 3631.0], [516.0, 3631.6666666666665], [513.0, 3650.0], [512.0, 3634.0], [527.0, 3628.0], [526.0, 3629.0], [525.0, 3724.0], [524.0, 3656.0], [521.0, 3634.0], [520.0, 3641.0], [533.0, 3708.0], [532.0, 3735.0], [568.0, 3656.3333333333335], [572.0, 3667.0], [575.0, 3676.0], [561.0, 3673.0], [560.0, 3690.0], [574.0, 3680.0], [573.0, 3678.0], [571.0, 3675.0], [570.0, 3655.0], [569.0, 3650.0], [559.0, 3695.0], [545.0, 3733.0], [544.0, 3734.0], [547.0, 3750.0], [546.0, 3745.0], [549.0, 3742.0], [548.0, 3714.0], [551.0, 3723.0], [550.0, 3713.0], [558.0, 3697.0], [557.0, 3694.0], [556.0, 3709.0], [555.0, 3693.0], [554.0, 3713.0], [553.0, 3720.0], [552.0, 3702.0], [565.0, 3653.6666666666665], [562.0, 3673.0], [600.0, 3674.0], [604.0, 3671.0], [607.0, 3656.0], [593.0, 3673.0], [592.0, 3663.0], [595.0, 3662.0], [594.0, 3658.0], [606.0, 3648.0], [605.0, 3694.0], [603.0, 3660.0], [602.0, 3663.0], [601.0, 3659.0], [591.0, 3661.0], [576.0, 3666.0], [579.0, 3662.0], [578.0, 3675.0], [581.0, 3672.0], [580.0, 3662.0], [583.0, 3662.0], [582.0, 3660.0], [590.0, 3667.0], [589.0, 3667.5], [587.0, 3705.0], [586.0, 3669.0], [585.0, 3678.0], [584.0, 3683.0], [599.0, 3672.0], [596.0, 3673.0], [636.0, 3668.0], [639.0, 3662.0], [625.0, 3669.0], [624.0, 3673.0], [627.0, 3666.0], [626.0, 3664.0], [629.0, 3668.0], [628.0, 3662.0], [638.0, 3663.0], [637.0, 3677.0], [635.0, 3658.0], [634.0, 3673.0], [633.0, 3691.0], [632.0, 3657.0], [623.0, 3674.0], [609.0, 3668.0], [611.0, 3676.0], [610.0, 3680.0], [613.0, 3659.0], [612.0, 3658.0], [615.0, 3664.0], [614.0, 3662.0], [622.0, 3665.0], [621.0, 3680.0], [620.0, 3677.0], [619.0, 3657.0], [618.0, 3663.0], [617.0, 3654.0], [616.0, 6110.0], [631.0, 3657.0], [630.0, 3660.0], [664.0, 3656.0], [668.0, 3661.0], [671.0, 3687.0], [656.0, 3655.5], [661.0, 3655.0], [660.0, 3646.0], [670.0, 3684.0], [669.0, 3664.0], [667.0, 3661.0], [666.0, 3708.0], [665.0, 3711.0], [654.0, 3677.0], [640.0, 3660.0], [642.0, 3740.0], [641.0, 3642.0], [647.0, 3674.0], [646.0, 3711.5], [653.0, 3676.0], [652.0, 3674.0], [651.0, 3727.0], [650.0, 3700.0], [649.0, 3693.5], [663.0, 3692.0], [662.0, 3663.0], [697.0, 3760.0], [702.0, 3750.0], [703.0, 3714.0], [689.0, 3720.0], [691.0, 3743.0], [690.0, 3740.0], [693.0, 3691.0], [692.0, 3701.0], [701.0, 3728.0], [699.0, 3718.0], [698.0, 3726.0], [696.0, 3734.0], [679.0, 3711.0], [678.0, 3688.5], [677.0, 3714.0], [675.0, 3721.0], [674.0, 3692.0], [673.0, 3690.0], [672.0, 3689.0], [687.0, 3700.0], [686.0, 3749.0], [685.0, 3746.0], [684.0, 3702.0], [683.0, 3707.0], [682.0, 3692.0], [681.0, 3697.5], [695.0, 3745.0], [694.0, 3749.0], [730.0, 3756.0], [734.0, 3739.0], [735.0, 3748.0], [720.0, 3726.0], [722.0, 3725.0], [721.0, 3727.0], [725.0, 3720.0], [723.0, 3720.0], [733.0, 3748.0], [732.0, 3734.0], [731.0, 3733.0], [729.0, 3744.0], [709.0, 3734.0], [708.0, 3740.0], [707.0, 3722.0], [706.0, 3725.0], [705.0, 3725.0], [704.0, 3712.0], [719.0, 3732.0], [718.0, 3749.0], [717.0, 3712.0], [716.0, 3741.0], [715.0, 3734.0], [714.0, 3704.0], [713.0, 3711.0], [712.0, 3730.3333333333335], [727.0, 3723.0], [726.0, 3724.0], [764.0, 3686.0], [767.0, 3700.0], [753.0, 3705.0], [752.0, 3681.0], [755.0, 3696.0], [754.0, 3663.0], [757.0, 3693.0], [756.0, 3692.0], [766.0, 3714.0], [765.0, 3706.0], [763.0, 3688.0], [762.0, 3692.0], [761.0, 3684.0], [760.0, 3686.0], [751.0, 3687.0], [737.0, 3744.0], [739.0, 3721.0], [738.0, 3702.0], [741.0, 3698.0], [740.0, 3683.0], [743.0, 3693.0], [742.0, 3697.0], [750.0, 3712.0], [749.0, 3721.0], [748.0, 3686.0], [747.0, 3690.0], [746.0, 3698.0], [745.0, 3707.0], [744.0, 3702.0], [759.0, 3694.0], [758.0, 3692.0], [793.0, 3658.0], [798.0, 3648.0], [799.0, 3655.0], [785.0, 3670.0], [787.0, 3676.0], [786.0, 3662.0], [789.0, 3651.0], [788.0, 3679.0], [797.0, 3647.5], [795.0, 3651.0], [794.0, 3645.0], [792.0, 3696.0], [775.0, 3707.0], [774.0, 3711.0], [773.0, 3693.5], [771.0, 3690.0], [770.0, 3686.0], [769.0, 3692.0], [768.0, 3700.0], [783.0, 3669.0], [782.0, 3654.0], [781.0, 3688.0], [780.0, 3690.0], [779.0, 3697.0], [778.0, 3691.0], [777.0, 3729.0], [776.0, 3698.0], [791.0, 3668.0], [790.0, 3670.0], [825.0, 3641.0], [829.0, 3648.0], [831.0, 3662.5], [817.0, 3640.0], [816.0, 3643.0], [819.0, 3612.0], [818.0, 3649.0], [821.0, 3620.0], [820.0, 3617.0], [828.0, 3644.0], [827.0, 3625.0], [826.0, 3644.0], [824.0, 3637.0], [807.0, 3657.0], [806.0, 3629.0], [805.0, 3627.0], [804.0, 3636.0], [803.0, 3628.0], [802.0, 3633.0], [801.0, 3645.0], [800.0, 3653.0], [815.0, 3626.0], [814.0, 3634.0], [813.0, 3619.5], [811.0, 3640.0], [810.0, 3644.0], [809.0, 3652.0], [808.0, 3656.0], [823.0, 3649.0], [822.0, 3612.0], [860.0, 3087.0], [863.0, 3071.0], [848.0, 3622.0], [850.0, 28.0], [849.0, 3623.0], [853.0, 3657.0], [852.0, 3632.5], [862.0, 3047.0], [861.0, 3082.0], [859.0, 3094.0], [858.0, 3125.0], [857.0, 3152.0], [856.0, 68.0], [847.0, 3619.0], [832.0, 3600.0], [835.0, 3619.0], [834.0, 3630.0], [837.0, 3632.0], [836.0, 3628.0], [839.0, 3652.0], [838.0, 3630.0], [846.0, 3623.0], [845.0, 3634.0], [844.0, 3637.0], [842.0, 3617.0], [841.0, 3634.0], [855.0, 49.0], [854.0, 3649.0], [889.0, 3066.0], [894.0, 3061.0], [895.0, 3007.0], [880.0, 3080.0], [882.0, 3066.0], [881.0, 3068.0], [884.0, 3009.0], [883.0, 3019.0], [893.0, 3000.0], [892.0, 3035.0], [890.0, 3025.0], [888.0, 3038.5], [871.0, 3050.0], [870.0, 3026.0], [869.0, 3062.0], [867.0, 3032.0], [866.0, 3054.0], [865.0, 3075.0], [864.0, 3064.0], [879.0, 3086.0], [878.0, 3024.0], [876.0, 3031.0], [875.0, 3096.0], [874.0, 3114.0], [873.0, 3031.5], [886.0, 3038.0], [885.0, 3089.0], [921.0, 3030.0], [926.0, 3016.0], [927.0, 2965.0], [913.0, 2961.0], [912.0, 3019.0], [915.0, 3007.0], [914.0, 3024.0], [925.0, 3011.5], [923.0, 3008.0], [922.0, 2983.0], [911.0, 2965.0], [897.0, 2992.0], [896.0, 3028.0], [899.0, 3001.0], [898.0, 3050.0], [901.0, 3026.0], [900.0, 2981.0], [903.0, 3017.0], [902.0, 2979.0], [910.0, 3016.0], [909.0, 3047.0], [908.0, 2986.0], [907.0, 3013.0], [906.0, 3055.0], [905.0, 3030.0], [904.0, 2971.0], [919.0, 2976.0], [918.0, 2992.0], [917.0, 2945.0], [916.0, 2948.0], [956.0, 2934.0], [959.0, 2910.0], [944.0, 3047.0], [947.0, 2974.0], [945.0, 2979.0], [949.0, 2971.0], [948.0, 3036.0], [958.0, 2965.0], [957.0, 2926.0], [955.0, 2985.0], [954.0, 2954.0], [953.0, 2940.0], [952.0, 2947.0], [943.0, 2967.0], [928.0, 3007.0], [930.0, 2986.0], [929.0, 2986.0], [933.0, 2992.0], [931.0, 2931.0], [935.0, 2962.0], [934.0, 2999.0], [942.0, 3006.0], [941.0, 2978.0], [940.0, 2974.0], [939.0, 2981.0], [938.0, 2973.0], [937.0, 2994.0], [936.0, 2985.0], [951.0, 2960.0], [950.0, 2959.0], [985.0, 88.0], [990.0, 29.0], [991.0, 49.0], [977.0, 501.0], [976.0, 535.0], [979.0, 415.0], [978.0, 488.0], [989.0, 47.0], [987.0, 99.0], [986.0, 54.0], [984.0, 49.0], [967.0, 2254.0], [966.0, 2264.0], [965.0, 2278.0], [964.0, 2289.0], [963.0, 2334.0], [962.0, 2452.0], [961.0, 79.0], [960.0, 16.0], [975.0, 542.0], [974.0, 982.0], [973.0, 1596.0], [972.0, 1703.0], [971.0, 1728.0], [970.0, 1734.0], [969.0, 36.0], [968.0, 79.0], [983.0, 170.0], [982.0, 381.0], [981.0, 55.0], [980.0, 401.0], [1000.0, 20.0], [999.0, 27.0], [998.0, 28.0], [997.0, 41.0], [996.0, 52.0], [995.0, 46.5], [993.0, 39.0], [992.0, 14.0], [1.0, 26.0]], "isOverall": false, "label": "/UserService/resetPsw", "isController": false}, {"data": [[500.6530000000002, 2899.341999999998]], "isOverall": false, "label": "/UserService/resetPsw-Aggregated", "isController": false}, {"data": [[12.0, 9482.0], [16.0, 9679.0], [18.0, 9556.0], [27.0, 9541.0], [29.0, 9567.0], [32.0, 9384.0], [35.0, 9429.0], [34.0, 9419.0], [39.0, 9420.0], [38.0, 9415.25], [41.0, 9413.0], [40.0, 9464.0], [43.0, 9557.0], [46.0, 9438.0], [53.0, 9537.0], [52.0, 9517.0], [55.0, 9875.666666666666], [59.0, 9446.0], [61.0, 9650.75], [71.0, 9224.0], [69.0, 9217.5], [75.0, 9075.0], [78.0, 9868.0], [77.0, 9191.5], [82.0, 9066.0], [81.0, 9052.333333333334], [86.0, 9046.0], [90.0, 9026.0], [89.0, 9097.5], [99.0, 9012.666666666666], [98.0, 9801.0], [97.0, 9013.0], [96.0, 9011.25], [104.0, 9119.0], [109.0, 9051.333333333334], [108.0, 9029.0], [115.0, 8972.0], [118.0, 8966.222222222223], [116.0, 8857.0], [123.0, 8644.0], [122.0, 8858.0], [133.0, 9541.0], [132.0, 8797.0], [131.0, 8759.42857142857], [130.0, 8899.0], [129.0, 8819.0], [143.0, 8555.0], [142.0, 8607.75], [141.0, 8769.0], [140.0, 8710.333333333334], [151.0, 8650.0], [150.0, 8660.0], [147.0, 8416.0], [146.0, 8433.0], [155.0, 8493.25], [153.0, 8648.0], [152.0, 8596.666666666666], [167.0, 8080.0], [165.0, 8057.0], [160.0, 8142.0], [171.0, 7989.0], [170.0, 8215.0], [169.0, 8029.0], [168.0, 8055.5], [179.0, 7966.6], [177.0, 8157.5], [190.0, 7934.0], [189.0, 7945.0], [187.0, 7938.5], [186.0, 8708.0], [185.0, 7961.0], [184.0, 7948.0], [194.0, 7919.0], [192.0, 7926.5], [205.0, 7681.0], [202.0, 7695.0], [215.0, 7735.0], [216.0, 7740.0], [228.0, 7730.0], [269.0, 7466.0], [317.0, 7197.0], [315.0, 7419.0], [306.0, 7441.0], [372.0, 7101.0], [398.0, 7003.0], [413.0, 7542.0], [471.0, 6811.5], [509.0, 6393.0], [508.0, 6589.0], [519.0, 6562.0], [561.0, 6218.0], [560.0, 6270.0], [547.0, 6309.0], [603.0, 6007.0], [630.0, 6814.0], [666.0, 5752.0], [654.0, 6013.0], [642.0, 5861.0], [686.0, 5723.0], [675.0, 5950.0], [723.0, 5631.0], [737.0, 5640.0], [825.0, 39.0], [830.0, 72.0], [861.0, 5149.333333333333], [850.0, 172.0], [859.0, 4998.5], [858.0, 5287.0], [857.0, 5194.857142857143], [856.0, 5267.470588235295], [847.0, 5881.5], [841.0, 5281.0], [855.0, 5407.071428571428], [854.0, 5607.684210526317], [853.0, 5615.0], [959.0, 4078.736842105263], [958.0, 4176.0], [957.0, 4184.0], [987.0, 718.0], [980.0, 997.75], [990.0, 595.0], [977.0, 1249.3333333333333], [976.0, 1127.4285714285713], [986.0, 665.0], [985.0, 1256.5], [975.0, 1237.0], [961.0, 3895.1363636363635], [960.0, 3832.25], [963.0, 3835.8571428571427], [962.0, 3777.72], [965.0, 3801.0], [964.0, 4002.0], [967.0, 3904.0], [966.0, 3836.6666666666665], [974.0, 1515.3023255813953], [973.0, 2595.9540816326553], [972.0, 3171.7804878048782], [971.0, 3059.428571428571], [970.0, 3104.0], [969.0, 3497.3124999999995], [968.0, 3820.6], [983.0, 677.75], [982.0, 1005.7428571428571], [981.0, 1102.0], [979.0, 909.0], [978.0, 1155.0], [1000.0, 647.1666666666667], [999.0, 478.0], [998.0, 1293.0], [997.0, 1311.0], [996.0, 542.0], [995.0, 591.5], [993.0, 747.75]], "isOverall": false, "label": "/UserService/freezeA", "isController": false}, {"data": [[819.2959999999993, 3899.3300000000004]], "isOverall": false, "label": "/UserService/freezeA-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5814.0, "minX": 1.629778492E12, "maxY": 63055.0, "series": [{"data": [[1.629778494E12, 50388.0], [1.629778496E12, 38862.0], [1.629778492E12, 5814.0], [1.629778502E12, 19584.0], [1.6297785E12, 38454.0], [1.629778498E12, 50898.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.629778494E12, 58385.0], [1.629778496E12, 46027.5], [1.629778492E12, 6896.0], [1.629778502E12, 23773.5], [1.6297785E12, 47256.0], [1.629778498E12, 63055.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629778502E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 52.55555555555555, "minX": 1.629778492E12, "maxY": 9246.216216216213, "series": [{"data": [[1.629778494E12, 850.8461538461538], [1.629778496E12, 2823.060869565218], [1.629778492E12, 52.55555555555555], [1.629778502E12, 1418.0508474576268], [1.6297785E12, 2615.6894197952224], [1.629778498E12, 3677.1015801354415]], "isOverall": false, "label": "/UserService/resetPsw", "isController": false}, {"data": [[1.629778494E12, 2192.806652806654], [1.629778496E12, 4190.65037593985], [1.629778492E12, 672.7692307692308], [1.629778502E12, 9246.216216216213], [1.6297785E12, 8248.702380952383], [1.629778498E12, 5830.857142857142]], "isOverall": false, "label": "/UserService/freezeA", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629778502E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 52.55555555555555, "minX": 1.629778492E12, "maxY": 9246.216216216213, "series": [{"data": [[1.629778494E12, 850.7692307692308], [1.629778496E12, 2823.043478260871], [1.629778492E12, 52.55555555555555], [1.629778502E12, 1418.0423728813553], [1.6297785E12, 2615.6757679180896], [1.629778498E12, 3677.088036117379]], "isOverall": false, "label": "/UserService/resetPsw", "isController": false}, {"data": [[1.629778494E12, 2192.7650727650725], [1.629778496E12, 4190.627819548873], [1.629778492E12, 672.6410256410256], [1.629778502E12, 9246.216216216213], [1.6297785E12, 8248.702380952383], [1.629778498E12, 5830.857142857142]], "isOverall": false, "label": "/UserService/freezeA", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629778502E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.629778492E12, "maxY": 1568.0639097744365, "series": [{"data": [[1.629778494E12, 0.0], [1.629778496E12, 0.0], [1.629778492E12, 0.0], [1.629778502E12, 0.0], [1.6297785E12, 0.0], [1.629778498E12, 0.0]], "isOverall": false, "label": "/UserService/resetPsw", "isController": false}, {"data": [[1.629778494E12, 1090.120582120582], [1.629778496E12, 1568.0639097744365], [1.629778492E12, 223.84615384615387], [1.629778502E12, 224.39189189189182], [1.6297785E12, 212.25000000000006], [1.629778498E12, 1502.7678571428576]], "isOverall": false, "label": "/UserService/freezeA", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629778502E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.629778492E12, "maxY": 10137.0, "series": [{"data": [[1.629778494E12, 3627.0], [1.629778496E12, 5603.0], [1.629778492E12, 1311.0], [1.629778502E12, 10137.0], [1.6297785E12, 9541.0], [1.629778498E12, 7542.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.629778494E12, 3256.0], [1.629778496E12, 5252.6], [1.629778492E12, 1225.6], [1.629778502E12, 9443.6], [1.6297785E12, 8394.2], [1.629778498E12, 5542.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.629778494E12, 3602.0], [1.629778496E12, 5578.34], [1.629778492E12, 1311.0], [1.629778502E12, 10110.96], [1.6297785E12, 8915.279999999997], [1.629778498E12, 6589.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.629778494E12, 3380.75], [1.629778496E12, 5400.299999999999], [1.629778492E12, 1263.2999999999997], [1.629778502E12, 9556.35], [1.6297785E12, 8710.5], [1.629778498E12, 5783.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.629778494E12, 55.0], [1.629778496E12, 16.0], [1.629778492E12, 14.0], [1.629778502E12, 8.0], [1.6297785E12, 11.0], [1.629778498E12, 28.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.629778494E12, 2273.0], [1.629778496E12, 3736.0], [1.629778492E12, 536.0], [1.629778502E12, 2140.5], [1.6297785E12, 3424.0], [1.629778498E12, 3674.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629778502E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 536.0, "minX": 57.0, "maxY": 7918.0, "series": [{"data": [[266.0, 2858.5], [267.0, 3662.0], [154.0, 7918.0], [186.0, 3071.0], [195.0, 3765.0], [192.0, 2140.5], [223.0, 3358.0], [57.0, 536.0], [228.0, 1360.5], [232.0, 3699.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 267.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 536.0, "minX": 57.0, "maxY": 7918.0, "series": [{"data": [[266.0, 2858.5], [267.0, 3662.0], [154.0, 7918.0], [186.0, 3071.0], [195.0, 3765.0], [192.0, 2140.5], [223.0, 3358.0], [57.0, 536.0], [228.0, 1360.5], [232.0, 3699.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 267.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 28.0, "minX": 1.629778492E12, "maxY": 519.5, "series": [{"data": [[1.629778494E12, 240.5], [1.629778496E12, 133.0], [1.629778492E12, 519.5], [1.629778502E12, 37.0], [1.6297785E12, 42.0], [1.629778498E12, 28.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629778502E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 28.5, "minX": 1.629778492E12, "maxY": 249.5, "series": [{"data": [[1.629778494E12, 247.0], [1.629778496E12, 190.5], [1.629778492E12, 28.5], [1.629778502E12, 96.0], [1.6297785E12, 188.5], [1.629778498E12, 249.5]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629778502E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 6.5, "minX": 1.629778492E12, "maxY": 240.5, "series": [{"data": [[1.629778494E12, 240.5], [1.629778496E12, 133.0], [1.629778492E12, 19.5], [1.629778502E12, 37.0], [1.6297785E12, 42.0], [1.629778498E12, 28.0]], "isOverall": false, "label": "/UserService/freezeA-success", "isController": false}, {"data": [[1.629778494E12, 6.5], [1.629778496E12, 57.5], [1.629778492E12, 9.0], [1.629778502E12, 59.0], [1.6297785E12, 146.5], [1.629778498E12, 221.5]], "isOverall": false, "label": "/UserService/resetPsw-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629778502E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 28.5, "minX": 1.629778492E12, "maxY": 249.5, "series": [{"data": [[1.629778494E12, 247.0], [1.629778496E12, 190.5], [1.629778492E12, 28.5], [1.629778502E12, 96.0], [1.6297785E12, 188.5], [1.629778498E12, 249.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629778502E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

