/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 6.0, "minX": 0.0, "maxY": 15098.0, "series": [{"data": [[0.0, 11.0], [0.1, 14.0], [0.2, 14.0], [0.3, 14.0], [0.4, 15.0], [0.5, 15.0], [0.6, 15.0], [0.7, 17.0], [0.8, 17.0], [0.9, 17.0], [1.0, 18.0], [1.1, 18.0], [1.2, 18.0], [1.3, 19.0], [1.4, 20.0], [1.5, 20.0], [1.6, 21.0], [1.7, 22.0], [1.8, 22.0], [1.9, 23.0], [2.0, 23.0], [2.1, 23.0], [2.2, 24.0], [2.3, 24.0], [2.4, 24.0], [2.5, 25.0], [2.6, 25.0], [2.7, 25.0], [2.8, 25.0], [2.9, 26.0], [3.0, 26.0], [3.1, 27.0], [3.2, 28.0], [3.3, 28.0], [3.4, 28.0], [3.5, 30.0], [3.6, 30.0], [3.7, 31.0], [3.8, 31.0], [3.9, 31.0], [4.0, 32.0], [4.1, 33.0], [4.2, 34.0], [4.3, 38.0], [4.4, 39.0], [4.5, 40.0], [4.6, 41.0], [4.7, 42.0], [4.8, 42.0], [4.9, 43.0], [5.0, 46.0], [5.1, 49.0], [5.2, 61.0], [5.3, 67.0], [5.4, 76.0], [5.5, 77.0], [5.6, 126.0], [5.7, 158.0], [5.8, 183.0], [5.9, 300.0], [6.0, 358.0], [6.1, 383.0], [6.2, 460.0], [6.3, 610.0], [6.4, 717.0], [6.5, 724.0], [6.6, 738.0], [6.7, 889.0], [6.8, 951.0], [6.9, 1117.0], [7.0, 1189.0], [7.1, 1452.0], [7.2, 1521.0], [7.3, 1622.0], [7.4, 1702.0], [7.5, 1730.0], [7.6, 2080.0], [7.7, 2110.0], [7.8, 2441.0], [7.9, 2467.0], [8.0, 2576.0], [8.1, 2577.0], [8.2, 2581.0], [8.3, 2590.0], [8.4, 2594.0], [8.5, 2597.0], [8.6, 2602.0], [8.7, 2606.0], [8.8, 2607.0], [8.9, 2609.0], [9.0, 2610.0], [9.1, 2620.0], [9.2, 2624.0], [9.3, 2629.0], [9.4, 2635.0], [9.5, 2637.0], [9.6, 2646.0], [9.7, 2658.0], [9.8, 2661.0], [9.9, 2668.0], [10.0, 2674.0], [10.1, 2674.0], [10.2, 2675.0], [10.3, 2678.0], [10.4, 2683.0], [10.5, 2686.0], [10.6, 2688.0], [10.7, 2691.0], [10.8, 2691.0], [10.9, 2694.0], [11.0, 2697.0], [11.1, 2697.0], [11.2, 2700.0], [11.3, 2703.0], [11.4, 2703.0], [11.5, 2705.0], [11.6, 2706.0], [11.7, 2708.0], [11.8, 2708.0], [11.9, 2709.0], [12.0, 2710.0], [12.1, 2711.0], [12.2, 2713.0], [12.3, 2714.0], [12.4, 2716.0], [12.5, 2718.0], [12.6, 2719.0], [12.7, 2721.0], [12.8, 2722.0], [12.9, 2724.0], [13.0, 2727.0], [13.1, 2728.0], [13.2, 2728.0], [13.3, 2732.0], [13.4, 2733.0], [13.5, 2736.0], [13.6, 2736.0], [13.7, 2737.0], [13.8, 2738.0], [13.9, 2740.0], [14.0, 2741.0], [14.1, 2743.0], [14.2, 2744.0], [14.3, 2744.0], [14.4, 2744.0], [14.5, 2745.0], [14.6, 2747.0], [14.7, 2748.0], [14.8, 2749.0], [14.9, 2750.0], [15.0, 2753.0], [15.1, 2754.0], [15.2, 2756.0], [15.3, 2758.0], [15.4, 2759.0], [15.5, 2759.0], [15.6, 2760.0], [15.7, 2761.0], [15.8, 2762.0], [15.9, 2764.0], [16.0, 2766.0], [16.1, 2769.0], [16.2, 2771.0], [16.3, 2772.0], [16.4, 2773.0], [16.5, 2774.0], [16.6, 2775.0], [16.7, 2777.0], [16.8, 2778.0], [16.9, 2778.0], [17.0, 2779.0], [17.1, 2780.0], [17.2, 2782.0], [17.3, 2784.0], [17.4, 2786.0], [17.5, 2788.0], [17.6, 2788.0], [17.7, 2790.0], [17.8, 2791.0], [17.9, 2793.0], [18.0, 2794.0], [18.1, 2795.0], [18.2, 2797.0], [18.3, 2800.0], [18.4, 2803.0], [18.5, 2804.0], [18.6, 2805.0], [18.7, 2807.0], [18.8, 2807.0], [18.9, 2809.0], [19.0, 2811.0], [19.1, 2814.0], [19.2, 2816.0], [19.3, 2817.0], [19.4, 2820.0], [19.5, 2821.0], [19.6, 2822.0], [19.7, 2822.0], [19.8, 2823.0], [19.9, 2824.0], [20.0, 2825.0], [20.1, 2826.0], [20.2, 2826.0], [20.3, 2827.0], [20.4, 2828.0], [20.5, 2829.0], [20.6, 2830.0], [20.7, 2832.0], [20.8, 2833.0], [20.9, 2834.0], [21.0, 2834.0], [21.1, 2835.0], [21.2, 2836.0], [21.3, 2837.0], [21.4, 2837.0], [21.5, 2838.0], [21.6, 2838.0], [21.7, 2839.0], [21.8, 2840.0], [21.9, 2840.0], [22.0, 2843.0], [22.1, 2843.0], [22.2, 2844.0], [22.3, 2844.0], [22.4, 2845.0], [22.5, 2847.0], [22.6, 2847.0], [22.7, 2848.0], [22.8, 2849.0], [22.9, 2849.0], [23.0, 2850.0], [23.1, 2851.0], [23.2, 2851.0], [23.3, 2853.0], [23.4, 2854.0], [23.5, 2855.0], [23.6, 2855.0], [23.7, 2855.0], [23.8, 2856.0], [23.9, 2857.0], [24.0, 2858.0], [24.1, 2860.0], [24.2, 2864.0], [24.3, 2865.0], [24.4, 2866.0], [24.5, 2868.0], [24.6, 2871.0], [24.7, 2884.0], [24.8, 2889.0], [24.9, 2892.0], [25.0, 2893.0], [25.1, 2895.0], [25.2, 2896.0], [25.3, 2898.0], [25.4, 2901.0], [25.5, 2905.0], [25.6, 2907.0], [25.7, 2910.0], [25.8, 2912.0], [25.9, 2913.0], [26.0, 2916.0], [26.1, 2918.0], [26.2, 2918.0], [26.3, 2921.0], [26.4, 2922.0], [26.5, 2922.0], [26.6, 2924.0], [26.7, 2927.0], [26.8, 2928.0], [26.9, 2933.0], [27.0, 2951.0], [27.1, 2987.0], [27.2, 2988.0], [27.3, 2999.0], [27.4, 3000.0], [27.5, 3001.0], [27.6, 3004.0], [27.7, 3007.0], [27.8, 3012.0], [27.9, 3014.0], [28.0, 3017.0], [28.1, 3020.0], [28.2, 3021.0], [28.3, 3023.0], [28.4, 3024.0], [28.5, 3025.0], [28.6, 3030.0], [28.7, 3034.0], [28.8, 3034.0], [28.9, 3035.0], [29.0, 3037.0], [29.1, 3037.0], [29.2, 3039.0], [29.3, 3040.0], [29.4, 3044.0], [29.5, 3047.0], [29.6, 3048.0], [29.7, 3049.0], [29.8, 3050.0], [29.9, 3056.0], [30.0, 3059.0], [30.1, 3060.0], [30.2, 3062.0], [30.3, 3064.0], [30.4, 3066.0], [30.5, 3067.0], [30.6, 3069.0], [30.7, 3071.0], [30.8, 3073.0], [30.9, 3077.0], [31.0, 3079.0], [31.1, 3079.0], [31.2, 3080.0], [31.3, 3081.0], [31.4, 3082.0], [31.5, 3085.0], [31.6, 3087.0], [31.7, 3088.0], [31.8, 3091.0], [31.9, 3093.0], [32.0, 3095.0], [32.1, 3099.0], [32.2, 3100.0], [32.3, 3101.0], [32.4, 3104.0], [32.5, 3108.0], [32.6, 3109.0], [32.7, 3115.0], [32.8, 3119.0], [32.9, 3119.0], [33.0, 3119.0], [33.1, 3120.0], [33.2, 3121.0], [33.3, 3122.0], [33.4, 3123.0], [33.5, 3125.0], [33.6, 3126.0], [33.7, 3126.0], [33.8, 3126.0], [33.9, 3127.0], [34.0, 3127.0], [34.1, 3128.0], [34.2, 3129.0], [34.3, 3130.0], [34.4, 3131.0], [34.5, 3131.0], [34.6, 3132.0], [34.7, 3133.0], [34.8, 3133.0], [34.9, 3133.0], [35.0, 3134.0], [35.1, 3135.0], [35.2, 3136.0], [35.3, 3136.0], [35.4, 3137.0], [35.5, 3137.0], [35.6, 3137.0], [35.7, 3138.0], [35.8, 3139.0], [35.9, 3139.0], [36.0, 3140.0], [36.1, 3140.0], [36.2, 3141.0], [36.3, 3141.0], [36.4, 3143.0], [36.5, 3143.0], [36.6, 3144.0], [36.7, 3146.0], [36.8, 3146.0], [36.9, 3147.0], [37.0, 3147.0], [37.1, 3147.0], [37.2, 3148.0], [37.3, 3149.0], [37.4, 3150.0], [37.5, 3150.0], [37.6, 3151.0], [37.7, 3152.0], [37.8, 3152.0], [37.9, 3153.0], [38.0, 3154.0], [38.1, 3155.0], [38.2, 3156.0], [38.3, 3157.0], [38.4, 3157.0], [38.5, 3158.0], [38.6, 3158.0], [38.7, 3160.0], [38.8, 3160.0], [38.9, 3160.0], [39.0, 3162.0], [39.1, 3163.0], [39.2, 3164.0], [39.3, 3164.0], [39.4, 3166.0], [39.5, 3167.0], [39.6, 3168.0], [39.7, 3168.0], [39.8, 3169.0], [39.9, 3170.0], [40.0, 3171.0], [40.1, 3172.0], [40.2, 3174.0], [40.3, 3177.0], [40.4, 3177.0], [40.5, 3178.0], [40.6, 3180.0], [40.7, 3182.0], [40.8, 3183.0], [40.9, 3191.0], [41.0, 3192.0], [41.1, 3195.0], [41.2, 3197.0], [41.3, 3201.0], [41.4, 3202.0], [41.5, 3205.0], [41.6, 3206.0], [41.7, 3207.0], [41.8, 3207.0], [41.9, 3210.0], [42.0, 3213.0], [42.1, 3214.0], [42.2, 3215.0], [42.3, 3217.0], [42.4, 3219.0], [42.5, 3220.0], [42.6, 3223.0], [42.7, 3225.0], [42.8, 3226.0], [42.9, 3229.0], [43.0, 3232.0], [43.1, 3235.0], [43.2, 3238.0], [43.3, 3239.0], [43.4, 3241.0], [43.5, 3242.0], [43.6, 3243.0], [43.7, 3243.0], [43.8, 3246.0], [43.9, 3247.0], [44.0, 3250.0], [44.1, 3250.0], [44.2, 3252.0], [44.3, 3253.0], [44.4, 3256.0], [44.5, 3259.0], [44.6, 3261.0], [44.7, 3262.0], [44.8, 3263.0], [44.9, 3265.0], [45.0, 3266.0], [45.1, 3266.0], [45.2, 3268.0], [45.3, 3273.0], [45.4, 3276.0], [45.5, 3280.0], [45.6, 3281.0], [45.7, 3281.0], [45.8, 3283.0], [45.9, 3286.0], [46.0, 3288.0], [46.1, 3292.0], [46.2, 3292.0], [46.3, 3293.0], [46.4, 3295.0], [46.5, 3296.0], [46.6, 3297.0], [46.7, 3299.0], [46.8, 3308.0], [46.9, 3314.0], [47.0, 3315.0], [47.1, 3325.0], [47.2, 3329.0], [47.3, 3331.0], [47.4, 3363.0], [47.5, 3376.0], [47.6, 3386.0], [47.7, 3418.0], [47.8, 3423.0], [47.9, 3456.0], [48.0, 3458.0], [48.1, 3468.0], [48.2, 3468.0], [48.3, 3481.0], [48.4, 3489.0], [48.5, 3498.0], [48.6, 3504.0], [48.7, 3507.0], [48.8, 3524.0], [48.9, 3527.0], [49.0, 3535.0], [49.1, 3542.0], [49.2, 3547.0], [49.3, 3557.0], [49.4, 3567.0], [49.5, 3580.0], [49.6, 3581.0], [49.7, 3586.0], [49.8, 3600.0], [49.9, 3601.0], [50.0, 3616.0], [50.1, 3632.0], [50.2, 3642.0], [50.3, 3645.0], [50.4, 3649.0], [50.5, 3657.0], [50.6, 3663.0], [50.7, 3675.0], [50.8, 3684.0], [50.9, 3690.0], [51.0, 3704.0], [51.1, 3710.0], [51.2, 3744.0], [51.3, 3747.0], [51.4, 3791.0], [51.5, 3806.0], [51.6, 3813.0], [51.7, 3814.0], [51.8, 3819.0], [51.9, 3823.0], [52.0, 3827.0], [52.1, 3832.0], [52.2, 3833.0], [52.3, 3835.0], [52.4, 3844.0], [52.5, 3847.0], [52.6, 3851.0], [52.7, 3857.0], [52.8, 3879.0], [52.9, 3920.0], [53.0, 3928.0], [53.1, 3985.0], [53.2, 3993.0], [53.3, 4004.0], [53.4, 4012.0], [53.5, 4016.0], [53.6, 4030.0], [53.7, 4040.0], [53.8, 4048.0], [53.9, 4070.0], [54.0, 4078.0], [54.1, 4087.0], [54.2, 4110.0], [54.3, 4118.0], [54.4, 4161.0], [54.5, 4168.0], [54.6, 4172.0], [54.7, 4181.0], [54.8, 4208.0], [54.9, 4211.0], [55.0, 4231.0], [55.1, 4237.0], [55.2, 4266.0], [55.3, 4275.0], [55.4, 4283.0], [55.5, 4293.0], [55.6, 4300.0], [55.7, 4310.0], [55.8, 4321.0], [55.9, 4327.0], [56.0, 4346.0], [56.1, 4361.0], [56.2, 4371.0], [56.3, 4388.0], [56.4, 4395.0], [56.5, 4413.0], [56.6, 4434.0], [56.7, 4446.0], [56.8, 4454.0], [56.9, 4468.0], [57.0, 4472.0], [57.1, 4479.0], [57.2, 4493.0], [57.3, 4502.0], [57.4, 4539.0], [57.5, 4575.0], [57.6, 4584.0], [57.7, 4591.0], [57.8, 4609.0], [57.9, 4633.0], [58.0, 4663.0], [58.1, 4686.0], [58.2, 4697.0], [58.3, 4709.0], [58.4, 4717.0], [58.5, 4732.0], [58.6, 4737.0], [58.7, 4755.0], [58.8, 4779.0], [58.9, 4806.0], [59.0, 4823.0], [59.1, 4833.0], [59.2, 4860.0], [59.3, 4876.0], [59.4, 4928.0], [59.5, 4944.0], [59.6, 5001.0], [59.7, 5035.0], [59.8, 5078.0], [59.9, 5082.0], [60.0, 5099.0], [60.1, 5124.0], [60.2, 5139.0], [60.3, 5145.0], [60.4, 5163.0], [60.5, 5191.0], [60.6, 5215.0], [60.7, 5244.0], [60.8, 5258.0], [60.9, 5268.0], [61.0, 5317.0], [61.1, 5342.0], [61.2, 5369.0], [61.3, 5383.0], [61.4, 5398.0], [61.5, 5416.0], [61.6, 5438.0], [61.7, 5468.0], [61.8, 5547.0], [61.9, 5568.0], [62.0, 5596.0], [62.1, 5614.0], [62.2, 5626.0], [62.3, 5643.0], [62.4, 5647.0], [62.5, 5655.0], [62.6, 5673.0], [62.7, 5686.0], [62.8, 5691.0], [62.9, 5705.0], [63.0, 5725.0], [63.1, 5739.0], [63.2, 5747.0], [63.3, 5762.0], [63.4, 5770.0], [63.5, 5784.0], [63.6, 5789.0], [63.7, 5798.0], [63.8, 5815.0], [63.9, 5825.0], [64.0, 5845.0], [64.1, 5854.0], [64.2, 5871.0], [64.3, 5878.0], [64.4, 5883.0], [64.5, 5905.0], [64.6, 5935.0], [64.7, 5938.0], [64.8, 5950.0], [64.9, 5956.0], [65.0, 5965.0], [65.1, 5967.0], [65.2, 5996.0], [65.3, 6000.0], [65.4, 6018.0], [65.5, 6045.0], [65.6, 6056.0], [65.7, 6068.0], [65.8, 6071.0], [65.9, 6079.0], [66.0, 6089.0], [66.1, 6100.0], [66.2, 6110.0], [66.3, 6112.0], [66.4, 6132.0], [66.5, 6151.0], [66.6, 6161.0], [66.7, 6181.0], [66.8, 6200.0], [66.9, 6214.0], [67.0, 6223.0], [67.1, 6252.0], [67.2, 6257.0], [67.3, 6264.0], [67.4, 6289.0], [67.5, 6292.0], [67.6, 6300.0], [67.7, 6303.0], [67.8, 6324.0], [67.9, 6332.0], [68.0, 6352.0], [68.1, 6367.0], [68.2, 6375.0], [68.3, 6385.0], [68.4, 6386.0], [68.5, 6397.0], [68.6, 6412.0], [68.7, 6421.0], [68.8, 6436.0], [68.9, 6439.0], [69.0, 6444.0], [69.1, 6449.0], [69.2, 6457.0], [69.3, 6472.0], [69.4, 6477.0], [69.5, 6498.0], [69.6, 6509.0], [69.7, 6515.0], [69.8, 6528.0], [69.9, 6563.0], [70.0, 6568.0], [70.1, 6579.0], [70.2, 6592.0], [70.3, 6601.0], [70.4, 6620.0], [70.5, 6624.0], [70.6, 6632.0], [70.7, 6644.0], [70.8, 6685.0], [70.9, 6688.0], [71.0, 6691.0], [71.1, 6703.0], [71.2, 6706.0], [71.3, 6723.0], [71.4, 6741.0], [71.5, 6759.0], [71.6, 6771.0], [71.7, 6782.0], [71.8, 6789.0], [71.9, 6789.0], [72.0, 6796.0], [72.1, 6798.0], [72.2, 6805.0], [72.3, 6827.0], [72.4, 6831.0], [72.5, 6838.0], [72.6, 6844.0], [72.7, 6849.0], [72.8, 6857.0], [72.9, 6858.0], [73.0, 6862.0], [73.1, 6867.0], [73.2, 6869.0], [73.3, 6871.0], [73.4, 6872.0], [73.5, 6874.0], [73.6, 6877.0], [73.7, 6882.0], [73.8, 6886.0], [73.9, 6887.0], [74.0, 6894.0], [74.1, 6897.0], [74.2, 6897.0], [74.3, 6898.0], [74.4, 6905.0], [74.5, 6907.0], [74.6, 6909.0], [74.7, 6913.0], [74.8, 6915.0], [74.9, 6918.0], [75.0, 6920.0], [75.1, 6924.0], [75.2, 6929.0], [75.3, 6932.0], [75.4, 6937.0], [75.5, 6945.0], [75.6, 6955.0], [75.7, 6961.0], [75.8, 6965.0], [75.9, 6973.0], [76.0, 6978.0], [76.1, 6980.0], [76.2, 6981.0], [76.3, 6988.0], [76.4, 6994.0], [76.5, 6998.0], [76.6, 7001.0], [76.7, 7002.0], [76.8, 7008.0], [76.9, 7010.0], [77.0, 7021.0], [77.1, 7022.0], [77.2, 7030.0], [77.3, 7032.0], [77.4, 7035.0], [77.5, 7036.0], [77.6, 7043.0], [77.7, 7050.0], [77.8, 7054.0], [77.9, 7059.0], [78.0, 7061.0], [78.1, 7065.0], [78.2, 7070.0], [78.3, 7074.0], [78.4, 7080.0], [78.5, 7082.0], [78.6, 7089.0], [78.7, 7104.0], [78.8, 7107.0], [78.9, 7111.0], [79.0, 7113.0], [79.1, 7118.0], [79.2, 7120.0], [79.3, 7121.0], [79.4, 7134.0], [79.5, 7135.0], [79.6, 7140.0], [79.7, 7144.0], [79.8, 7152.0], [79.9, 7153.0], [80.0, 7153.0], [80.1, 7157.0], [80.2, 7163.0], [80.3, 7172.0], [80.4, 7179.0], [80.5, 7185.0], [80.6, 7191.0], [80.7, 7194.0], [80.8, 7203.0], [80.9, 7205.0], [81.0, 7207.0], [81.1, 7212.0], [81.2, 7214.0], [81.3, 7217.0], [81.4, 7227.0], [81.5, 7228.0], [81.6, 7232.0], [81.7, 7237.0], [81.8, 7241.0], [81.9, 7243.0], [82.0, 7249.0], [82.1, 7252.0], [82.2, 7253.0], [82.3, 7256.0], [82.4, 7260.0], [82.5, 7267.0], [82.6, 7269.0], [82.7, 7270.0], [82.8, 7272.0], [82.9, 7278.0], [83.0, 7281.0], [83.1, 7282.0], [83.2, 7285.0], [83.3, 7288.0], [83.4, 7296.0], [83.5, 7302.0], [83.6, 7304.0], [83.7, 7306.0], [83.8, 7319.0], [83.9, 7324.0], [84.0, 7335.0], [84.1, 7341.0], [84.2, 7344.0], [84.3, 7349.0], [84.4, 7353.0], [84.5, 7370.0], [84.6, 7380.0], [84.7, 7383.0], [84.8, 7394.0], [84.9, 7412.0], [85.0, 7430.0], [85.1, 7441.0], [85.2, 7445.0], [85.3, 7457.0], [85.4, 7462.0], [85.5, 7603.0], [85.6, 7630.0], [85.7, 7645.0], [85.8, 7679.0], [85.9, 7686.0], [86.0, 7706.0], [86.1, 7726.0], [86.2, 7783.0], [86.3, 7785.0], [86.4, 7801.0], [86.5, 7819.0], [86.6, 7878.0], [86.7, 7930.0], [86.8, 7950.0], [86.9, 7998.0], [87.0, 8021.0], [87.1, 8053.0], [87.2, 8066.0], [87.3, 8068.0], [87.4, 8077.0], [87.5, 8078.0], [87.6, 8082.0], [87.7, 8091.0], [87.8, 8095.0], [87.9, 8112.0], [88.0, 8114.0], [88.1, 8160.0], [88.2, 8204.0], [88.3, 8205.0], [88.4, 8210.0], [88.5, 8215.0], [88.6, 8224.0], [88.7, 8229.0], [88.8, 8230.0], [88.9, 8241.0], [89.0, 8247.0], [89.1, 8250.0], [89.2, 8255.0], [89.3, 8262.0], [89.4, 8265.0], [89.5, 8266.0], [89.6, 8269.0], [89.7, 8271.0], [89.8, 8275.0], [89.9, 8278.0], [90.0, 8280.0], [90.1, 8285.0], [90.2, 8288.0], [90.3, 8289.0], [90.4, 8289.0], [90.5, 8298.0], [90.6, 8303.0], [90.7, 8310.0], [90.8, 8312.0], [90.9, 8314.0], [91.0, 8322.0], [91.1, 8325.0], [91.2, 8330.0], [91.3, 8332.0], [91.4, 8340.0], [91.5, 8351.0], [91.6, 8356.0], [91.7, 8384.0], [91.8, 8389.0], [91.9, 8391.0], [92.0, 8398.0], [92.1, 8402.0], [92.2, 8410.0], [92.3, 8412.0], [92.4, 8413.0], [92.5, 8419.0], [92.6, 8421.0], [92.7, 8428.0], [92.8, 8429.0], [92.9, 8433.0], [93.0, 8434.0], [93.1, 8439.0], [93.2, 8443.0], [93.3, 8448.0], [93.4, 8455.0], [93.5, 8459.0], [93.6, 8461.0], [93.7, 8464.0], [93.8, 8465.0], [93.9, 8467.0], [94.0, 8476.0], [94.1, 8481.0], [94.2, 8487.0], [94.3, 8491.0], [94.4, 8493.0], [94.5, 8496.0], [94.6, 8503.0], [94.7, 8506.0], [94.8, 8509.0], [94.9, 8510.0], [95.0, 8514.0], [95.1, 8518.0], [95.2, 8520.0], [95.3, 8526.0], [95.4, 8533.0], [95.5, 8535.0], [95.6, 8542.0], [95.7, 8547.0], [95.8, 8551.0], [95.9, 8552.0], [96.0, 8556.0], [96.1, 8564.0], [96.2, 8567.0], [96.3, 8574.0], [96.4, 8582.0], [96.5, 8583.0], [96.6, 8593.0], [96.7, 8599.0], [96.8, 8605.0], [96.9, 8606.0], [97.0, 8609.0], [97.1, 8623.0], [97.2, 8629.0], [97.3, 8655.0], [97.4, 8662.0], [97.5, 8670.0], [97.6, 8680.0], [97.7, 8690.0], [97.8, 8707.0], [97.9, 8747.0], [98.0, 8761.0], [98.1, 8769.0], [98.2, 8783.0], [98.3, 8792.0], [98.4, 8800.0], [98.5, 8814.0], [98.6, 8819.0], [98.7, 8835.0], [98.8, 8844.0], [98.9, 8857.0], [99.0, 8873.0], [99.1, 8916.0], [99.2, 8944.0], [99.3, 8985.0], [99.4, 9110.0], [99.5, 9205.0], [99.6, 9215.0], [99.7, 9724.0], [99.8, 9964.0], [99.9, 13512.0]], "isOverall": false, "label": "/evaluation/submitEvaluation2", "isController": false}, {"data": [[0.0, 6.0], [0.1, 7.0], [0.2, 7.0], [0.3, 7.0], [0.4, 8.0], [0.5, 8.0], [0.6, 8.0], [0.7, 8.0], [0.8, 8.0], [0.9, 8.0], [1.0, 9.0], [1.1, 9.0], [1.2, 9.0], [1.3, 10.0], [1.4, 10.0], [1.5, 10.0], [1.6, 10.0], [1.7, 10.0], [1.8, 11.0], [1.9, 11.0], [2.0, 11.0], [2.1, 11.0], [2.2, 11.0], [2.3, 11.0], [2.4, 11.0], [2.5, 11.0], [2.6, 12.0], [2.7, 12.0], [2.8, 12.0], [2.9, 12.0], [3.0, 12.0], [3.1, 12.0], [3.2, 12.0], [3.3, 13.0], [3.4, 13.0], [3.5, 13.0], [3.6, 13.0], [3.7, 13.0], [3.8, 13.0], [3.9, 14.0], [4.0, 14.0], [4.1, 14.0], [4.2, 15.0], [4.3, 15.0], [4.4, 15.0], [4.5, 15.0], [4.6, 16.0], [4.7, 16.0], [4.8, 16.0], [4.9, 16.0], [5.0, 17.0], [5.1, 17.0], [5.2, 18.0], [5.3, 18.0], [5.4, 19.0], [5.5, 19.0], [5.6, 20.0], [5.7, 20.0], [5.8, 21.0], [5.9, 22.0], [6.0, 22.0], [6.1, 24.0], [6.2, 24.0], [6.3, 24.0], [6.4, 25.0], [6.5, 25.0], [6.6, 27.0], [6.7, 27.0], [6.8, 28.0], [6.9, 28.0], [7.0, 28.0], [7.1, 31.0], [7.2, 32.0], [7.3, 34.0], [7.4, 35.0], [7.5, 36.0], [7.6, 39.0], [7.7, 46.0], [7.8, 56.0], [7.9, 66.0], [8.0, 71.0], [8.1, 74.0], [8.2, 89.0], [8.3, 101.0], [8.4, 105.0], [8.5, 115.0], [8.6, 119.0], [8.7, 132.0], [8.8, 159.0], [8.9, 173.0], [9.0, 203.0], [9.1, 239.0], [9.2, 247.0], [9.3, 258.0], [9.4, 267.0], [9.5, 270.0], [9.6, 277.0], [9.7, 283.0], [9.8, 294.0], [9.9, 336.0], [10.0, 365.0], [10.1, 368.0], [10.2, 374.0], [10.3, 451.0], [10.4, 544.0], [10.5, 597.0], [10.6, 663.0], [10.7, 674.0], [10.8, 710.0], [10.9, 718.0], [11.0, 736.0], [11.1, 791.0], [11.2, 998.0], [11.3, 1086.0], [11.4, 1104.0], [11.5, 1116.0], [11.6, 1173.0], [11.7, 1207.0], [11.8, 1371.0], [11.9, 1445.0], [12.0, 1518.0], [12.1, 1548.0], [12.2, 1606.0], [12.3, 1645.0], [12.4, 1656.0], [12.5, 1672.0], [12.6, 1721.0], [12.7, 1796.0], [12.8, 1817.0], [12.9, 1849.0], [13.0, 1856.0], [13.1, 1862.0], [13.2, 1889.0], [13.3, 1972.0], [13.4, 1985.0], [13.5, 1995.0], [13.6, 2002.0], [13.7, 2006.0], [13.8, 2007.0], [13.9, 2011.0], [14.0, 2014.0], [14.1, 2018.0], [14.2, 2021.0], [14.3, 2027.0], [14.4, 2028.0], [14.5, 2034.0], [14.6, 2065.0], [14.7, 2075.0], [14.8, 2089.0], [14.9, 2105.0], [15.0, 2113.0], [15.1, 2121.0], [15.2, 2124.0], [15.3, 2137.0], [15.4, 2144.0], [15.5, 2166.0], [15.6, 2170.0], [15.7, 2196.0], [15.8, 2217.0], [15.9, 2264.0], [16.0, 2285.0], [16.1, 2291.0], [16.2, 2319.0], [16.3, 2352.0], [16.4, 2364.0], [16.5, 2404.0], [16.6, 2407.0], [16.7, 2408.0], [16.8, 2408.0], [16.9, 2409.0], [17.0, 2415.0], [17.1, 2418.0], [17.2, 2420.0], [17.3, 2421.0], [17.4, 2423.0], [17.5, 2428.0], [17.6, 2429.0], [17.7, 2429.0], [17.8, 2430.0], [17.9, 2432.0], [18.0, 2432.0], [18.1, 2433.0], [18.2, 2435.0], [18.3, 2435.0], [18.4, 2437.0], [18.5, 2438.0], [18.6, 2445.0], [18.7, 2449.0], [18.8, 2453.0], [18.9, 2459.0], [19.0, 2460.0], [19.1, 2462.0], [19.2, 2463.0], [19.3, 2464.0], [19.4, 2464.0], [19.5, 2465.0], [19.6, 2466.0], [19.7, 2467.0], [19.8, 2469.0], [19.9, 2470.0], [20.0, 2472.0], [20.1, 2473.0], [20.2, 2474.0], [20.3, 2475.0], [20.4, 2476.0], [20.5, 2478.0], [20.6, 2481.0], [20.7, 2481.0], [20.8, 2483.0], [20.9, 2483.0], [21.0, 2487.0], [21.1, 2487.0], [21.2, 2488.0], [21.3, 2490.0], [21.4, 2492.0], [21.5, 2497.0], [21.6, 2498.0], [21.7, 2501.0], [21.8, 2502.0], [21.9, 2504.0], [22.0, 2507.0], [22.1, 2514.0], [22.2, 2518.0], [22.3, 2524.0], [22.4, 2527.0], [22.5, 2529.0], [22.6, 2529.0], [22.7, 2535.0], [22.8, 2540.0], [22.9, 2545.0], [23.0, 2546.0], [23.1, 2552.0], [23.2, 2558.0], [23.3, 2559.0], [23.4, 2560.0], [23.5, 2562.0], [23.6, 2564.0], [23.7, 2565.0], [23.8, 2567.0], [23.9, 2569.0], [24.0, 2570.0], [24.1, 2571.0], [24.2, 2575.0], [24.3, 2580.0], [24.4, 2583.0], [24.5, 2585.0], [24.6, 2587.0], [24.7, 2588.0], [24.8, 2590.0], [24.9, 2596.0], [25.0, 2602.0], [25.1, 2603.0], [25.2, 2609.0], [25.3, 2611.0], [25.4, 2613.0], [25.5, 2614.0], [25.6, 2619.0], [25.7, 2624.0], [25.8, 2625.0], [25.9, 2632.0], [26.0, 2633.0], [26.1, 2634.0], [26.2, 2635.0], [26.3, 2636.0], [26.4, 2638.0], [26.5, 2643.0], [26.6, 2645.0], [26.7, 2646.0], [26.8, 2646.0], [26.9, 2647.0], [27.0, 2649.0], [27.1, 2651.0], [27.2, 2652.0], [27.3, 2655.0], [27.4, 2656.0], [27.5, 2657.0], [27.6, 2658.0], [27.7, 2658.0], [27.8, 2659.0], [27.9, 2659.0], [28.0, 2659.0], [28.1, 2660.0], [28.2, 2661.0], [28.3, 2664.0], [28.4, 2664.0], [28.5, 2665.0], [28.6, 2666.0], [28.7, 2666.0], [28.8, 2667.0], [28.9, 2668.0], [29.0, 2668.0], [29.1, 2669.0], [29.2, 2670.0], [29.3, 2670.0], [29.4, 2672.0], [29.5, 2673.0], [29.6, 2673.0], [29.7, 2674.0], [29.8, 2676.0], [29.9, 2678.0], [30.0, 2679.0], [30.1, 2679.0], [30.2, 2679.0], [30.3, 2680.0], [30.4, 2681.0], [30.5, 2683.0], [30.6, 2684.0], [30.7, 2684.0], [30.8, 2684.0], [30.9, 2686.0], [31.0, 2687.0], [31.1, 2688.0], [31.2, 2689.0], [31.3, 2691.0], [31.4, 2693.0], [31.5, 2694.0], [31.6, 2694.0], [31.7, 2696.0], [31.8, 2696.0], [31.9, 2698.0], [32.0, 2698.0], [32.1, 2699.0], [32.2, 2699.0], [32.3, 2700.0], [32.4, 2700.0], [32.5, 2701.0], [32.6, 2701.0], [32.7, 2702.0], [32.8, 2705.0], [32.9, 2705.0], [33.0, 2705.0], [33.1, 2706.0], [33.2, 2706.0], [33.3, 2706.0], [33.4, 2707.0], [33.5, 2707.0], [33.6, 2707.0], [33.7, 2708.0], [33.8, 2709.0], [33.9, 2709.0], [34.0, 2709.0], [34.1, 2711.0], [34.2, 2711.0], [34.3, 2712.0], [34.4, 2713.0], [34.5, 2715.0], [34.6, 2716.0], [34.7, 2716.0], [34.8, 2718.0], [34.9, 2719.0], [35.0, 2720.0], [35.1, 2720.0], [35.2, 2720.0], [35.3, 2722.0], [35.4, 2723.0], [35.5, 2723.0], [35.6, 2723.0], [35.7, 2724.0], [35.8, 2725.0], [35.9, 2726.0], [36.0, 2727.0], [36.1, 2727.0], [36.2, 2727.0], [36.3, 2729.0], [36.4, 2730.0], [36.5, 2731.0], [36.6, 2734.0], [36.7, 2734.0], [36.8, 2736.0], [36.9, 2736.0], [37.0, 2737.0], [37.1, 2737.0], [37.2, 2738.0], [37.3, 2740.0], [37.4, 2742.0], [37.5, 2742.0], [37.6, 2743.0], [37.7, 2745.0], [37.8, 2746.0], [37.9, 2748.0], [38.0, 2748.0], [38.1, 2750.0], [38.2, 2751.0], [38.3, 2752.0], [38.4, 2752.0], [38.5, 2754.0], [38.6, 2755.0], [38.7, 2756.0], [38.8, 2756.0], [38.9, 2758.0], [39.0, 2758.0], [39.1, 2758.0], [39.2, 2760.0], [39.3, 2760.0], [39.4, 2761.0], [39.5, 2762.0], [39.6, 2762.0], [39.7, 2762.0], [39.8, 2763.0], [39.9, 2764.0], [40.0, 2767.0], [40.1, 2769.0], [40.2, 2769.0], [40.3, 2770.0], [40.4, 2771.0], [40.5, 2771.0], [40.6, 2774.0], [40.7, 2775.0], [40.8, 2777.0], [40.9, 2782.0], [41.0, 2782.0], [41.1, 2782.0], [41.2, 2783.0], [41.3, 2783.0], [41.4, 2785.0], [41.5, 2790.0], [41.6, 2795.0], [41.7, 2797.0], [41.8, 2798.0], [41.9, 2799.0], [42.0, 2800.0], [42.1, 2801.0], [42.2, 2801.0], [42.3, 2801.0], [42.4, 2803.0], [42.5, 2804.0], [42.6, 2805.0], [42.7, 2806.0], [42.8, 2808.0], [42.9, 2809.0], [43.0, 2810.0], [43.1, 2810.0], [43.2, 2811.0], [43.3, 2812.0], [43.4, 2815.0], [43.5, 2816.0], [43.6, 2817.0], [43.7, 2819.0], [43.8, 2819.0], [43.9, 2822.0], [44.0, 2822.0], [44.1, 2823.0], [44.2, 2824.0], [44.3, 2824.0], [44.4, 2824.0], [44.5, 2825.0], [44.6, 2825.0], [44.7, 2825.0], [44.8, 2826.0], [44.9, 2827.0], [45.0, 2827.0], [45.1, 2828.0], [45.2, 2829.0], [45.3, 2829.0], [45.4, 2829.0], [45.5, 2829.0], [45.6, 2830.0], [45.7, 2830.0], [45.8, 2831.0], [45.9, 2832.0], [46.0, 2833.0], [46.1, 2834.0], [46.2, 2834.0], [46.3, 2836.0], [46.4, 2837.0], [46.5, 2838.0], [46.6, 2838.0], [46.7, 2841.0], [46.8, 2841.0], [46.9, 2842.0], [47.0, 2842.0], [47.1, 2843.0], [47.2, 2844.0], [47.3, 2846.0], [47.4, 2846.0], [47.5, 2848.0], [47.6, 2849.0], [47.7, 2850.0], [47.8, 2851.0], [47.9, 2853.0], [48.0, 2855.0], [48.1, 2857.0], [48.2, 2859.0], [48.3, 2861.0], [48.4, 2862.0], [48.5, 2866.0], [48.6, 2868.0], [48.7, 2870.0], [48.8, 2870.0], [48.9, 2871.0], [49.0, 2874.0], [49.1, 2877.0], [49.2, 2878.0], [49.3, 2879.0], [49.4, 2880.0], [49.5, 2881.0], [49.6, 2884.0], [49.7, 2884.0], [49.8, 2885.0], [49.9, 2885.0], [50.0, 2885.0], [50.1, 2886.0], [50.2, 2887.0], [50.3, 2887.0], [50.4, 2889.0], [50.5, 2889.0], [50.6, 2891.0], [50.7, 2892.0], [50.8, 2892.0], [50.9, 2892.0], [51.0, 2893.0], [51.1, 2893.0], [51.2, 2894.0], [51.3, 2896.0], [51.4, 2896.0], [51.5, 2897.0], [51.6, 2897.0], [51.7, 2898.0], [51.8, 2900.0], [51.9, 2902.0], [52.0, 2903.0], [52.1, 2904.0], [52.2, 2906.0], [52.3, 2907.0], [52.4, 2910.0], [52.5, 2911.0], [52.6, 2912.0], [52.7, 2912.0], [52.8, 2912.0], [52.9, 2913.0], [53.0, 2915.0], [53.1, 2916.0], [53.2, 2918.0], [53.3, 2919.0], [53.4, 2922.0], [53.5, 2924.0], [53.6, 2927.0], [53.7, 2929.0], [53.8, 2930.0], [53.9, 2931.0], [54.0, 2932.0], [54.1, 2934.0], [54.2, 2935.0], [54.3, 2937.0], [54.4, 2938.0], [54.5, 2939.0], [54.6, 2944.0], [54.7, 2946.0], [54.8, 2946.0], [54.9, 2947.0], [55.0, 2950.0], [55.1, 2951.0], [55.2, 2953.0], [55.3, 2954.0], [55.4, 2955.0], [55.5, 2956.0], [55.6, 2958.0], [55.7, 2959.0], [55.8, 2961.0], [55.9, 2962.0], [56.0, 2964.0], [56.1, 2964.0], [56.2, 2965.0], [56.3, 2966.0], [56.4, 2967.0], [56.5, 2969.0], [56.6, 2970.0], [56.7, 2971.0], [56.8, 2973.0], [56.9, 2975.0], [57.0, 2977.0], [57.1, 2983.0], [57.2, 2987.0], [57.3, 2991.0], [57.4, 2991.0], [57.5, 2993.0], [57.6, 2994.0], [57.7, 2995.0], [57.8, 2996.0], [57.9, 2997.0], [58.0, 2998.0], [58.1, 2999.0], [58.2, 3000.0], [58.3, 3000.0], [58.4, 3001.0], [58.5, 3002.0], [58.6, 3002.0], [58.7, 3006.0], [58.8, 3007.0], [58.9, 3008.0], [59.0, 3009.0], [59.1, 3009.0], [59.2, 3014.0], [59.3, 3014.0], [59.4, 3015.0], [59.5, 3016.0], [59.6, 3018.0], [59.7, 3020.0], [59.8, 3021.0], [59.9, 3025.0], [60.0, 3026.0], [60.1, 3028.0], [60.2, 3029.0], [60.3, 3029.0], [60.4, 3032.0], [60.5, 3032.0], [60.6, 3033.0], [60.7, 3037.0], [60.8, 3038.0], [60.9, 3043.0], [61.0, 3044.0], [61.1, 3053.0], [61.2, 3056.0], [61.3, 3058.0], [61.4, 3060.0], [61.5, 3066.0], [61.6, 3070.0], [61.7, 3071.0], [61.8, 3073.0], [61.9, 3074.0], [62.0, 3077.0], [62.1, 3078.0], [62.2, 3080.0], [62.3, 3080.0], [62.4, 3083.0], [62.5, 3085.0], [62.6, 3085.0], [62.7, 3087.0], [62.8, 3090.0], [62.9, 3092.0], [63.0, 3092.0], [63.1, 3093.0], [63.2, 3097.0], [63.3, 3098.0], [63.4, 3100.0], [63.5, 3106.0], [63.6, 3106.0], [63.7, 3112.0], [63.8, 3117.0], [63.9, 3118.0], [64.0, 3121.0], [64.1, 3122.0], [64.2, 3122.0], [64.3, 3123.0], [64.4, 3123.0], [64.5, 3124.0], [64.6, 3124.0], [64.7, 3125.0], [64.8, 3127.0], [64.9, 3129.0], [65.0, 3131.0], [65.1, 3134.0], [65.2, 3137.0], [65.3, 3141.0], [65.4, 3142.0], [65.5, 3143.0], [65.6, 3144.0], [65.7, 3145.0], [65.8, 3152.0], [65.9, 3154.0], [66.0, 3163.0], [66.1, 3168.0], [66.2, 3172.0], [66.3, 3172.0], [66.4, 3179.0], [66.5, 3180.0], [66.6, 3181.0], [66.7, 3182.0], [66.8, 3185.0], [66.9, 3188.0], [67.0, 3191.0], [67.1, 3194.0], [67.2, 3195.0], [67.3, 3197.0], [67.4, 3198.0], [67.5, 3199.0], [67.6, 3200.0], [67.7, 3202.0], [67.8, 3204.0], [67.9, 3205.0], [68.0, 3206.0], [68.1, 3207.0], [68.2, 3210.0], [68.3, 3212.0], [68.4, 3212.0], [68.5, 3215.0], [68.6, 3215.0], [68.7, 3216.0], [68.8, 3218.0], [68.9, 3220.0], [69.0, 3223.0], [69.1, 3224.0], [69.2, 3227.0], [69.3, 3228.0], [69.4, 3231.0], [69.5, 3231.0], [69.6, 3232.0], [69.7, 3232.0], [69.8, 3233.0], [69.9, 3233.0], [70.0, 3234.0], [70.1, 3234.0], [70.2, 3235.0], [70.3, 3236.0], [70.4, 3237.0], [70.5, 3237.0], [70.6, 3238.0], [70.7, 3239.0], [70.8, 3242.0], [70.9, 3242.0], [71.0, 3243.0], [71.1, 3245.0], [71.2, 3246.0], [71.3, 3247.0], [71.4, 3249.0], [71.5, 3253.0], [71.6, 3254.0], [71.7, 3259.0], [71.8, 3263.0], [71.9, 3265.0], [72.0, 3266.0], [72.1, 3270.0], [72.2, 3271.0], [72.3, 3271.0], [72.4, 3273.0], [72.5, 3275.0], [72.6, 3277.0], [72.7, 3277.0], [72.8, 3279.0], [72.9, 3281.0], [73.0, 3288.0], [73.1, 3290.0], [73.2, 3294.0], [73.3, 3300.0], [73.4, 3306.0], [73.5, 3317.0], [73.6, 3326.0], [73.7, 3332.0], [73.8, 3336.0], [73.9, 3337.0], [74.0, 3338.0], [74.1, 3340.0], [74.2, 3344.0], [74.3, 3345.0], [74.4, 3347.0], [74.5, 3352.0], [74.6, 3355.0], [74.7, 3360.0], [74.8, 3361.0], [74.9, 3363.0], [75.0, 3366.0], [75.1, 3380.0], [75.2, 3383.0], [75.3, 3384.0], [75.4, 3386.0], [75.5, 3392.0], [75.6, 3396.0], [75.7, 3404.0], [75.8, 3407.0], [75.9, 3414.0], [76.0, 3417.0], [76.1, 3421.0], [76.2, 3431.0], [76.3, 3436.0], [76.4, 3448.0], [76.5, 3466.0], [76.6, 3475.0], [76.7, 3494.0], [76.8, 3508.0], [76.9, 3510.0], [77.0, 3511.0], [77.1, 3524.0], [77.2, 3526.0], [77.3, 3531.0], [77.4, 3541.0], [77.5, 3543.0], [77.6, 3549.0], [77.7, 3572.0], [77.8, 3582.0], [77.9, 3603.0], [78.0, 3620.0], [78.1, 3627.0], [78.2, 3628.0], [78.3, 3632.0], [78.4, 3638.0], [78.5, 3645.0], [78.6, 3646.0], [78.7, 3648.0], [78.8, 3648.0], [78.9, 3650.0], [79.0, 3651.0], [79.1, 3653.0], [79.2, 3653.0], [79.3, 3654.0], [79.4, 3657.0], [79.5, 3662.0], [79.6, 3666.0], [79.7, 3669.0], [79.8, 3670.0], [79.9, 3673.0], [80.0, 3685.0], [80.1, 3691.0], [80.2, 3705.0], [80.3, 3718.0], [80.4, 3726.0], [80.5, 3731.0], [80.6, 3740.0], [80.7, 3749.0], [80.8, 3759.0], [80.9, 3761.0], [81.0, 3765.0], [81.1, 3778.0], [81.2, 3778.0], [81.3, 3782.0], [81.4, 3783.0], [81.5, 3788.0], [81.6, 3799.0], [81.7, 3804.0], [81.8, 3811.0], [81.9, 3825.0], [82.0, 3846.0], [82.1, 3861.0], [82.2, 3874.0], [82.3, 3895.0], [82.4, 3925.0], [82.5, 3956.0], [82.6, 3995.0], [82.7, 4038.0], [82.8, 4086.0], [82.9, 4096.0], [83.0, 4151.0], [83.1, 4191.0], [83.2, 4200.0], [83.3, 4226.0], [83.4, 4267.0], [83.5, 4319.0], [83.6, 4438.0], [83.7, 4461.0], [83.8, 4499.0], [83.9, 4535.0], [84.0, 4570.0], [84.1, 4595.0], [84.2, 4606.0], [84.3, 4648.0], [84.4, 4675.0], [84.5, 4688.0], [84.6, 4696.0], [84.7, 4742.0], [84.8, 4748.0], [84.9, 4758.0], [85.0, 4788.0], [85.1, 4798.0], [85.2, 4811.0], [85.3, 4834.0], [85.4, 4861.0], [85.5, 4892.0], [85.6, 4912.0], [85.7, 4915.0], [85.8, 4926.0], [85.9, 4945.0], [86.0, 4954.0], [86.1, 4967.0], [86.2, 4969.0], [86.3, 5003.0], [86.4, 5017.0], [86.5, 5027.0], [86.6, 5048.0], [86.7, 5054.0], [86.8, 5064.0], [86.9, 5134.0], [87.0, 5147.0], [87.1, 5157.0], [87.2, 5167.0], [87.3, 5188.0], [87.4, 5194.0], [87.5, 5201.0], [87.6, 5261.0], [87.7, 5280.0], [87.8, 5295.0], [87.9, 5315.0], [88.0, 5336.0], [88.1, 5363.0], [88.2, 5388.0], [88.3, 5399.0], [88.4, 5409.0], [88.5, 5460.0], [88.6, 5494.0], [88.7, 5516.0], [88.8, 5562.0], [88.9, 5601.0], [89.0, 5608.0], [89.1, 5623.0], [89.2, 5684.0], [89.3, 5704.0], [89.4, 5784.0], [89.5, 5829.0], [89.6, 5868.0], [89.7, 5977.0], [89.8, 6041.0], [89.9, 6053.0], [90.0, 6074.0], [90.1, 6148.0], [90.2, 6231.0], [90.3, 6283.0], [90.4, 6334.0], [90.5, 6436.0], [90.6, 6465.0], [90.7, 6528.0], [90.8, 6554.0], [90.9, 6586.0], [91.0, 6666.0], [91.1, 6698.0], [91.2, 6745.0], [91.3, 6810.0], [91.4, 6965.0], [91.5, 7072.0], [91.6, 7121.0], [91.7, 7145.0], [91.8, 7254.0], [91.9, 7282.0], [92.0, 7321.0], [92.1, 7442.0], [92.2, 7484.0], [92.3, 7595.0], [92.4, 7643.0], [92.5, 7674.0], [92.6, 7711.0], [92.7, 7752.0], [92.8, 8037.0], [92.9, 8071.0], [93.0, 8120.0], [93.1, 8164.0], [93.2, 8218.0], [93.3, 8445.0], [93.4, 8620.0], [93.5, 8821.0], [93.6, 8924.0], [93.7, 9223.0], [93.8, 9372.0], [93.9, 9381.0], [94.0, 9486.0], [94.1, 9499.0], [94.2, 9502.0], [94.3, 9595.0], [94.4, 9686.0], [94.5, 9851.0], [94.6, 9960.0], [94.7, 10032.0], [94.8, 10166.0], [94.9, 10220.0], [95.0, 10559.0], [95.1, 10645.0], [95.2, 10652.0], [95.3, 10676.0], [95.4, 10773.0], [95.5, 10907.0], [95.6, 11042.0], [95.7, 11186.0], [95.8, 11269.0], [95.9, 11352.0], [96.0, 11386.0], [96.1, 11654.0], [96.2, 11767.0], [96.3, 11819.0], [96.4, 11973.0], [96.5, 12101.0], [96.6, 12202.0], [96.7, 12253.0], [96.8, 12410.0], [96.9, 12504.0], [97.0, 12735.0], [97.1, 12818.0], [97.2, 12974.0], [97.3, 13052.0], [97.4, 13119.0], [97.5, 13176.0], [97.6, 13192.0], [97.7, 13197.0], [97.8, 13229.0], [97.9, 13316.0], [98.0, 13393.0], [98.1, 13419.0], [98.2, 13462.0], [98.3, 13469.0], [98.4, 13574.0], [98.5, 13611.0], [98.6, 13719.0], [98.7, 13836.0], [98.8, 13988.0], [98.9, 14089.0], [99.0, 14141.0], [99.1, 14301.0], [99.2, 14405.0], [99.3, 14483.0], [99.4, 14514.0], [99.5, 14578.0], [99.6, 14705.0], [99.7, 14772.0], [99.8, 14802.0], [99.9, 14947.0]], "isOverall": false, "label": "customer/loginByPhone", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 197.0, "series": [{"data": [[0.0, 112.0], [600.0, 2.0], [700.0, 6.0], [800.0, 1.0], [900.0, 3.0], [1100.0, 3.0], [1200.0, 1.0], [1400.0, 1.0], [1500.0, 3.0], [1600.0, 2.0], [1700.0, 3.0], [2000.0, 3.0], [2100.0, 1.0], [2400.0, 5.0], [2500.0, 11.0], [2600.0, 52.0], [2800.0, 141.0], [2700.0, 142.0], [2900.0, 41.0], [3000.0, 95.0], [3100.0, 182.0], [3200.0, 111.0], [3300.0, 18.0], [3400.0, 18.0], [3500.0, 25.0], [3700.0, 10.0], [3600.0, 24.0], [3800.0, 27.0], [3900.0, 9.0], [4000.0, 17.0], [4100.0, 13.0], [4200.0, 16.0], [4300.0, 18.0], [4400.0, 16.0], [4500.0, 10.0], [4600.0, 9.0], [4700.0, 13.0], [4800.0, 10.0], [4900.0, 4.0], [5000.0, 9.0], [5100.0, 10.0], [5200.0, 9.0], [5300.0, 9.0], [5400.0, 7.0], [5500.0, 6.0], [5600.0, 16.0], [5700.0, 17.0], [5800.0, 14.0], [5900.0, 16.0], [6000.0, 17.0], [6100.0, 14.0], [6200.0, 16.0], [6300.0, 19.0], [6400.0, 20.0], [6500.0, 14.0], [6600.0, 17.0], [6700.0, 21.0], [6800.0, 44.0], [6900.0, 44.0], [7000.0, 43.0], [7100.0, 41.0], [7200.0, 54.0], [7300.0, 28.0], [7400.0, 12.0], [7600.0, 10.0], [7500.0, 1.0], [7700.0, 8.0], [7800.0, 5.0], [7900.0, 6.0], [8000.0, 18.0], [8100.0, 7.0], [8200.0, 47.0], [8300.0, 30.0], [8400.0, 50.0], [8500.0, 44.0], [8600.0, 21.0], [8700.0, 12.0], [8800.0, 13.0], [8900.0, 6.0], [9100.0, 2.0], [9000.0, 1.0], [9200.0, 3.0], [9700.0, 1.0], [9600.0, 1.0], [9900.0, 2.0], [10000.0, 1.0], [13600.0, 1.0], [13500.0, 1.0], [100.0, 5.0], [200.0, 1.0], [300.0, 5.0], [400.0, 3.0]], "isOverall": false, "label": "/evaluation/submitEvaluation2", "isController": false}, {"data": [[0.0, 165.0], [100.0, 13.0], [200.0, 18.0], [300.0, 9.0], [400.0, 2.0], [500.0, 3.0], [600.0, 5.0], [700.0, 7.0], [900.0, 2.0], [1000.0, 2.0], [1100.0, 7.0], [1200.0, 2.0], [1300.0, 1.0], [1400.0, 2.0], [1500.0, 5.0], [1600.0, 8.0], [1700.0, 3.0], [1800.0, 10.0], [1900.0, 7.0], [2000.0, 26.0], [2100.0, 17.0], [2200.0, 8.0], [2300.0, 7.0], [2400.0, 104.0], [2500.0, 66.0], [2600.0, 146.0], [2800.0, 197.0], [2700.0, 193.0], [2900.0, 128.0], [3000.0, 103.0], [3100.0, 85.0], [3300.0, 47.0], [3200.0, 115.0], [3400.0, 22.0], [3500.0, 23.0], [3600.0, 45.0], [3700.0, 30.0], [3800.0, 14.0], [3900.0, 6.0], [4000.0, 6.0], [4300.0, 2.0], [4200.0, 6.0], [4100.0, 5.0], [4400.0, 5.0], [4600.0, 9.0], [4500.0, 7.0], [4700.0, 10.0], [4800.0, 9.0], [5100.0, 13.0], [4900.0, 14.0], [5000.0, 11.0], [5200.0, 7.0], [5300.0, 10.0], [5400.0, 6.0], [5500.0, 5.0], [5600.0, 7.0], [5700.0, 4.0], [5800.0, 4.0], [6000.0, 7.0], [5900.0, 2.0], [6100.0, 1.0], [6200.0, 4.0], [6300.0, 2.0], [6500.0, 7.0], [6400.0, 4.0], [6600.0, 3.0], [6800.0, 3.0], [6700.0, 2.0], [6900.0, 1.0], [7100.0, 4.0], [7000.0, 2.0], [7200.0, 5.0], [7400.0, 3.0], [7300.0, 2.0], [7500.0, 2.0], [7600.0, 4.0], [7700.0, 4.0], [7800.0, 1.0], [8100.0, 5.0], [8000.0, 3.0], [8400.0, 3.0], [8700.0, 1.0], [8200.0, 1.0], [8600.0, 1.0], [8800.0, 2.0], [8900.0, 2.0], [9200.0, 2.0], [9400.0, 4.0], [9600.0, 2.0], [9300.0, 3.0], [9500.0, 4.0], [9700.0, 1.0], [9900.0, 2.0], [10100.0, 2.0], [10200.0, 1.0], [10000.0, 2.0], [9800.0, 2.0], [10600.0, 6.0], [10700.0, 2.0], [10500.0, 1.0], [10400.0, 1.0], [11100.0, 1.0], [11200.0, 2.0], [11000.0, 3.0], [10800.0, 1.0], [10900.0, 1.0], [11300.0, 4.0], [11600.0, 2.0], [11700.0, 2.0], [11400.0, 1.0], [12200.0, 4.0], [11900.0, 1.0], [12100.0, 2.0], [11800.0, 2.0], [12000.0, 1.0], [12400.0, 2.0], [12600.0, 1.0], [12500.0, 1.0], [12700.0, 1.0], [12900.0, 1.0], [12800.0, 3.0], [13300.0, 4.0], [13000.0, 3.0], [13100.0, 7.0], [13200.0, 3.0], [13400.0, 6.0], [13800.0, 3.0], [13500.0, 2.0], [13600.0, 2.0], [13700.0, 1.0], [14000.0, 3.0], [14300.0, 2.0], [14100.0, 1.0], [13900.0, 1.0], [14200.0, 1.0], [14500.0, 3.0], [14400.0, 4.0], [14700.0, 4.0], [14600.0, 1.0], [14800.0, 2.0], [15000.0, 1.0], [14900.0, 1.0]], "isOverall": false, "label": "customer/loginByPhone", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 15000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 48.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3619.0, "series": [{"data": [[0.0, 333.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 48.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3619.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 157.45670995670997, "minX": 1.629784382E12, "maxY": 1000.0, "series": [{"data": [[1.629784386E12, 1000.0], [1.629784396E12, 579.2886904761909], [1.629784388E12, 1000.0], [1.629784398E12, 157.45670995670997], [1.629784392E12, 977.0175781250002], [1.62978439E12, 998.3929121725728], [1.629784384E12, 1000.0], [1.629784394E12, 914.7500000000003], [1.629784382E12, 1000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629784398E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 6.0, "minX": 2.0, "maxY": 14578.0, "series": [{"data": [[3.0, 271.3333333333333], [9.0, 8780.0], [11.0, 22.0], [13.0, 466.6666666666667], [14.0, 1887.5], [15.0, 4061.5], [20.0, 17.0], [21.0, 29.333333333333332], [22.0, 3737.0], [23.0, 31.0], [28.0, 30.0], [29.0, 3141.0], [30.0, 3586.0], [32.0, 9661.0], [34.0, 23.0], [36.0, 26.0], [39.0, 8829.0], [38.0, 10011.0], [43.0, 8078.0], [45.0, 28.0], [44.0, 2589.0], [46.0, 161.0], [50.0, 24.0], [53.0, 4057.75], [59.0, 15.0], [62.0, 2989.5], [70.0, 4299.5], [69.0, 1794.0], [73.0, 26.0], [78.0, 7581.0], [83.0, 383.0], [81.0, 13512.0], [80.0, 31.0], [86.0, 4969.0], [84.0, 33.0], [91.0, 22.0], [90.0, 237.5], [98.0, 123.0], [101.0, 13622.0], [114.0, 20.0], [116.0, 49.0], [123.0, 25.0], [122.0, 40.5], [120.0, 30.0], [127.0, 6417.0], [125.0, 29.0], [133.0, 8303.0], [130.0, 42.0], [128.0, 15.0], [143.0, 40.0], [149.0, 6292.0], [146.0, 6254.0], [145.0, 34.0], [154.0, 25.0], [153.0, 25.0], [166.0, 18.0], [165.0, 18.0], [164.0, 31.0], [162.0, 39.0], [181.0, 30.0], [198.0, 36.0], [197.0, 1803.0], [204.0, 33.0], [203.0, 7998.0], [210.0, 18.0], [216.0, 3093.0], [239.0, 18.0], [242.0, 282.0], [241.0, 14.0], [260.0, 7282.0], [283.0, 8160.0], [282.0, 7412.0], [274.0, 6962.0], [303.0, 25.5], [301.0, 2036.6666666666665], [299.0, 23.0], [297.0, 23.5], [296.0, 6077.0], [295.0, 8095.0], [292.0, 22.0], [291.0, 8119.0], [319.0, 18.0], [318.0, 4119.75], [316.0, 4014.5], [314.0, 50.0], [312.0, 9206.0], [310.0, 14.0], [307.0, 2570.0], [322.0, 20.0], [333.0, 26.0], [335.0, 14.0], [332.0, 483.0], [330.0, 9205.0], [329.0, 7153.0], [327.0, 3569.0], [325.0, 25.0], [321.0, 2692.666666666667], [320.0, 28.0], [351.0, 6352.0], [342.0, 24.0], [356.0, 158.0], [383.0, 371.0], [397.0, 731.0], [414.0, 4639.0], [403.0, 724.0], [402.0, 718.0], [401.0, 738.0], [427.0, 1189.0], [421.0, 1216.0], [441.0, 1521.0], [440.0, 1452.0], [432.0, 1189.0], [462.0, 1682.0], [460.0, 1702.0], [455.0, 1622.0], [449.0, 1527.5], [471.0, 4359.666666666667], [470.0, 1730.0], [510.0, 2441.0], [504.0, 2470.0], [531.0, 7347.0], [527.0, 5329.5], [525.0, 2457.0], [627.0, 3379.6], [699.0, 2951.0], [674.0, 2924.0], [733.0, 3001.0], [755.0, 3066.0], [750.0, 3012.0], [742.0, 3292.0], [797.0, 3101.0], [792.0, 3119.0], [791.0, 3091.0], [784.0, 3128.0], [776.0, 6110.0], [773.0, 3100.0], [771.0, 3119.0], [768.0, 5154.0], [811.0, 3239.0], [862.0, 3250.0], [858.0, 3350.5], [856.0, 3274.0], [855.0, 3266.6666666666665], [854.0, 3281.0], [843.0, 3292.0], [842.0, 3322.0], [841.0, 3229.0], [893.0, 3286.0], [895.0, 3085.125], [892.0, 3346.3333333333335], [891.0, 3294.0], [889.0, 3294.0], [876.0, 3301.0], [864.0, 3250.0], [887.0, 3299.0], [885.0, 3295.0], [882.0, 3323.0], [881.0, 3285.0], [926.0, 3224.0], [927.0, 3242.5], [912.0, 3253.5], [914.0, 3183.0], [913.0, 3218.1666666666665], [925.0, 3266.375], [924.0, 3205.0], [923.0, 3207.0], [922.0, 3206.0], [921.0, 3213.0], [902.0, 3253.0], [901.0, 3242.0], [900.0, 3248.5], [899.0, 3253.0], [898.0, 5979.0], [910.0, 3281.0], [908.0, 3262.0], [905.0, 3243.5], [918.0, 3220.0], [917.0, 3195.0], [956.0, 2911.7999999999997], [959.0, 2875.0], [944.0, 3411.2580645161293], [946.0, 3155.3414634146347], [945.0, 3129.1428571428573], [948.0, 3174.0], [947.0, 3144.375], [958.0, 2865.0], [957.0, 2895.3333333333335], [955.0, 3285.9032258064512], [954.0, 3028.9090909090905], [953.0, 3066.75], [952.0, 3144.173913043478], [942.0, 3154.0], [929.0, 3242.5], [932.0, 3202.0], [931.0, 3243.6666666666665], [934.0, 3183.0], [933.0, 3221.0], [941.0, 3160.4615384615386], [940.0, 3157.0], [937.0, 3158.0], [950.0, 3151.909090909091], [949.0, 3144.5], [985.0, 2578.0], [989.0, 2723.7000000000003], [991.0, 2742.5], [977.0, 2693.0], [976.0, 2717.714285714286], [979.0, 2688.0], [978.0, 2718.5], [988.0, 2700.142857142857], [987.0, 2626.0], [986.0, 2609.0], [975.0, 3047.6], [961.0, 2852.0000000000005], [960.0, 2858.5714285714284], [963.0, 2831.608695652174], [962.0, 2842.5000000000005], [965.0, 2793.678571428571], [964.0, 2803.4], [967.0, 2773.0], [966.0, 2770.5], [974.0, 2728.25], [973.0, 2708.0], [972.0, 2764.8888888888887], [971.0, 2760.2777777777783], [970.0, 2768.625], [969.0, 2769.3333333333335], [983.0, 2616.3125], [982.0, 2692.0], [981.0, 2722.142857142857], [980.0, 2676.6666666666665], [1000.0, 6256.737354085592], [999.0, 1816.5], [998.0, 2625.03076923077], [997.0, 2577.3], [996.0, 3140.714285714286], [994.0, 2826.0], [993.0, 2789.25], [992.0, 2783.0]], "isOverall": false, "label": "/evaluation/submitEvaluation2", "isController": false}, {"data": [[904.9490000000013, 4626.482999999986]], "isOverall": false, "label": "/evaluation/submitEvaluation2-Aggregated", "isController": false}, {"data": [[2.0, 8.0], [3.0, 7.0], [4.0, 74.0], [5.0, 7.0], [6.0, 116.0], [7.0, 103.0], [8.0, 14.0], [9.0, 8.0], [11.0, 11.5], [12.0, 12.0], [13.0, 13.0], [14.0, 10.0], [15.0, 8075.333333333334], [16.0, 92.0], [17.0, 7243.0], [18.0, 6012.5], [19.0, 13.0], [20.0, 10.0], [21.0, 11.0], [22.0, 7405.0], [23.0, 8400.666666666668], [24.0, 5521.0], [25.0, 28.0], [26.0, 5404.0], [27.0, 6970.5], [28.0, 9131.75], [29.0, 10813.0], [30.0, 19.0], [31.0, 6230.0], [33.0, 11.0], [32.0, 287.0], [35.0, 247.0], [34.0, 9636.666666666668], [37.0, 28.0], [36.0, 13.0], [39.0, 31.0], [38.0, 32.0], [41.0, 24.0], [40.0, 6064.5], [43.0, 19.0], [42.0, 9709.5], [45.0, 258.0], [44.0, 11.0], [47.0, 28.0], [46.0, 283.0], [49.0, 10419.75], [48.0, 7540.5], [51.0, 13.0], [50.0, 16.0], [53.0, 71.0], [52.0, 11.0], [55.0, 635.0], [54.0, 270.0], [56.0, 56.0], [59.0, 18.0], [58.0, 5532.666666666667], [61.0, 34.0], [60.0, 4763.0], [63.0, 8609.5], [62.0, 4767.5], [67.0, 5961.5], [66.0, 26.0], [65.0, 139.5], [71.0, 12.0], [70.0, 10293.0], [69.0, 3009.5], [75.0, 9.0], [74.0, 7263.5], [73.0, 597.0], [72.0, 10654.0], [78.0, 752.0], [77.0, 6953.5], [76.0, 28.0], [83.0, 4200.0], [82.0, 15.0], [81.0, 25.0], [80.0, 3796.0], [87.0, 10.0], [86.0, 5838.5], [85.0, 336.0], [84.0, 544.0], [91.0, 8374.666666666666], [90.0, 678.0], [89.0, 7263.5], [88.0, 8.0], [95.0, 2939.0], [94.0, 9.0], [93.0, 7578.0], [92.0, 3720.0], [99.0, 4941.0], [98.0, 9361.75], [97.0, 12.0], [96.0, 20.0], [103.0, 15.0], [102.0, 16.0], [101.0, 8779.0], [100.0, 8731.75], [106.0, 13.0], [104.0, 374.0], [115.0, 5562.0], [114.0, 9223.0], [123.0, 13583.333333333334], [122.0, 9761.333333333332], [120.0, 35.0], [127.0, 12.0], [126.0, 11.0], [125.0, 12410.0], [124.0, 13.0], [135.0, 475.0], [134.0, 2724.0], [132.0, 5209.0], [131.0, 12.0], [130.0, 4934.5], [128.0, 11712.5], [143.0, 11.0], [142.0, 3868.0], [141.0, 11.0], [140.0, 40.0], [139.0, 13176.0], [138.0, 3879.5], [151.0, 11.0], [145.0, 8.0], [158.0, 22.0], [155.0, 5610.0], [154.0, 10086.5], [166.0, 5603.0], [164.0, 6104.5], [163.0, 6718.0], [162.0, 14301.0], [161.0, 27.0], [160.0, 10.0], [191.0, 21.0], [199.0, 6148.0], [198.0, 11681.0], [197.0, 13951.0], [196.0, 5415.0], [195.0, 4891.5], [194.0, 6736.5], [192.0, 24.0], [205.0, 20.0], [204.0, 6609.0], [203.0, 14578.0], [202.0, 22.0], [201.0, 9.5], [215.0, 13134.0], [213.0, 17.0], [216.0, 13.0], [243.0, 8.0], [241.0, 12800.5], [262.0, 7884.666666666667], [260.0, 4826.5], [283.0, 282.0], [282.0, 1829.5], [280.0, 13584.0], [302.0, 3139.0], [303.0, 7819.0], [301.0, 6534.5], [300.0, 10538.0], [299.0, 14.0], [298.0, 4759.0], [297.0, 9678.5], [296.0, 15.0], [295.0, 14.0], [294.0, 10.0], [293.0, 8.0], [292.0, 19.0], [318.0, 14.0], [319.0, 6138.0], [317.0, 3761.0], [316.0, 15.0], [315.0, 34.0], [314.0, 28.0], [313.0, 13.0], [312.0, 9188.333333333332], [311.0, 6426.5], [305.0, 17.0], [304.0, 23.0], [307.0, 7519.666666666666], [306.0, 9295.0], [310.0, 6632.5], [309.0, 8.0], [308.0, 5386.0], [333.0, 11.0], [335.0, 9381.0], [332.0, 3386.0], [323.0, 9.0], [322.0, 11031.25], [321.0, 8792.5], [320.0, 6297.333333333334], [331.0, 14.0], [330.0, 13.0], [329.0, 6672.333333333334], [328.0, 6333.5], [327.0, 6504.5], [326.0, 3384.0], [325.0, 3388.0], [324.0, 4720.0], [351.0, 89.0], [345.0, 7.0], [343.0, 12933.5], [337.0, 7.0], [364.0, 132.0], [366.0, 205.0], [367.0, 159.0], [365.0, 132.0], [362.0, 120.0], [360.0, 115.0], [359.0, 119.0], [354.0, 12807.0], [353.0, 6.0], [358.0, 115.0], [357.0, 2455.0], [382.0, 276.0], [383.0, 277.0], [381.0, 270.0], [380.0, 313.0], [379.0, 265.0], [378.0, 267.0], [376.0, 239.0], [375.0, 294.0], [371.0, 173.0], [370.0, 170.0], [374.0, 203.0], [373.0, 201.0], [372.0, 4297.0], [398.0, 669.0], [397.0, 663.0], [396.0, 363.0], [394.0, 736.0], [393.0, 365.0], [392.0, 368.0], [391.0, 375.0], [386.0, 368.0], [414.0, 10652.0], [412.0, 8118.0], [405.0, 716.0], [401.0, 718.0], [400.0, 726.0], [429.0, 1173.0], [427.0, 1112.0], [425.0, 1104.0], [423.0, 3549.0], [422.0, 1086.0], [421.0, 1100.0], [420.0, 993.0], [419.0, 998.0], [446.0, 2747.0], [444.0, 2782.0], [441.0, 2806.0], [439.0, 1435.0], [438.0, 1371.0], [437.0, 1540.0], [434.0, 1176.0], [462.0, 2637.0], [463.0, 1658.0], [460.0, 1647.0], [451.0, 1656.0], [450.0, 1645.0], [459.0, 1680.0], [458.0, 1628.0], [457.0, 1606.0], [456.0, 2116.5], [454.0, 1548.0], [453.0, 1518.0], [478.0, 2406.0], [479.0, 2415.0], [477.0, 2460.0], [476.0, 2409.0], [475.0, 2434.5], [474.0, 2408.0], [473.0, 2408.0], [472.0, 2432.0], [471.0, 2265.363636363637], [466.0, 2605.0], [464.0, 2771.0], [470.0, 2596.875], [469.0, 2748.0], [468.0, 2756.0], [494.0, 2420.0], [495.0, 2432.0], [493.0, 2420.0], [492.0, 2421.0], [491.0, 2420.0], [490.0, 2482.0], [489.0, 2422.0], [488.0, 2453.0], [487.0, 2418.0], [481.0, 2477.0], [480.0, 2408.0], [483.0, 2469.0], [482.0, 2408.0], [486.0, 2409.5], [484.0, 2414.0], [511.0, 2433.0], [509.0, 2476.0], [499.0, 2430.0], [498.0, 2428.0], [497.0, 2462.0], [496.0, 2441.0], [507.0, 2431.0], [506.0, 2435.0], [505.0, 2429.0], [504.0, 2429.0], [503.0, 2459.0], [502.0, 2432.0], [501.0, 2432.0], [518.0, 2427.0], [541.0, 2534.0], [543.0, 2523.0], [540.0, 2514.0], [539.0, 2501.0], [535.0, 2488.0], [533.0, 2499.0], [531.0, 4732.650000000001], [528.0, 5537.0], [527.0, 6673.5], [512.0, 2478.0], [515.0, 2429.0], [513.0, 2429.0], [517.0, 2435.0], [516.0, 2464.0], [519.0, 2433.0], [526.0, 2452.0], [524.0, 2445.0], [523.0, 2437.0], [522.0, 2435.0], [521.0, 2464.0], [520.0, 2438.0], [569.0, 2502.0], [573.0, 2487.0], [575.0, 2516.3333333333335], [560.0, 2474.0], [562.0, 2564.0], [561.0, 2487.0], [564.0, 2480.0], [563.0, 2569.0], [572.0, 2487.0], [571.0, 2565.0], [570.0, 2571.0], [568.0, 2491.0], [551.0, 2472.0], [550.0, 2470.0], [549.0, 2527.0], [548.0, 2472.0], [547.0, 2469.0], [546.0, 2545.0], [545.0, 2465.0], [544.0, 2464.0], [559.0, 2475.0], [557.0, 2472.0], [556.0, 2483.0], [555.0, 2547.0], [554.0, 2474.0], [553.0, 2473.0], [552.0, 2536.0], [567.0, 2487.0], [566.0, 2524.0], [604.0, 2634.0], [607.0, 2588.0], [592.0, 2557.0], [594.0, 2559.0], [593.0, 2602.0], [596.0, 2646.0], [595.0, 2563.0], [606.0, 2636.0], [605.0, 2588.0], [603.0, 2573.0], [602.0, 2615.0], [601.0, 2645.0], [600.0, 2565.0], [591.0, 2546.0], [577.0, 2525.0], [576.0, 2503.0], [579.0, 2529.0], [578.0, 2560.0], [581.0, 2529.0], [580.0, 2577.0], [583.0, 2529.0], [582.0, 2580.0], [590.0, 2590.0], [589.0, 2545.0], [588.0, 2596.0], [587.0, 2587.0], [586.0, 11973.0], [585.0, 2582.0], [584.0, 2535.0], [598.0, 2558.0], [597.0, 2603.0], [628.0, 2870.0], [638.0, 2965.0], [639.0, 2907.0], [627.0, 2990.2053571428573], [636.0, 2960.0], [634.0, 2952.0], [633.0, 2881.0], [618.0, 2632.0], [608.0, 2633.0], [610.0, 2638.0], [609.0, 2585.0], [612.0, 2613.0], [611.0, 2575.0], [614.0, 2625.0], [631.0, 2885.0], [630.0, 2880.0], [629.0, 2871.0], [665.0, 2889.0], [670.0, 2915.0], [671.0, 2898.0], [657.0, 2891.0], [656.0, 2893.0], [659.0, 2889.0], [658.0, 2924.0], [661.0, 2893.0], [660.0, 2934.0], [669.0, 2890.5], [667.0, 2880.0], [666.0, 2887.0], [664.0, 2886.0], [647.0, 2881.0], [646.0, 3171.0], [645.0, 2884.0], [644.0, 2907.0], [643.0, 2891.0], [641.0, 2901.0], [640.0, 2919.0], [655.0, 2939.0], [654.0, 2924.0], [653.0, 3112.0], [652.0, 2902.0], [651.0, 3154.0], [650.0, 2885.0], [649.0, 2879.0], [648.0, 2896.0], [663.0, 2889.0], [662.0, 2892.0], [696.0, 2912.0], [701.0, 2971.0], [702.0, 2946.0], [689.0, 2900.0], [688.0, 2927.0], [691.0, 2918.0], [690.0, 2898.0], [700.0, 2932.0], [699.0, 2921.5], [697.0, 2911.0], [687.0, 2903.0], [672.0, 2881.0], [674.0, 2887.0], [673.0, 2912.0], [677.0, 2885.0], [676.0, 2899.5], [679.0, 2918.0], [678.0, 2887.0], [686.0, 2944.0], [685.0, 2902.0], [684.0, 2928.5], [682.0, 2908.0], [680.0, 2892.0], [695.0, 2903.0], [694.0, 2915.0], [693.0, 2906.0], [692.0, 2906.0], [730.0, 2991.0], [734.0, 3032.0], [735.0, 7033.5], [721.0, 2958.0], [720.0, 2955.0], [724.0, 2985.5], [722.0, 2962.0], [733.0, 3038.0], [732.0, 7051.5], [731.0, 3019.0], [728.0, 2997.5], [711.0, 2976.0], [710.0, 2970.0], [709.0, 2951.0], [708.0, 4657.666666666667], [706.0, 2961.0], [705.0, 2973.0], [704.0, 2936.0], [719.0, 2980.6666666666665], [716.0, 2976.0], [714.0, 3053.0], [713.0, 2993.0], [712.0, 2986.0], [726.0, 2966.0], [725.0, 3000.0], [761.0, 3002.0], [766.0, 2994.0], [767.0, 2995.0], [753.0, 2990.0], [752.0, 3011.5], [755.0, 3002.0], [754.0, 2995.0], [757.0, 3035.0], [756.0, 2991.0], [765.0, 2996.0], [764.0, 3000.0], [763.0, 3009.5], [760.0, 2999.0], [743.0, 3026.0], [742.0, 3179.0], [741.0, 5043.0], [740.0, 2993.0], [739.0, 3000.0], [738.0, 3026.0], [737.0, 3015.0], [736.0, 3008.0], [750.0, 3044.0], [749.0, 3009.0], [748.0, 3009.0], [747.0, 3017.0], [746.0, 2998.0], [745.0, 2998.0], [744.0, 3020.0], [759.0, 3305.0], [758.0, 2999.0], [793.0, 3118.0], [798.0, 7163.0], [799.0, 3135.0], [785.0, 3078.0], [784.0, 3066.0], [787.0, 3123.0], [786.0, 3029.0], [789.0, 2977.0], [788.0, 3080.0], [797.0, 3086.0], [795.0, 7197.5], [794.0, 3082.0], [792.0, 3080.0], [775.0, 3090.0], [774.0, 3021.0], [773.0, 3011.0], [772.0, 3029.0], [771.0, 6350.0], [770.0, 3016.0], [769.0, 3009.0], [768.0, 3006.0], [783.0, 3074.0], [782.0, 3119.0], [781.0, 3056.0], [780.0, 2994.0], [779.0, 3117.0], [778.0, 3031.0], [777.0, 3060.0], [776.0, 3070.0], [791.0, 3078.0], [790.0, 3124.0], [824.0, 3265.0], [828.0, 3205.0], [831.0, 3273.0], [817.0, 3242.0], [816.0, 3085.0], [820.0, 3095.5], [818.0, 3253.0], [830.0, 3204.0], [829.0, 3288.0], [827.0, 3207.0], [826.0, 3077.0], [825.0, 3259.0], [815.0, 3092.0], [801.0, 3131.5], [803.0, 3106.0], [802.0, 3103.0], [805.0, 3122.0], [804.0, 3122.0], [807.0, 3107.0], [806.0, 7483.333333333334], [814.0, 3237.0], [813.0, 3083.0], [812.0, 3234.0], [811.0, 3121.0], [810.0, 3100.0], [809.0, 5666.5], [808.0, 3118.0], [823.0, 3090.0], [822.0, 3173.5], [858.0, 3318.0], [862.0, 3332.0], [863.0, 3245.0], [849.0, 3243.0], [848.0, 3247.0], [851.0, 3275.0], [850.0, 3279.0], [853.0, 3250.0], [852.0, 3247.0], [861.0, 3326.0], [860.0, 3254.0], [859.0, 3383.0], [856.0, 3277.0], [839.0, 3215.0], [838.0, 3287.0], [837.0, 3211.0], [836.0, 3281.0], [835.0, 3212.0], [834.0, 3306.0], [833.0, 3208.0], [832.0, 3206.0], [847.0, 3234.0], [846.0, 3235.0], [845.0, 3290.0], [844.0, 3233.0], [843.0, 3237.0], [842.0, 3288.0], [841.0, 3294.0], [840.0, 3215.0], [855.0, 3246.0], [854.0, 3271.0], [892.0, 3270.0], [895.0, 8358.5], [881.0, 3218.0], [880.0, 3221.0], [883.0, 3231.0], [882.0, 3239.0], [885.0, 3263.0], [884.0, 3235.0], [894.0, 3277.0], [893.0, 3276.0], [891.0, 3271.0], [890.0, 3247.0], [889.0, 3245.0], [888.0, 3270.0], [879.0, 3257.0], [865.0, 3242.0], [864.0, 3337.0], [867.0, 3236.0], [866.0, 3240.0], [869.0, 3238.0], [868.0, 3236.0], [871.0, 3236.0], [870.0, 3238.0], [878.0, 3215.0], [877.0, 3217.0], [876.0, 3223.0], [875.0, 3233.0], [874.0, 3231.0], [873.0, 3225.0], [872.0, 3232.0], [887.0, 3249.0], [886.0, 3237.0], [924.0, 3180.0], [927.0, 3197.0], [913.0, 3202.0], [912.0, 3237.0], [915.0, 3172.0], [914.0, 3223.0], [917.0, 3168.0], [916.0, 3215.0], [926.0, 3188.0], [925.0, 3210.0], [923.0, 3181.0], [922.0, 3182.0], [921.0, 3198.0], [920.0, 3194.0], [911.0, 3201.0], [897.0, 3233.0], [896.0, 3509.0], [899.0, 3233.0], [898.0, 7517.75], [901.0, 3243.0], [900.0, 5186.5], [903.0, 3234.0], [902.0, 3231.0], [910.0, 3204.0], [909.0, 3243.0], [908.0, 3206.0], [907.0, 3220.0], [906.0, 3219.0], [905.0, 3228.0], [904.0, 3233.0], [919.0, 3181.0], [918.0, 3163.0], [956.0, 25.0], [959.0, 2848.0], [945.0, 3122.0], [944.0, 6751.666666666667], [947.0, 3124.0], [946.0, 5808.0], [949.0, 3121.0], [948.0, 3141.0], [958.0, 2874.0], [957.0, 27.0], [955.0, 7010.666666666666], [954.0, 3033.0], [953.0, 5942.0], [952.0, 3129.0], [943.0, 3145.0], [928.0, 3215.0], [931.0, 3227.5], [929.0, 3183.0], [933.0, 3195.0], [932.0, 3200.0], [935.0, 3194.0], [934.0, 3195.0], [942.0, 3152.0], [941.0, 3154.0], [940.0, 3143.0], [939.0, 3144.0], [938.0, 3180.0], [937.0, 3185.0], [936.0, 3155.0], [951.0, 3097.0], [950.0, 3127.0], [988.0, 3534.5], [991.0, 5434.0], [977.0, 5600.333333333333], [976.0, 3767.3333333333335], [979.0, 4741.333333333333], [978.0, 5208.0], [981.0, 2774.0], [980.0, 3212.0], [990.0, 2720.0], [989.0, 2963.0], [987.0, 2603.0], [986.0, 2583.0], [985.0, 5186.5], [984.0, 2558.0], [975.0, 5144.0], [961.0, 2846.0], [960.0, 2835.0], [963.0, 5634.5], [962.0, 2842.0], [965.0, 2782.0], [964.0, 5415.5], [967.0, 5227.5], [966.0, 2770.0], [974.0, 16.0], [973.0, 2709.0], [972.0, 5101.666666666667], [971.0, 2736.0], [970.0, 5439.0], [969.0, 2769.0], [968.0, 2742.0], [983.0, 3413.0], [982.0, 2712.0], [1000.0, 3588.8351648351663], [999.0, 3456.6666666666665], [998.0, 3264.343621399178], [997.0, 3002.2499999999995], [996.0, 3590.55], [995.0, 2772.5], [994.0, 2762.0], [993.0, 3090.0], [992.0, 2762.0]], "isOverall": false, "label": "customer/loginByPhone", "isController": false}, {"data": [[730.4944999999994, 3472.158000000006]], "isOverall": false, "label": "customer/loginByPhone-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3766.5, "minX": 1.629784382E12, "maxY": 86706.0, "series": [{"data": [[1.629784386E12, 40309.5], [1.629784396E12, 80728.5], [1.629784388E12, 65530.5], [1.629784398E12, 55674.0], [1.629784392E12, 61989.0], [1.62978439E12, 77973.0], [1.629784384E12, 34114.5], [1.629784394E12, 62914.5], [1.629784382E12, 3766.5]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.629784386E12, 44540.0], [1.629784396E12, 86706.0], [1.629784388E12, 71960.5], [1.629784398E12, 60303.0], [1.629784392E12, 67988.0], [1.62978439E12, 83768.5], [1.629784384E12, 37686.5], [1.629784394E12, 68878.0], [1.629784382E12, 4169.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629784398E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 552.2222222222223, "minX": 1.629784382E12, "maxY": 7715.132678132679, "series": [{"data": [[1.629784386E12, 6575.105431309903], [1.629784396E12, 3111.152542372882], [1.629784388E12, 7715.132678132679], [1.629784398E12, 2449.4807692307686], [1.629784392E12, 2813.1065573770475], [1.62978439E12, 2584.6290322580644], [1.629784384E12, 4185.011406844106], [1.629784394E12, 3214.8600583090383], [1.629784382E12, 3097.516129032257]], "isOverall": false, "label": "/evaluation/submitEvaluation2", "isController": false}, {"data": [[1.629784386E12, 1153.4210526315787], [1.629784396E12, 2763.419249592167], [1.629784388E12, 4289.059701492539], [1.629784398E12, 4833.692810457518], [1.629784392E12, 3625.5410958904113], [1.62978439E12, 3343.555366269169], [1.629784384E12, 552.2222222222223], [1.629784394E12, 3800.254237288136]], "isOverall": false, "label": "customer/loginByPhone", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629784398E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 552.1666666666667, "minX": 1.629784382E12, "maxY": 7715.115479115481, "series": [{"data": [[1.629784386E12, 6575.070287539941], [1.629784396E12, 3111.135593220339], [1.629784388E12, 7715.115479115481], [1.629784398E12, 2449.4679487179483], [1.629784392E12, 2813.0928961748637], [1.62978439E12, 2584.6129032258063], [1.629784384E12, 4184.96577946768], [1.629784394E12, 3214.8367346938758], [1.629784382E12, 3097.2580645161293]], "isOverall": false, "label": "/evaluation/submitEvaluation2", "isController": false}, {"data": [[1.629784386E12, 1153.4210526315787], [1.629784396E12, 2763.404567699837], [1.629784388E12, 4289.044776119406], [1.629784398E12, 4833.679738562091], [1.629784392E12, 3625.506849315069], [1.62978439E12, 3343.53492333901], [1.629784384E12, 552.1666666666667], [1.629784394E12, 3800.2429378531065]], "isOverall": false, "label": "customer/loginByPhone", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629784398E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.629784382E12, "maxY": 1070.271565495208, "series": [{"data": [[1.629784386E12, 1070.271565495208], [1.629784396E12, 0.0], [1.629784388E12, 889.3710073710075], [1.629784398E12, 0.0], [1.629784392E12, 0.0], [1.62978439E12, 0.0], [1.629784384E12, 563.8707224334604], [1.629784394E12, 0.0], [1.629784382E12, 258.5161290322581]], "isOverall": false, "label": "/evaluation/submitEvaluation2", "isController": false}, {"data": [[1.629784386E12, 0.0], [1.629784396E12, 0.0], [1.629784388E12, 0.0], [1.629784398E12, 0.0], [1.629784392E12, 0.0], [1.62978439E12, 0.0], [1.629784384E12, 0.0], [1.629784394E12, 0.0]], "isOverall": false, "label": "customer/loginByPhone", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629784398E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 6.0, "minX": 1.629784382E12, "maxY": 15098.0, "series": [{"data": [[1.629784386E12, 7651.0], [1.629784396E12, 12974.0], [1.629784388E12, 9122.0], [1.629784398E12, 15098.0], [1.629784392E12, 8938.0], [1.62978439E12, 7752.0], [1.629784384E12, 5438.0], [1.629784394E12, 11654.0], [1.629784382E12, 3386.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.629784386E12, 7322.5], [1.629784396E12, 3064.2000000000003], [1.629784388E12, 8591.2], [1.629784398E12, 13228.1], [1.629784392E12, 3037.7], [1.62978439E12, 5136.0], [1.629784384E12, 5087.6], [1.629784394E12, 3290.0], [1.629784382E12, 3353.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.629784386E12, 7638.04], [1.629784396E12, 11535.729999999989], [1.629784388E12, 8935.18], [1.629784398E12, 14799.48], [1.629784392E12, 8425.230000000001], [1.62978439E12, 7332.0], [1.629784384E12, 5417.8], [1.629784394E12, 10668.699999999999], [1.629784382E12, 3386.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.629784386E12, 7386.5], [1.629784396E12, 4331.300000000002], [1.629784388E12, 8758.699999999999], [1.629784398E12, 14038.999999999998], [1.629784392E12, 5234.799999999972], [1.62978439E12, 6178.5], [1.629784384E12, 5244.0], [1.629784394E12, 3652.999999999999], [1.629784382E12, 3374.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.629784386E12, 10.0], [1.629784396E12, 132.0], [1.629784388E12, 13.0], [1.629784398E12, 6.0], [1.629784392E12, 16.0], [1.62978439E12, 7.0], [1.629784384E12, 15.0], [1.629784394E12, 31.0], [1.629784382E12, 2422.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.629784386E12, 6521.5], [1.629784396E12, 2636.5], [1.629784388E12, 7255.0], [1.629784398E12, 115.0], [1.629784392E12, 2817.5], [1.62978439E12, 2912.0], [1.629784384E12, 4070.0], [1.629784394E12, 3176.0], [1.629784382E12, 3122.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629784398E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 39.0, "minX": 31.0, "maxY": 7275.0, "series": [{"data": [[136.0, 3681.0], [145.0, 4580.0], [144.0, 5965.0], [188.0, 6987.5], [247.0, 2835.0], [267.0, 5315.0], [265.0, 2783.0], [256.0, 3135.0], [264.0, 3239.5], [274.0, 7275.0], [307.0, 2734.0], [321.0, 2421.0], [342.0, 3173.0], [351.0, 2894.0], [353.0, 282.0], [109.0, 39.0], [31.0, 3122.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 353.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 39.0, "minX": 31.0, "maxY": 7275.0, "series": [{"data": [[136.0, 3680.5], [145.0, 4580.0], [144.0, 5965.0], [188.0, 6987.5], [247.0, 2835.0], [267.0, 5315.0], [265.0, 2783.0], [256.0, 3135.0], [264.0, 3239.5], [274.0, 7275.0], [307.0, 2734.0], [321.0, 2421.0], [342.0, 3173.0], [351.0, 2894.0], [353.0, 282.0], [109.0, 39.0], [31.0, 3122.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 353.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 15.5, "minX": 1.62978438E12, "maxY": 500.0, "series": [{"data": [[1.629784386E12, 166.0], [1.629784396E12, 39.0], [1.629784388E12, 270.5], [1.629784398E12, 129.5], [1.629784392E12, 234.5], [1.62978438E12, 500.0], [1.62978439E12, 323.5], [1.629784384E12, 140.5], [1.629784394E12, 181.0], [1.629784382E12, 15.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629784398E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 15.5, "minX": 1.629784382E12, "maxY": 336.0, "series": [{"data": [[1.629784386E12, 166.0], [1.629784396E12, 336.0], [1.629784388E12, 270.5], [1.629784398E12, 231.0], [1.629784392E12, 256.0], [1.62978439E12, 324.5], [1.629784384E12, 140.5], [1.629784394E12, 260.0], [1.629784382E12, 15.5]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629784398E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.629784382E12, "maxY": 306.5, "series": [{"data": [[1.629784386E12, 9.5], [1.629784396E12, 306.5], [1.629784388E12, 67.0], [1.629784398E12, 153.0], [1.629784392E12, 73.0], [1.62978439E12, 293.5], [1.629784384E12, 9.0], [1.629784394E12, 88.5]], "isOverall": false, "label": "customer/loginByPhone-success", "isController": false}, {"data": [[1.629784386E12, 156.5], [1.629784396E12, 29.5], [1.629784388E12, 203.5], [1.629784398E12, 78.0], [1.629784392E12, 183.0], [1.62978439E12, 31.0], [1.629784384E12, 131.5], [1.629784394E12, 171.5], [1.629784382E12, 15.5]], "isOverall": false, "label": "/evaluation/submitEvaluation2-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629784398E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 15.5, "minX": 1.629784382E12, "maxY": 336.0, "series": [{"data": [[1.629784386E12, 166.0], [1.629784396E12, 336.0], [1.629784388E12, 270.5], [1.629784398E12, 231.0], [1.629784392E12, 256.0], [1.62978439E12, 324.5], [1.629784384E12, 140.5], [1.629784394E12, 260.0], [1.629784382E12, 15.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629784398E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

