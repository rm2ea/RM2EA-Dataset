/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 5621.0, "series": [{"data": [[0.0, 2.0], [0.1, 2.0], [0.2, 2.0], [0.3, 2.0], [0.4, 3.0], [0.5, 3.0], [0.6, 3.0], [0.7, 4.0], [0.8, 4.0], [0.9, 4.0], [1.0, 5.0], [1.1, 24.0], [1.2, 32.0], [1.3, 91.0], [1.4, 143.0], [1.5, 196.0], [1.6, 220.0], [1.7, 254.0], [1.8, 262.0], [1.9, 310.0], [2.0, 332.0], [2.1, 353.0], [2.2, 364.0], [2.3, 373.0], [2.4, 385.0], [2.5, 398.0], [2.6, 400.0], [2.7, 406.0], [2.8, 410.0], [2.9, 429.0], [3.0, 438.0], [3.1, 444.0], [3.2, 453.0], [3.3, 456.0], [3.4, 469.0], [3.5, 476.0], [3.6, 482.0], [3.7, 496.0], [3.8, 504.0], [3.9, 511.0], [4.0, 521.0], [4.1, 527.0], [4.2, 538.0], [4.3, 546.0], [4.4, 547.0], [4.5, 555.0], [4.6, 564.0], [4.7, 592.0], [4.8, 601.0], [4.9, 631.0], [5.0, 638.0], [5.1, 649.0], [5.2, 663.0], [5.3, 670.0], [5.4, 696.0], [5.5, 702.0], [5.6, 709.0], [5.7, 744.0], [5.8, 863.0], [5.9, 874.0], [6.0, 907.0], [6.1, 908.0], [6.2, 931.0], [6.3, 977.0], [6.4, 979.0], [6.5, 983.0], [6.6, 991.0], [6.7, 1007.0], [6.8, 1062.0], [6.9, 1084.0], [7.0, 1113.0], [7.1, 1153.0], [7.2, 1157.0], [7.3, 1160.0], [7.4, 1164.0], [7.5, 1175.0], [7.6, 1184.0], [7.7, 1196.0], [7.8, 1198.0], [7.9, 1211.0], [8.0, 1236.0], [8.1, 1246.0], [8.2, 1254.0], [8.3, 1258.0], [8.4, 1288.0], [8.5, 1299.0], [8.6, 1316.0], [8.7, 1337.0], [8.8, 1340.0], [8.9, 1354.0], [9.0, 1356.0], [9.1, 1357.0], [9.2, 1359.0], [9.3, 1370.0], [9.4, 1382.0], [9.5, 1398.0], [9.6, 1402.0], [9.7, 1404.0], [9.8, 1408.0], [9.9, 1411.0], [10.0, 1412.0], [10.1, 1415.0], [10.2, 1417.0], [10.3, 1420.0], [10.4, 1421.0], [10.5, 1426.0], [10.6, 1440.0], [10.7, 1456.0], [10.8, 1471.0], [10.9, 1473.0], [11.0, 1476.0], [11.1, 1485.0], [11.2, 1493.0], [11.3, 1497.0], [11.4, 1501.0], [11.5, 1505.0], [11.6, 1517.0], [11.7, 1519.0], [11.8, 1519.0], [11.9, 1525.0], [12.0, 1526.0], [12.1, 1527.0], [12.2, 1530.0], [12.3, 1532.0], [12.4, 1533.0], [12.5, 1536.0], [12.6, 1540.0], [12.7, 1543.0], [12.8, 1548.0], [12.9, 1556.0], [13.0, 1558.0], [13.1, 1572.0], [13.2, 1578.0], [13.3, 1589.0], [13.4, 1594.0], [13.5, 1596.0], [13.6, 1601.0], [13.7, 1601.0], [13.8, 1602.0], [13.9, 1603.0], [14.0, 1603.0], [14.1, 1604.0], [14.2, 1606.0], [14.3, 1608.0], [14.4, 1609.0], [14.5, 1610.0], [14.6, 1611.0], [14.7, 1613.0], [14.8, 1615.0], [14.9, 1616.0], [15.0, 1617.0], [15.1, 1622.0], [15.2, 1625.0], [15.3, 1626.0], [15.4, 1628.0], [15.5, 1629.0], [15.6, 1632.0], [15.7, 1634.0], [15.8, 1636.0], [15.9, 1636.0], [16.0, 1641.0], [16.1, 1645.0], [16.2, 1647.0], [16.3, 1648.0], [16.4, 1649.0], [16.5, 1652.0], [16.6, 1655.0], [16.7, 1657.0], [16.8, 1659.0], [16.9, 1664.0], [17.0, 1667.0], [17.1, 1673.0], [17.2, 1677.0], [17.3, 1681.0], [17.4, 1689.0], [17.5, 1691.0], [17.6, 1692.0], [17.7, 1695.0], [17.8, 1697.0], [17.9, 1700.0], [18.0, 1703.0], [18.1, 1704.0], [18.2, 1704.0], [18.3, 1706.0], [18.4, 1709.0], [18.5, 1711.0], [18.6, 1715.0], [18.7, 1721.0], [18.8, 1722.0], [18.9, 1725.0], [19.0, 1726.0], [19.1, 1726.0], [19.2, 1729.0], [19.3, 1733.0], [19.4, 1736.0], [19.5, 1741.0], [19.6, 1742.0], [19.7, 1744.0], [19.8, 1745.0], [19.9, 1745.0], [20.0, 1747.0], [20.1, 1750.0], [20.2, 1751.0], [20.3, 1751.0], [20.4, 1754.0], [20.5, 1756.0], [20.6, 1756.0], [20.7, 1759.0], [20.8, 1764.0], [20.9, 1771.0], [21.0, 1776.0], [21.1, 1776.0], [21.2, 1777.0], [21.3, 1779.0], [21.4, 1780.0], [21.5, 1782.0], [21.6, 1783.0], [21.7, 1788.0], [21.8, 1788.0], [21.9, 1793.0], [22.0, 1796.0], [22.1, 1796.0], [22.2, 1797.0], [22.3, 1798.0], [22.4, 1799.0], [22.5, 1800.0], [22.6, 1800.0], [22.7, 1800.0], [22.8, 1801.0], [22.9, 1801.0], [23.0, 1802.0], [23.1, 1803.0], [23.2, 1804.0], [23.3, 1805.0], [23.4, 1807.0], [23.5, 1808.0], [23.6, 1812.0], [23.7, 1816.0], [23.8, 1816.0], [23.9, 1818.0], [24.0, 1820.0], [24.1, 1824.0], [24.2, 1825.0], [24.3, 1827.0], [24.4, 1830.0], [24.5, 1833.0], [24.6, 1840.0], [24.7, 1847.0], [24.8, 1848.0], [24.9, 1849.0], [25.0, 1851.0], [25.1, 1856.0], [25.2, 1858.0], [25.3, 1859.0], [25.4, 1861.0], [25.5, 1865.0], [25.6, 1870.0], [25.7, 1873.0], [25.8, 1874.0], [25.9, 1877.0], [26.0, 1881.0], [26.1, 1881.0], [26.2, 1884.0], [26.3, 1887.0], [26.4, 1888.0], [26.5, 1891.0], [26.6, 1896.0], [26.7, 1901.0], [26.8, 1902.0], [26.9, 1908.0], [27.0, 1913.0], [27.1, 1913.0], [27.2, 1915.0], [27.3, 1915.0], [27.4, 1919.0], [27.5, 1920.0], [27.6, 1920.0], [27.7, 1920.0], [27.8, 1922.0], [27.9, 1923.0], [28.0, 1923.0], [28.1, 1924.0], [28.2, 1925.0], [28.3, 1927.0], [28.4, 1928.0], [28.5, 1929.0], [28.6, 1930.0], [28.7, 1931.0], [28.8, 1931.0], [28.9, 1933.0], [29.0, 1936.0], [29.1, 1938.0], [29.2, 1939.0], [29.3, 1940.0], [29.4, 1942.0], [29.5, 1943.0], [29.6, 1943.0], [29.7, 1945.0], [29.8, 1945.0], [29.9, 1945.0], [30.0, 1946.0], [30.1, 1946.0], [30.2, 1947.0], [30.3, 1948.0], [30.4, 1949.0], [30.5, 1950.0], [30.6, 1950.0], [30.7, 1950.0], [30.8, 1951.0], [30.9, 1951.0], [31.0, 1952.0], [31.1, 1952.0], [31.2, 1952.0], [31.3, 1953.0], [31.4, 1953.0], [31.5, 1954.0], [31.6, 1955.0], [31.7, 1955.0], [31.8, 1956.0], [31.9, 1957.0], [32.0, 1957.0], [32.1, 1958.0], [32.2, 1960.0], [32.3, 1964.0], [32.4, 1965.0], [32.5, 1965.0], [32.6, 1965.0], [32.7, 1967.0], [32.8, 1967.0], [32.9, 1967.0], [33.0, 1969.0], [33.1, 1969.0], [33.2, 1969.0], [33.3, 1971.0], [33.4, 1972.0], [33.5, 1973.0], [33.6, 1973.0], [33.7, 1974.0], [33.8, 1975.0], [33.9, 1976.0], [34.0, 1977.0], [34.1, 1979.0], [34.2, 1980.0], [34.3, 1981.0], [34.4, 1982.0], [34.5, 1982.0], [34.6, 1983.0], [34.7, 1983.0], [34.8, 1984.0], [34.9, 1985.0], [35.0, 1987.0], [35.1, 1987.0], [35.2, 1988.0], [35.3, 1988.0], [35.4, 1989.0], [35.5, 1990.0], [35.6, 1991.0], [35.7, 1991.0], [35.8, 1992.0], [35.9, 1992.0], [36.0, 1993.0], [36.1, 1993.0], [36.2, 1993.0], [36.3, 1995.0], [36.4, 1995.0], [36.5, 1995.0], [36.6, 1996.0], [36.7, 1997.0], [36.8, 1997.0], [36.9, 1999.0], [37.0, 2000.0], [37.1, 2001.0], [37.2, 2001.0], [37.3, 2001.0], [37.4, 2003.0], [37.5, 2003.0], [37.6, 2005.0], [37.7, 2006.0], [37.8, 2009.0], [37.9, 2012.0], [38.0, 2012.0], [38.1, 2013.0], [38.2, 2015.0], [38.3, 2015.0], [38.4, 2016.0], [38.5, 2017.0], [38.6, 2017.0], [38.7, 2018.0], [38.8, 2018.0], [38.9, 2020.0], [39.0, 2020.0], [39.1, 2022.0], [39.2, 2023.0], [39.3, 2025.0], [39.4, 2028.0], [39.5, 2029.0], [39.6, 2031.0], [39.7, 2031.0], [39.8, 2032.0], [39.9, 2035.0], [40.0, 2036.0], [40.1, 2039.0], [40.2, 2042.0], [40.3, 2045.0], [40.4, 2047.0], [40.5, 2048.0], [40.6, 2056.0], [40.7, 2060.0], [40.8, 2061.0], [40.9, 2063.0], [41.0, 2073.0], [41.1, 2076.0], [41.2, 2079.0], [41.3, 2081.0], [41.4, 2085.0], [41.5, 2087.0], [41.6, 2088.0], [41.7, 2091.0], [41.8, 2092.0], [41.9, 2094.0], [42.0, 2096.0], [42.1, 2097.0], [42.2, 2098.0], [42.3, 2100.0], [42.4, 2101.0], [42.5, 2101.0], [42.6, 2102.0], [42.7, 2103.0], [42.8, 2105.0], [42.9, 2107.0], [43.0, 2111.0], [43.1, 2111.0], [43.2, 2112.0], [43.3, 2113.0], [43.4, 2114.0], [43.5, 2117.0], [43.6, 2119.0], [43.7, 2121.0], [43.8, 2123.0], [43.9, 2123.0], [44.0, 2125.0], [44.1, 2126.0], [44.2, 2127.0], [44.3, 2128.0], [44.4, 2129.0], [44.5, 2131.0], [44.6, 2132.0], [44.7, 2133.0], [44.8, 2134.0], [44.9, 2135.0], [45.0, 2136.0], [45.1, 2138.0], [45.2, 2139.0], [45.3, 2140.0], [45.4, 2141.0], [45.5, 2145.0], [45.6, 2146.0], [45.7, 2150.0], [45.8, 2151.0], [45.9, 2154.0], [46.0, 2155.0], [46.1, 2157.0], [46.2, 2158.0], [46.3, 2160.0], [46.4, 2161.0], [46.5, 2164.0], [46.6, 2165.0], [46.7, 2167.0], [46.8, 2168.0], [46.9, 2169.0], [47.0, 2169.0], [47.1, 2170.0], [47.2, 2171.0], [47.3, 2172.0], [47.4, 2172.0], [47.5, 2173.0], [47.6, 2175.0], [47.7, 2175.0], [47.8, 2176.0], [47.9, 2179.0], [48.0, 2180.0], [48.1, 2180.0], [48.2, 2181.0], [48.3, 2182.0], [48.4, 2184.0], [48.5, 2184.0], [48.6, 2185.0], [48.7, 2187.0], [48.8, 2190.0], [48.9, 2193.0], [49.0, 2195.0], [49.1, 2195.0], [49.2, 2198.0], [49.3, 2199.0], [49.4, 2200.0], [49.5, 2200.0], [49.6, 2201.0], [49.7, 2202.0], [49.8, 2203.0], [49.9, 2203.0], [50.0, 2205.0], [50.1, 2206.0], [50.2, 2208.0], [50.3, 2209.0], [50.4, 2211.0], [50.5, 2213.0], [50.6, 2214.0], [50.7, 2215.0], [50.8, 2215.0], [50.9, 2215.0], [51.0, 2217.0], [51.1, 2218.0], [51.2, 2219.0], [51.3, 2219.0], [51.4, 2221.0], [51.5, 2222.0], [51.6, 2223.0], [51.7, 2226.0], [51.8, 2228.0], [51.9, 2228.0], [52.0, 2229.0], [52.1, 2232.0], [52.2, 2236.0], [52.3, 2239.0], [52.4, 2240.0], [52.5, 2240.0], [52.6, 2242.0], [52.7, 2244.0], [52.8, 2245.0], [52.9, 2246.0], [53.0, 2247.0], [53.1, 2249.0], [53.2, 2253.0], [53.3, 2253.0], [53.4, 2257.0], [53.5, 2259.0], [53.6, 2260.0], [53.7, 2261.0], [53.8, 2264.0], [53.9, 2265.0], [54.0, 2265.0], [54.1, 2268.0], [54.2, 2268.0], [54.3, 2271.0], [54.4, 2273.0], [54.5, 2275.0], [54.6, 2279.0], [54.7, 2282.0], [54.8, 2283.0], [54.9, 2284.0], [55.0, 2285.0], [55.1, 2285.0], [55.2, 2287.0], [55.3, 2288.0], [55.4, 2289.0], [55.5, 2291.0], [55.6, 2291.0], [55.7, 2292.0], [55.8, 2293.0], [55.9, 2295.0], [56.0, 2300.0], [56.1, 2301.0], [56.2, 2304.0], [56.3, 2307.0], [56.4, 2309.0], [56.5, 2309.0], [56.6, 2310.0], [56.7, 2313.0], [56.8, 2314.0], [56.9, 2314.0], [57.0, 2316.0], [57.1, 2317.0], [57.2, 2317.0], [57.3, 2317.0], [57.4, 2319.0], [57.5, 2323.0], [57.6, 2325.0], [57.7, 2326.0], [57.8, 2326.0], [57.9, 2328.0], [58.0, 2329.0], [58.1, 2329.0], [58.2, 2330.0], [58.3, 2331.0], [58.4, 2333.0], [58.5, 2333.0], [58.6, 2333.0], [58.7, 2335.0], [58.8, 2336.0], [58.9, 2337.0], [59.0, 2339.0], [59.1, 2342.0], [59.2, 2348.0], [59.3, 2349.0], [59.4, 2350.0], [59.5, 2353.0], [59.6, 2353.0], [59.7, 2356.0], [59.8, 2356.0], [59.9, 2357.0], [60.0, 2360.0], [60.1, 2360.0], [60.2, 2362.0], [60.3, 2362.0], [60.4, 2364.0], [60.5, 2364.0], [60.6, 2364.0], [60.7, 2365.0], [60.8, 2365.0], [60.9, 2366.0], [61.0, 2369.0], [61.1, 2371.0], [61.2, 2371.0], [61.3, 2372.0], [61.4, 2375.0], [61.5, 2376.0], [61.6, 2377.0], [61.7, 2377.0], [61.8, 2380.0], [61.9, 2381.0], [62.0, 2383.0], [62.1, 2385.0], [62.2, 2385.0], [62.3, 2386.0], [62.4, 2388.0], [62.5, 2388.0], [62.6, 2391.0], [62.7, 2392.0], [62.8, 2392.0], [62.9, 2393.0], [63.0, 2395.0], [63.1, 2395.0], [63.2, 2397.0], [63.3, 2398.0], [63.4, 2399.0], [63.5, 2402.0], [63.6, 2403.0], [63.7, 2403.0], [63.8, 2405.0], [63.9, 2407.0], [64.0, 2408.0], [64.1, 2409.0], [64.2, 2410.0], [64.3, 2411.0], [64.4, 2412.0], [64.5, 2413.0], [64.6, 2415.0], [64.7, 2416.0], [64.8, 2418.0], [64.9, 2420.0], [65.0, 2422.0], [65.1, 2423.0], [65.2, 2425.0], [65.3, 2426.0], [65.4, 2427.0], [65.5, 2430.0], [65.6, 2430.0], [65.7, 2432.0], [65.8, 2434.0], [65.9, 2435.0], [66.0, 2436.0], [66.1, 2437.0], [66.2, 2437.0], [66.3, 2438.0], [66.4, 2440.0], [66.5, 2441.0], [66.6, 2442.0], [66.7, 2443.0], [66.8, 2444.0], [66.9, 2444.0], [67.0, 2444.0], [67.1, 2448.0], [67.2, 2448.0], [67.3, 2449.0], [67.4, 2450.0], [67.5, 2451.0], [67.6, 2455.0], [67.7, 2458.0], [67.8, 2460.0], [67.9, 2466.0], [68.0, 2468.0], [68.1, 2468.0], [68.2, 2471.0], [68.3, 2475.0], [68.4, 2481.0], [68.5, 2481.0], [68.6, 2483.0], [68.7, 2484.0], [68.8, 2489.0], [68.9, 2490.0], [69.0, 2492.0], [69.1, 2493.0], [69.2, 2494.0], [69.3, 2496.0], [69.4, 2498.0], [69.5, 2499.0], [69.6, 2500.0], [69.7, 2503.0], [69.8, 2507.0], [69.9, 2510.0], [70.0, 2512.0], [70.1, 2513.0], [70.2, 2515.0], [70.3, 2515.0], [70.4, 2517.0], [70.5, 2518.0], [70.6, 2526.0], [70.7, 2531.0], [70.8, 2533.0], [70.9, 2537.0], [71.0, 2539.0], [71.1, 2540.0], [71.2, 2542.0], [71.3, 2544.0], [71.4, 2546.0], [71.5, 2548.0], [71.6, 2550.0], [71.7, 2551.0], [71.8, 2554.0], [71.9, 2557.0], [72.0, 2558.0], [72.1, 2559.0], [72.2, 2560.0], [72.3, 2562.0], [72.4, 2564.0], [72.5, 2567.0], [72.6, 2567.0], [72.7, 2568.0], [72.8, 2570.0], [72.9, 2570.0], [73.0, 2571.0], [73.1, 2574.0], [73.2, 2574.0], [73.3, 2576.0], [73.4, 2577.0], [73.5, 2578.0], [73.6, 2582.0], [73.7, 2583.0], [73.8, 2585.0], [73.9, 2588.0], [74.0, 2589.0], [74.1, 2589.0], [74.2, 2590.0], [74.3, 2591.0], [74.4, 2593.0], [74.5, 2593.0], [74.6, 2595.0], [74.7, 2596.0], [74.8, 2598.0], [74.9, 2599.0], [75.0, 2600.0], [75.1, 2601.0], [75.2, 2603.0], [75.3, 2604.0], [75.4, 2605.0], [75.5, 2606.0], [75.6, 2606.0], [75.7, 2607.0], [75.8, 2608.0], [75.9, 2608.0], [76.0, 2611.0], [76.1, 2612.0], [76.2, 2614.0], [76.3, 2615.0], [76.4, 2615.0], [76.5, 2616.0], [76.6, 2616.0], [76.7, 2618.0], [76.8, 2620.0], [76.9, 2621.0], [77.0, 2623.0], [77.1, 2625.0], [77.2, 2626.0], [77.3, 2627.0], [77.4, 2629.0], [77.5, 2629.0], [77.6, 2630.0], [77.7, 2630.0], [77.8, 2632.0], [77.9, 2635.0], [78.0, 2637.0], [78.1, 2637.0], [78.2, 2638.0], [78.3, 2638.0], [78.4, 2639.0], [78.5, 2640.0], [78.6, 2642.0], [78.7, 2643.0], [78.8, 2644.0], [78.9, 2645.0], [79.0, 2646.0], [79.1, 2649.0], [79.2, 2651.0], [79.3, 2653.0], [79.4, 2654.0], [79.5, 2656.0], [79.6, 2658.0], [79.7, 2661.0], [79.8, 2662.0], [79.9, 2663.0], [80.0, 2666.0], [80.1, 2671.0], [80.2, 2673.0], [80.3, 2674.0], [80.4, 2676.0], [80.5, 2677.0], [80.6, 2678.0], [80.7, 2681.0], [80.8, 2683.0], [80.9, 2688.0], [81.0, 2691.0], [81.1, 2692.0], [81.2, 2693.0], [81.3, 2695.0], [81.4, 2696.0], [81.5, 2697.0], [81.6, 2699.0], [81.7, 2702.0], [81.8, 2705.0], [81.9, 2706.0], [82.0, 2706.0], [82.1, 2711.0], [82.2, 2712.0], [82.3, 2716.0], [82.4, 2722.0], [82.5, 2723.0], [82.6, 2728.0], [82.7, 2731.0], [82.8, 2739.0], [82.9, 2746.0], [83.0, 2748.0], [83.1, 2750.0], [83.2, 2757.0], [83.3, 2764.0], [83.4, 2767.0], [83.5, 2782.0], [83.6, 2787.0], [83.7, 2796.0], [83.8, 2804.0], [83.9, 2812.0], [84.0, 2817.0], [84.1, 2818.0], [84.2, 2819.0], [84.3, 2822.0], [84.4, 2830.0], [84.5, 2832.0], [84.6, 2835.0], [84.7, 2839.0], [84.8, 2840.0], [84.9, 2844.0], [85.0, 2849.0], [85.1, 2853.0], [85.2, 2855.0], [85.3, 2858.0], [85.4, 2861.0], [85.5, 2862.0], [85.6, 2868.0], [85.7, 2874.0], [85.8, 2876.0], [85.9, 2878.0], [86.0, 2878.0], [86.1, 2880.0], [86.2, 2881.0], [86.3, 2882.0], [86.4, 2886.0], [86.5, 2889.0], [86.6, 2893.0], [86.7, 2897.0], [86.8, 2902.0], [86.9, 2905.0], [87.0, 2907.0], [87.1, 2909.0], [87.2, 2909.0], [87.3, 2911.0], [87.4, 2919.0], [87.5, 2921.0], [87.6, 2922.0], [87.7, 2923.0], [87.8, 2924.0], [87.9, 2927.0], [88.0, 2928.0], [88.1, 2930.0], [88.2, 2934.0], [88.3, 2936.0], [88.4, 2937.0], [88.5, 2939.0], [88.6, 2941.0], [88.7, 2945.0], [88.8, 2949.0], [88.9, 2956.0], [89.0, 2957.0], [89.1, 2959.0], [89.2, 2963.0], [89.3, 2965.0], [89.4, 2968.0], [89.5, 2970.0], [89.6, 2970.0], [89.7, 2972.0], [89.8, 2975.0], [89.9, 2983.0], [90.0, 2991.0], [90.1, 2994.0], [90.2, 2995.0], [90.3, 2999.0], [90.4, 3000.0], [90.5, 3003.0], [90.6, 3017.0], [90.7, 3024.0], [90.8, 3029.0], [90.9, 3045.0], [91.0, 3054.0], [91.1, 3086.0], [91.2, 3114.0], [91.3, 3123.0], [91.4, 3127.0], [91.5, 3169.0], [91.6, 3175.0], [91.7, 3205.0], [91.8, 3223.0], [91.9, 3228.0], [92.0, 3232.0], [92.1, 3236.0], [92.2, 3254.0], [92.3, 3259.0], [92.4, 3268.0], [92.5, 3274.0], [92.6, 3276.0], [92.7, 3284.0], [92.8, 3291.0], [92.9, 3296.0], [93.0, 3300.0], [93.1, 3306.0], [93.2, 3317.0], [93.3, 3330.0], [93.4, 3331.0], [93.5, 3334.0], [93.6, 3345.0], [93.7, 3352.0], [93.8, 3353.0], [93.9, 3361.0], [94.0, 3362.0], [94.1, 3364.0], [94.2, 3377.0], [94.3, 3383.0], [94.4, 3393.0], [94.5, 3395.0], [94.6, 3399.0], [94.7, 3402.0], [94.8, 3418.0], [94.9, 3439.0], [95.0, 3444.0], [95.1, 3456.0], [95.2, 3461.0], [95.3, 3514.0], [95.4, 3543.0], [95.5, 3555.0], [95.6, 3558.0], [95.7, 3591.0], [95.8, 3624.0], [95.9, 3641.0], [96.0, 3664.0], [96.1, 3673.0], [96.2, 3683.0], [96.3, 3684.0], [96.4, 3695.0], [96.5, 3701.0], [96.6, 3703.0], [96.7, 3713.0], [96.8, 3720.0], [96.9, 3724.0], [97.0, 3754.0], [97.1, 3765.0], [97.2, 3770.0], [97.3, 3772.0], [97.4, 3776.0], [97.5, 3784.0], [97.6, 3787.0], [97.7, 3801.0], [97.8, 3837.0], [97.9, 3918.0], [98.0, 3979.0], [98.1, 4006.0], [98.2, 4049.0], [98.3, 4055.0], [98.4, 4113.0], [98.5, 4138.0], [98.6, 4150.0], [98.7, 4177.0], [98.8, 4187.0], [98.9, 4194.0], [99.0, 4219.0], [99.1, 4367.0], [99.2, 4438.0], [99.3, 4456.0], [99.4, 4559.0], [99.5, 4632.0], [99.6, 5017.0], [99.7, 5229.0], [99.8, 5262.0], [99.9, 5434.0]], "isOverall": false, "label": "/CarManageService/getByPlateNumberCM", "isController": false}, {"data": [[0.0, 4.0], [0.1, 8.0], [0.2, 15.0], [0.3, 20.0], [0.4, 24.0], [0.5, 26.0], [0.6, 27.0], [0.7, 29.0], [0.8, 30.0], [0.9, 31.0], [1.0, 35.0], [1.1, 36.0], [1.2, 37.0], [1.3, 48.0], [1.4, 50.0], [1.5, 54.0], [1.6, 60.0], [1.7, 61.0], [1.8, 64.0], [1.9, 70.0], [2.0, 72.0], [2.1, 73.0], [2.2, 76.0], [2.3, 82.0], [2.4, 86.0], [2.5, 87.0], [2.6, 92.0], [2.7, 94.0], [2.8, 97.0], [2.9, 99.0], [3.0, 102.0], [3.1, 109.0], [3.2, 116.0], [3.3, 122.0], [3.4, 127.0], [3.5, 140.0], [3.6, 155.0], [3.7, 156.0], [3.8, 167.0], [3.9, 169.0], [4.0, 210.0], [4.1, 281.0], [4.2, 291.0], [4.3, 339.0], [4.4, 351.0], [4.5, 364.0], [4.6, 407.0], [4.7, 411.0], [4.8, 422.0], [4.9, 509.0], [5.0, 539.0], [5.1, 560.0], [5.2, 596.0], [5.3, 620.0], [5.4, 628.0], [5.5, 640.0], [5.6, 652.0], [5.7, 663.0], [5.8, 666.0], [5.9, 667.0], [6.0, 672.0], [6.1, 677.0], [6.2, 685.0], [6.3, 697.0], [6.4, 701.0], [6.5, 705.0], [6.6, 705.0], [6.7, 708.0], [6.8, 712.0], [6.9, 714.0], [7.0, 715.0], [7.1, 716.0], [7.2, 717.0], [7.3, 717.0], [7.4, 720.0], [7.5, 725.0], [7.6, 728.0], [7.7, 729.0], [7.8, 734.0], [7.9, 739.0], [8.0, 746.0], [8.1, 750.0], [8.2, 757.0], [8.3, 765.0], [8.4, 769.0], [8.5, 787.0], [8.6, 791.0], [8.7, 796.0], [8.8, 798.0], [8.9, 805.0], [9.0, 861.0], [9.1, 862.0], [9.2, 869.0], [9.3, 872.0], [9.4, 881.0], [9.5, 883.0], [9.6, 887.0], [9.7, 888.0], [9.8, 895.0], [9.9, 898.0], [10.0, 901.0], [10.1, 903.0], [10.2, 915.0], [10.3, 922.0], [10.4, 926.0], [10.5, 930.0], [10.6, 931.0], [10.7, 934.0], [10.8, 941.0], [10.9, 941.0], [11.0, 945.0], [11.1, 951.0], [11.2, 953.0], [11.3, 958.0], [11.4, 960.0], [11.5, 962.0], [11.6, 965.0], [11.7, 965.0], [11.8, 967.0], [11.9, 970.0], [12.0, 972.0], [12.1, 973.0], [12.2, 975.0], [12.3, 976.0], [12.4, 980.0], [12.5, 982.0], [12.6, 983.0], [12.7, 986.0], [12.8, 987.0], [12.9, 988.0], [13.0, 990.0], [13.1, 995.0], [13.2, 997.0], [13.3, 1000.0], [13.4, 1009.0], [13.5, 1023.0], [13.6, 1027.0], [13.7, 1037.0], [13.8, 1045.0], [13.9, 1049.0], [14.0, 1058.0], [14.1, 1072.0], [14.2, 1074.0], [14.3, 1079.0], [14.4, 1083.0], [14.5, 1084.0], [14.6, 1093.0], [14.7, 1096.0], [14.8, 1107.0], [14.9, 1107.0], [15.0, 1113.0], [15.1, 1121.0], [15.2, 1123.0], [15.3, 1125.0], [15.4, 1126.0], [15.5, 1128.0], [15.6, 1130.0], [15.7, 1136.0], [15.8, 1142.0], [15.9, 1153.0], [16.0, 1154.0], [16.1, 1159.0], [16.2, 1160.0], [16.3, 1163.0], [16.4, 1166.0], [16.5, 1169.0], [16.6, 1172.0], [16.7, 1174.0], [16.8, 1174.0], [16.9, 1179.0], [17.0, 1180.0], [17.1, 1188.0], [17.2, 1189.0], [17.3, 1195.0], [17.4, 1199.0], [17.5, 1203.0], [17.6, 1206.0], [17.7, 1216.0], [17.8, 1219.0], [17.9, 1227.0], [18.0, 1229.0], [18.1, 1229.0], [18.2, 1232.0], [18.3, 1243.0], [18.4, 1249.0], [18.5, 1254.0], [18.6, 1255.0], [18.7, 1262.0], [18.8, 1267.0], [18.9, 1272.0], [19.0, 1276.0], [19.1, 1286.0], [19.2, 1290.0], [19.3, 1291.0], [19.4, 1297.0], [19.5, 1300.0], [19.6, 1303.0], [19.7, 1307.0], [19.8, 1309.0], [19.9, 1313.0], [20.0, 1313.0], [20.1, 1314.0], [20.2, 1316.0], [20.3, 1316.0], [20.4, 1317.0], [20.5, 1320.0], [20.6, 1323.0], [20.7, 1326.0], [20.8, 1328.0], [20.9, 1329.0], [21.0, 1331.0], [21.1, 1334.0], [21.2, 1336.0], [21.3, 1336.0], [21.4, 1343.0], [21.5, 1347.0], [21.6, 1370.0], [21.7, 1372.0], [21.8, 1377.0], [21.9, 1383.0], [22.0, 1385.0], [22.1, 1386.0], [22.2, 1387.0], [22.3, 1389.0], [22.4, 1392.0], [22.5, 1394.0], [22.6, 1396.0], [22.7, 1401.0], [22.8, 1402.0], [22.9, 1409.0], [23.0, 1411.0], [23.1, 1413.0], [23.2, 1415.0], [23.3, 1417.0], [23.4, 1418.0], [23.5, 1422.0], [23.6, 1426.0], [23.7, 1432.0], [23.8, 1441.0], [23.9, 1443.0], [24.0, 1458.0], [24.1, 1461.0], [24.2, 1471.0], [24.3, 1475.0], [24.4, 1478.0], [24.5, 1482.0], [24.6, 1486.0], [24.7, 1490.0], [24.8, 1499.0], [24.9, 1507.0], [25.0, 1515.0], [25.1, 1518.0], [25.2, 1520.0], [25.3, 1525.0], [25.4, 1528.0], [25.5, 1533.0], [25.6, 1546.0], [25.7, 1549.0], [25.8, 1550.0], [25.9, 1551.0], [26.0, 1552.0], [26.1, 1560.0], [26.2, 1567.0], [26.3, 1577.0], [26.4, 1584.0], [26.5, 1584.0], [26.6, 1589.0], [26.7, 1591.0], [26.8, 1596.0], [26.9, 1598.0], [27.0, 1599.0], [27.1, 1607.0], [27.2, 1612.0], [27.3, 1614.0], [27.4, 1616.0], [27.5, 1619.0], [27.6, 1622.0], [27.7, 1623.0], [27.8, 1632.0], [27.9, 1637.0], [28.0, 1639.0], [28.1, 1641.0], [28.2, 1646.0], [28.3, 1654.0], [28.4, 1655.0], [28.5, 1657.0], [28.6, 1658.0], [28.7, 1662.0], [28.8, 1664.0], [28.9, 1665.0], [29.0, 1666.0], [29.1, 1668.0], [29.2, 1668.0], [29.3, 1670.0], [29.4, 1670.0], [29.5, 1672.0], [29.6, 1674.0], [29.7, 1674.0], [29.8, 1676.0], [29.9, 1676.0], [30.0, 1677.0], [30.1, 1678.0], [30.2, 1678.0], [30.3, 1679.0], [30.4, 1681.0], [30.5, 1682.0], [30.6, 1683.0], [30.7, 1684.0], [30.8, 1684.0], [30.9, 1685.0], [31.0, 1685.0], [31.1, 1686.0], [31.2, 1687.0], [31.3, 1688.0], [31.4, 1688.0], [31.5, 1689.0], [31.6, 1690.0], [31.7, 1691.0], [31.8, 1691.0], [31.9, 1692.0], [32.0, 1692.0], [32.1, 1693.0], [32.2, 1693.0], [32.3, 1694.0], [32.4, 1695.0], [32.5, 1696.0], [32.6, 1696.0], [32.7, 1697.0], [32.8, 1698.0], [32.9, 1699.0], [33.0, 1700.0], [33.1, 1700.0], [33.2, 1701.0], [33.3, 1701.0], [33.4, 1702.0], [33.5, 1702.0], [33.6, 1703.0], [33.7, 1703.0], [33.8, 1704.0], [33.9, 1704.0], [34.0, 1704.0], [34.1, 1704.0], [34.2, 1705.0], [34.3, 1705.0], [34.4, 1706.0], [34.5, 1706.0], [34.6, 1707.0], [34.7, 1707.0], [34.8, 1707.0], [34.9, 1708.0], [35.0, 1708.0], [35.1, 1709.0], [35.2, 1709.0], [35.3, 1710.0], [35.4, 1710.0], [35.5, 1710.0], [35.6, 1710.0], [35.7, 1711.0], [35.8, 1711.0], [35.9, 1712.0], [36.0, 1712.0], [36.1, 1712.0], [36.2, 1713.0], [36.3, 1713.0], [36.4, 1714.0], [36.5, 1714.0], [36.6, 1715.0], [36.7, 1715.0], [36.8, 1715.0], [36.9, 1715.0], [37.0, 1715.0], [37.1, 1716.0], [37.2, 1716.0], [37.3, 1717.0], [37.4, 1717.0], [37.5, 1717.0], [37.6, 1718.0], [37.7, 1718.0], [37.8, 1719.0], [37.9, 1719.0], [38.0, 1720.0], [38.1, 1720.0], [38.2, 1720.0], [38.3, 1721.0], [38.4, 1721.0], [38.5, 1721.0], [38.6, 1722.0], [38.7, 1722.0], [38.8, 1722.0], [38.9, 1722.0], [39.0, 1723.0], [39.1, 1723.0], [39.2, 1724.0], [39.3, 1724.0], [39.4, 1725.0], [39.5, 1725.0], [39.6, 1726.0], [39.7, 1727.0], [39.8, 1727.0], [39.9, 1727.0], [40.0, 1727.0], [40.1, 1727.0], [40.2, 1728.0], [40.3, 1728.0], [40.4, 1729.0], [40.5, 1729.0], [40.6, 1729.0], [40.7, 1730.0], [40.8, 1731.0], [40.9, 1732.0], [41.0, 1733.0], [41.1, 1733.0], [41.2, 1734.0], [41.3, 1734.0], [41.4, 1734.0], [41.5, 1734.0], [41.6, 1735.0], [41.7, 1736.0], [41.8, 1736.0], [41.9, 1736.0], [42.0, 1737.0], [42.1, 1738.0], [42.2, 1738.0], [42.3, 1739.0], [42.4, 1741.0], [42.5, 1741.0], [42.6, 1741.0], [42.7, 1742.0], [42.8, 1742.0], [42.9, 1743.0], [43.0, 1743.0], [43.1, 1743.0], [43.2, 1743.0], [43.3, 1744.0], [43.4, 1744.0], [43.5, 1744.0], [43.6, 1745.0], [43.7, 1745.0], [43.8, 1746.0], [43.9, 1746.0], [44.0, 1746.0], [44.1, 1746.0], [44.2, 1746.0], [44.3, 1747.0], [44.4, 1748.0], [44.5, 1748.0], [44.6, 1748.0], [44.7, 1748.0], [44.8, 1748.0], [44.9, 1748.0], [45.0, 1749.0], [45.1, 1749.0], [45.2, 1749.0], [45.3, 1750.0], [45.4, 1750.0], [45.5, 1750.0], [45.6, 1751.0], [45.7, 1753.0], [45.8, 1753.0], [45.9, 1754.0], [46.0, 1754.0], [46.1, 1755.0], [46.2, 1755.0], [46.3, 1756.0], [46.4, 1756.0], [46.5, 1757.0], [46.6, 1758.0], [46.7, 1758.0], [46.8, 1759.0], [46.9, 1760.0], [47.0, 1760.0], [47.1, 1760.0], [47.2, 1762.0], [47.3, 1763.0], [47.4, 1764.0], [47.5, 1766.0], [47.6, 1767.0], [47.7, 1771.0], [47.8, 1771.0], [47.9, 1772.0], [48.0, 1773.0], [48.1, 1774.0], [48.2, 1774.0], [48.3, 1775.0], [48.4, 1775.0], [48.5, 1776.0], [48.6, 1776.0], [48.7, 1777.0], [48.8, 1777.0], [48.9, 1778.0], [49.0, 1778.0], [49.1, 1778.0], [49.2, 1779.0], [49.3, 1779.0], [49.4, 1779.0], [49.5, 1779.0], [49.6, 1780.0], [49.7, 1780.0], [49.8, 1780.0], [49.9, 1780.0], [50.0, 1780.0], [50.1, 1780.0], [50.2, 1782.0], [50.3, 1783.0], [50.4, 1784.0], [50.5, 1784.0], [50.6, 1784.0], [50.7, 1785.0], [50.8, 1785.0], [50.9, 1785.0], [51.0, 1785.0], [51.1, 1786.0], [51.2, 1786.0], [51.3, 1787.0], [51.4, 1788.0], [51.5, 1788.0], [51.6, 1789.0], [51.7, 1791.0], [51.8, 1792.0], [51.9, 1792.0], [52.0, 1793.0], [52.1, 1793.0], [52.2, 1793.0], [52.3, 1795.0], [52.4, 1795.0], [52.5, 1795.0], [52.6, 1795.0], [52.7, 1796.0], [52.8, 1797.0], [52.9, 1799.0], [53.0, 1799.0], [53.1, 1799.0], [53.2, 1800.0], [53.3, 1800.0], [53.4, 1801.0], [53.5, 1801.0], [53.6, 1802.0], [53.7, 1803.0], [53.8, 1803.0], [53.9, 1803.0], [54.0, 1804.0], [54.1, 1804.0], [54.2, 1804.0], [54.3, 1805.0], [54.4, 1805.0], [54.5, 1805.0], [54.6, 1806.0], [54.7, 1806.0], [54.8, 1806.0], [54.9, 1807.0], [55.0, 1807.0], [55.1, 1808.0], [55.2, 1808.0], [55.3, 1808.0], [55.4, 1809.0], [55.5, 1809.0], [55.6, 1809.0], [55.7, 1810.0], [55.8, 1810.0], [55.9, 1810.0], [56.0, 1811.0], [56.1, 1811.0], [56.2, 1812.0], [56.3, 1813.0], [56.4, 1813.0], [56.5, 1813.0], [56.6, 1813.0], [56.7, 1814.0], [56.8, 1814.0], [56.9, 1815.0], [57.0, 1815.0], [57.1, 1816.0], [57.2, 1817.0], [57.3, 1818.0], [57.4, 1818.0], [57.5, 1818.0], [57.6, 1818.0], [57.7, 1819.0], [57.8, 1819.0], [57.9, 1820.0], [58.0, 1820.0], [58.1, 1821.0], [58.2, 1821.0], [58.3, 1821.0], [58.4, 1822.0], [58.5, 1822.0], [58.6, 1823.0], [58.7, 1823.0], [58.8, 1823.0], [58.9, 1824.0], [59.0, 1824.0], [59.1, 1825.0], [59.2, 1825.0], [59.3, 1826.0], [59.4, 1827.0], [59.5, 1827.0], [59.6, 1827.0], [59.7, 1828.0], [59.8, 1828.0], [59.9, 1828.0], [60.0, 1829.0], [60.1, 1829.0], [60.2, 1830.0], [60.3, 1830.0], [60.4, 1831.0], [60.5, 1832.0], [60.6, 1832.0], [60.7, 1834.0], [60.8, 1834.0], [60.9, 1835.0], [61.0, 1836.0], [61.1, 1836.0], [61.2, 1836.0], [61.3, 1837.0], [61.4, 1837.0], [61.5, 1838.0], [61.6, 1838.0], [61.7, 1839.0], [61.8, 1840.0], [61.9, 1840.0], [62.0, 1841.0], [62.1, 1843.0], [62.2, 1845.0], [62.3, 1845.0], [62.4, 1845.0], [62.5, 1845.0], [62.6, 1846.0], [62.7, 1847.0], [62.8, 1847.0], [62.9, 1848.0], [63.0, 1849.0], [63.1, 1850.0], [63.2, 1851.0], [63.3, 1853.0], [63.4, 1854.0], [63.5, 1854.0], [63.6, 1859.0], [63.7, 1860.0], [63.8, 1861.0], [63.9, 1862.0], [64.0, 1863.0], [64.1, 1869.0], [64.2, 1875.0], [64.3, 1881.0], [64.4, 1897.0], [64.5, 1907.0], [64.6, 1911.0], [64.7, 1918.0], [64.8, 1931.0], [64.9, 1933.0], [65.0, 1943.0], [65.1, 1943.0], [65.2, 1949.0], [65.3, 1951.0], [65.4, 1954.0], [65.5, 1961.0], [65.6, 1963.0], [65.7, 1968.0], [65.8, 1969.0], [65.9, 1972.0], [66.0, 1976.0], [66.1, 1987.0], [66.2, 1993.0], [66.3, 1999.0], [66.4, 2007.0], [66.5, 2010.0], [66.6, 2017.0], [66.7, 2019.0], [66.8, 2024.0], [66.9, 2028.0], [67.0, 2033.0], [67.1, 2038.0], [67.2, 2044.0], [67.3, 2045.0], [67.4, 2051.0], [67.5, 2058.0], [67.6, 2067.0], [67.7, 2073.0], [67.8, 2075.0], [67.9, 2077.0], [68.0, 2080.0], [68.1, 2087.0], [68.2, 2088.0], [68.3, 2090.0], [68.4, 2093.0], [68.5, 2100.0], [68.6, 2109.0], [68.7, 2114.0], [68.8, 2117.0], [68.9, 2121.0], [69.0, 2124.0], [69.1, 2128.0], [69.2, 2129.0], [69.3, 2133.0], [69.4, 2147.0], [69.5, 2155.0], [69.6, 2158.0], [69.7, 2160.0], [69.8, 2165.0], [69.9, 2168.0], [70.0, 2172.0], [70.1, 2178.0], [70.2, 2181.0], [70.3, 2182.0], [70.4, 2182.0], [70.5, 2185.0], [70.6, 2187.0], [70.7, 2189.0], [70.8, 2191.0], [70.9, 2193.0], [71.0, 2194.0], [71.1, 2196.0], [71.2, 2198.0], [71.3, 2201.0], [71.4, 2202.0], [71.5, 2202.0], [71.6, 2203.0], [71.7, 2204.0], [71.8, 2205.0], [71.9, 2215.0], [72.0, 2219.0], [72.1, 2222.0], [72.2, 2223.0], [72.3, 2223.0], [72.4, 2224.0], [72.5, 2226.0], [72.6, 2227.0], [72.7, 2230.0], [72.8, 2231.0], [72.9, 2233.0], [73.0, 2238.0], [73.1, 2247.0], [73.2, 2251.0], [73.3, 2252.0], [73.4, 2255.0], [73.5, 2256.0], [73.6, 2261.0], [73.7, 2263.0], [73.8, 2264.0], [73.9, 2265.0], [74.0, 2268.0], [74.1, 2270.0], [74.2, 2275.0], [74.3, 2282.0], [74.4, 2283.0], [74.5, 2286.0], [74.6, 2289.0], [74.7, 2290.0], [74.8, 2295.0], [74.9, 2296.0], [75.0, 2300.0], [75.1, 2303.0], [75.2, 2311.0], [75.3, 2311.0], [75.4, 2312.0], [75.5, 2318.0], [75.6, 2324.0], [75.7, 2329.0], [75.8, 2330.0], [75.9, 2331.0], [76.0, 2337.0], [76.1, 2342.0], [76.2, 2343.0], [76.3, 2373.0], [76.4, 2376.0], [76.5, 2378.0], [76.6, 2387.0], [76.7, 2392.0], [76.8, 2394.0], [76.9, 2402.0], [77.0, 2404.0], [77.1, 2404.0], [77.2, 2406.0], [77.3, 2408.0], [77.4, 2410.0], [77.5, 2415.0], [77.6, 2419.0], [77.7, 2422.0], [77.8, 2428.0], [77.9, 2431.0], [78.0, 2433.0], [78.1, 2436.0], [78.2, 2439.0], [78.3, 2442.0], [78.4, 2447.0], [78.5, 2456.0], [78.6, 2459.0], [78.7, 2460.0], [78.8, 2461.0], [78.9, 2465.0], [79.0, 2466.0], [79.1, 2467.0], [79.2, 2474.0], [79.3, 2477.0], [79.4, 2477.0], [79.5, 2482.0], [79.6, 2486.0], [79.7, 2490.0], [79.8, 2495.0], [79.9, 2496.0], [80.0, 2502.0], [80.1, 2510.0], [80.2, 2514.0], [80.3, 2515.0], [80.4, 2525.0], [80.5, 2529.0], [80.6, 2531.0], [80.7, 2537.0], [80.8, 2538.0], [80.9, 2546.0], [81.0, 2549.0], [81.1, 2550.0], [81.2, 2577.0], [81.3, 2583.0], [81.4, 2588.0], [81.5, 2594.0], [81.6, 2607.0], [81.7, 2614.0], [81.8, 2624.0], [81.9, 2626.0], [82.0, 2630.0], [82.1, 2650.0], [82.2, 2674.0], [82.3, 2681.0], [82.4, 2694.0], [82.5, 2713.0], [82.6, 2740.0], [82.7, 2782.0], [82.8, 2813.0], [82.9, 2824.0], [83.0, 2837.0], [83.1, 2842.0], [83.2, 2859.0], [83.3, 2863.0], [83.4, 2888.0], [83.5, 2908.0], [83.6, 2912.0], [83.7, 2922.0], [83.8, 2929.0], [83.9, 2935.0], [84.0, 2945.0], [84.1, 2970.0], [84.2, 2971.0], [84.3, 2973.0], [84.4, 2974.0], [84.5, 2979.0], [84.6, 2983.0], [84.7, 2985.0], [84.8, 2986.0], [84.9, 2987.0], [85.0, 2989.0], [85.1, 2996.0], [85.2, 2999.0], [85.3, 3003.0], [85.4, 3003.0], [85.5, 3005.0], [85.6, 3007.0], [85.7, 3011.0], [85.8, 3014.0], [85.9, 3016.0], [86.0, 3019.0], [86.1, 3021.0], [86.2, 3027.0], [86.3, 3028.0], [86.4, 3033.0], [86.5, 3042.0], [86.6, 3044.0], [86.7, 3054.0], [86.8, 3058.0], [86.9, 3068.0], [87.0, 3071.0], [87.1, 3075.0], [87.2, 3087.0], [87.3, 3090.0], [87.4, 3094.0], [87.5, 3100.0], [87.6, 3103.0], [87.7, 3110.0], [87.8, 3113.0], [87.9, 3125.0], [88.0, 3135.0], [88.1, 3139.0], [88.2, 3154.0], [88.3, 3170.0], [88.4, 3177.0], [88.5, 3179.0], [88.6, 3194.0], [88.7, 3196.0], [88.8, 3200.0], [88.9, 3207.0], [89.0, 3211.0], [89.1, 3215.0], [89.2, 3216.0], [89.3, 3217.0], [89.4, 3220.0], [89.5, 3231.0], [89.6, 3236.0], [89.7, 3244.0], [89.8, 3255.0], [89.9, 3261.0], [90.0, 3269.0], [90.1, 3275.0], [90.2, 3279.0], [90.3, 3287.0], [90.4, 3308.0], [90.5, 3317.0], [90.6, 3321.0], [90.7, 3334.0], [90.8, 3348.0], [90.9, 3375.0], [91.0, 3397.0], [91.1, 3416.0], [91.2, 3426.0], [91.3, 3429.0], [91.4, 3446.0], [91.5, 3448.0], [91.6, 3462.0], [91.7, 3463.0], [91.8, 3464.0], [91.9, 3465.0], [92.0, 3467.0], [92.1, 3481.0], [92.2, 3489.0], [92.3, 3495.0], [92.4, 3505.0], [92.5, 3516.0], [92.6, 3524.0], [92.7, 3536.0], [92.8, 3545.0], [92.9, 3549.0], [93.0, 3558.0], [93.1, 3572.0], [93.2, 3579.0], [93.3, 3588.0], [93.4, 3595.0], [93.5, 3601.0], [93.6, 3608.0], [93.7, 3633.0], [93.8, 3642.0], [93.9, 3650.0], [94.0, 3673.0], [94.1, 3697.0], [94.2, 3703.0], [94.3, 3751.0], [94.4, 3870.0], [94.5, 3887.0], [94.6, 3916.0], [94.7, 3932.0], [94.8, 3946.0], [94.9, 3964.0], [95.0, 3970.0], [95.1, 3971.0], [95.2, 3979.0], [95.3, 3988.0], [95.4, 3991.0], [95.5, 4008.0], [95.6, 4021.0], [95.7, 4027.0], [95.8, 4031.0], [95.9, 4042.0], [96.0, 4060.0], [96.1, 4070.0], [96.2, 4076.0], [96.3, 4078.0], [96.4, 4094.0], [96.5, 4098.0], [96.6, 4099.0], [96.7, 4103.0], [96.8, 4110.0], [96.9, 4118.0], [97.0, 4118.0], [97.1, 4125.0], [97.2, 4129.0], [97.3, 4134.0], [97.4, 4138.0], [97.5, 4140.0], [97.6, 4148.0], [97.7, 4154.0], [97.8, 4157.0], [97.9, 4172.0], [98.0, 4181.0], [98.1, 4189.0], [98.2, 4194.0], [98.3, 4212.0], [98.4, 4214.0], [98.5, 4235.0], [98.6, 4252.0], [98.7, 4256.0], [98.8, 4261.0], [98.9, 4274.0], [99.0, 4294.0], [99.1, 4333.0], [99.2, 4345.0], [99.3, 4461.0], [99.4, 4509.0], [99.5, 4564.0], [99.6, 4652.0], [99.7, 4665.0], [99.8, 4849.0], [99.9, 4971.0]], "isOverall": false, "label": "/CarManageService/renewCM", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 405.0, "series": [{"data": [[0.0, 27.0], [600.0, 13.0], [700.0, 7.0], [800.0, 3.0], [900.0, 15.0], [1000.0, 5.0], [1100.0, 18.0], [1200.0, 14.0], [1300.0, 20.0], [1400.0, 36.0], [1500.0, 43.0], [1600.0, 86.0], [1700.0, 93.0], [1800.0, 84.0], [1900.0, 206.0], [2000.0, 105.0], [2100.0, 144.0], [2300.0, 150.0], [2200.0, 132.0], [2400.0, 121.0], [2500.0, 108.0], [2600.0, 134.0], [2800.0, 60.0], [2700.0, 43.0], [2900.0, 72.0], [3000.0, 15.0], [3100.0, 11.0], [3300.0, 33.0], [3200.0, 26.0], [3400.0, 12.0], [3500.0, 10.0], [3600.0, 14.0], [3700.0, 25.0], [3800.0, 4.0], [3900.0, 4.0], [4000.0, 6.0], [4300.0, 2.0], [4200.0, 2.0], [4100.0, 11.0], [4600.0, 1.0], [4400.0, 4.0], [4500.0, 3.0], [4800.0, 1.0], [5000.0, 2.0], [5200.0, 3.0], [5400.0, 2.0], [5600.0, 1.0], [100.0, 3.0], [200.0, 7.0], [300.0, 15.0], [400.0, 24.0], [500.0, 20.0]], "isOverall": false, "label": "/CarManageService/getByPlateNumberCM", "isController": false}, {"data": [[0.0, 59.0], [600.0, 21.0], [700.0, 50.0], [800.0, 23.0], [900.0, 65.0], [1000.0, 29.0], [1100.0, 54.0], [1200.0, 40.0], [1300.0, 64.0], [1400.0, 44.0], [1500.0, 45.0], [1600.0, 117.0], [1700.0, 405.0], [1800.0, 226.0], [1900.0, 37.0], [2000.0, 44.0], [2100.0, 55.0], [2200.0, 75.0], [2300.0, 38.0], [2400.0, 62.0], [2500.0, 31.0], [2600.0, 19.0], [2700.0, 5.0], [2800.0, 14.0], [2900.0, 36.0], [3000.0, 45.0], [3100.0, 26.0], [3200.0, 32.0], [3300.0, 13.0], [3400.0, 26.0], [3500.0, 23.0], [3600.0, 14.0], [3700.0, 4.0], [3800.0, 4.0], [3900.0, 18.0], [4000.0, 23.0], [4100.0, 32.0], [4200.0, 16.0], [4300.0, 4.0], [4400.0, 3.0], [4500.0, 4.0], [4600.0, 3.0], [4700.0, 1.0], [4800.0, 1.0], [4900.0, 2.0], [5500.0, 1.0], [100.0, 21.0], [200.0, 5.0], [300.0, 6.0], [400.0, 7.0], [500.0, 8.0]], "isOverall": false, "label": "/CarManageService/renewCM", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 174.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3277.0, "series": [{"data": [[0.0, 174.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 549.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3277.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 367.54652532391106, "minX": 1.629807608E12, "maxY": 999.9974811083125, "series": [{"data": [[1.629807612E12, 999.715061058345], [1.629807614E12, 993.2962962962961], [1.629807616E12, 903.9626352015729], [1.629807608E12, 852.0], [1.629807618E12, 367.54652532391106], [1.62980761E12, 999.9974811083125]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629807618E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.0, "maxY": 4907.0, "series": [{"data": [[2.0, 4.0], [3.0, 2.0], [4.0, 4.0], [5.0, 94.0], [7.0, 367.0], [9.0, 480.0], [11.0, 426.5], [12.0, 400.0], [14.0, 379.0], [16.0, 295.5], [17.0, 205.0], [19.0, 2.5], [20.0, 196.0], [21.0, 194.0], [23.0, 87.5], [24.0, 702.0], [25.0, 603.0], [28.0, 1184.6666666666667], [30.0, 1155.0], [31.0, 1528.0], [32.0, 1105.0], [34.0, 1288.5], [37.0, 996.3333333333334], [39.0, 984.0], [41.0, 1400.0], [40.0, 977.0], [43.0, 739.0], [46.0, 1216.6666666666667], [49.0, 700.0], [48.0, 833.5], [50.0, 694.0], [52.0, 1112.0], [56.0, 653.75], [59.0, 634.0], [58.0, 1136.0], [61.0, 1459.0], [62.0, 601.0], [67.0, 546.3333333333334], [64.0, 551.5], [70.0, 91.0], [69.0, 529.0], [68.0, 542.0], [75.0, 496.0], [74.0, 521.0], [73.0, 491.0], [72.0, 265.0], [78.0, 472.0], [77.0, 482.0], [81.0, 1143.0], [80.0, 464.0], [87.0, 1976.0], [86.0, 1523.5], [84.0, 1305.3333333333333], [91.0, 2134.0], [90.0, 1530.5], [88.0, 2469.0], [95.0, 2097.0], [94.0, 2515.0], [93.0, 2112.0], [92.0, 696.0], [99.0, 1640.5], [97.0, 2500.5], [103.0, 744.0], [102.0, 2001.0], [101.0, 1249.0], [100.0, 2009.0], [106.0, 2218.0], [105.0, 983.0], [104.0, 1246.0], [111.0, 1197.0], [110.0, 1196.0], [109.0, 1202.0], [108.0, 1593.0], [115.0, 1159.0], [114.0, 1161.0], [113.0, 1166.0], [112.0, 1175.0], [118.0, 1473.0], [117.0, 1476.0], [116.0, 1970.0], [122.0, 1463.5], [120.0, 2165.0], [126.0, 2137.5], [124.0, 1149.0], [135.0, 1356.0], [134.0, 1358.5], [132.0, 1169.0], [130.0, 911.5], [128.0, 1748.0], [143.0, 870.0], [142.0, 874.0], [141.0, 901.0], [140.0, 1340.0], [138.0, 1928.5], [136.0, 2518.0], [151.0, 1914.0], [149.0, 2324.0], [147.0, 2197.5], [145.0, 2101.0], [144.0, 863.0], [159.0, 1886.0], [157.0, 1021.5], [155.0, 2314.0], [153.0, 1497.5], [166.0, 1585.0], [163.0, 2288.5], [161.0, 1942.5], [174.0, 1518.0], [172.0, 1526.0], [171.0, 1539.0], [169.0, 1558.0], [168.0, 1568.0], [183.0, 2244.0], [182.0, 2258.0], [180.0, 2264.0], [178.0, 538.0], [177.0, 1494.0], [176.0, 1894.0], [191.0, 476.0], [190.0, 2184.0], [189.0, 2198.5], [187.0, 2226.0], [185.0, 2237.0], [184.0, 1615.0], [199.0, 2706.0], [198.0, 3.0], [197.0, 439.0], [196.0, 2562.0], [195.0, 1751.0], [194.0, 496.0], [193.0, 2170.0], [192.0, 2173.0], [207.0, 2317.0], [206.0, 1644.5], [204.0, 1708.0], [203.0, 1706.0], [202.0, 1711.0], [201.0, 2679.0], [200.0, 1725.0], [215.0, 2302.0], [214.0, 2317.0], [213.0, 2764.0], [212.0, 1736.0], [211.0, 3980.0], [210.0, 254.0], [209.0, 2567.0], [208.0, 2260.0], [223.0, 1754.0], [222.0, 1755.0], [221.0, 1765.0], [220.0, 1797.0], [219.0, 1800.0], [218.0, 1811.0], [217.0, 1813.0], [216.0, 2304.0], [231.0, 1725.0], [230.0, 385.0], [229.0, 382.0], [228.0, 373.0], [227.0, 1743.0], [226.0, 2283.0], [225.0, 2285.0], [224.0, 2738.0], [239.0, 1873.0], [238.0, 1877.0], [237.0, 1920.0], [236.0, 1921.0], [235.0, 406.0], [234.0, 398.0], [233.0, 1928.0], [232.0, 1938.0], [247.0, 2260.0], [246.0, 2268.0], [245.0, 1703.0], [244.0, 1820.0], [243.0, 1825.0], [242.0, 1843.0], [241.0, 1849.0], [240.0, 1851.0], [255.0, 479.0], [254.0, 455.0], [253.0, 444.5], [251.0, 438.0], [250.0, 435.0], [249.0, 1788.0], [248.0, 2254.0], [269.0, 1925.0], [271.0, 706.5], [268.0, 1927.0], [267.0, 1931.0], [266.0, 2590.0], [265.0, 1943.5], [263.0, 1700.5], [261.0, 2402.5], [259.0, 1715.0], [258.0, 1729.0], [257.0, 978.0], [256.0, 504.0], [286.0, 2249.0], [287.0, 2219.0], [285.0, 1647.0], [284.0, 1833.0], [283.0, 2270.0], [282.0, 1648.0], [281.0, 2279.0], [280.0, 1859.0], [279.0, 1866.0], [273.0, 1884.0], [272.0, 1901.0], [275.0, 1893.0], [274.0, 1885.0], [278.0, 1865.0], [277.0, 1875.0], [276.0, 1873.0], [302.0, 2673.0], [303.0, 2666.0], [301.0, 2677.0], [300.0, 1741.0], [299.0, 1747.0], [298.0, 1764.0], [297.0, 1771.0], [296.0, 2169.0], [295.0, 908.0], [289.0, 1816.0], [288.0, 1825.0], [291.0, 1812.0], [290.0, 2207.0], [294.0, 908.0], [293.0, 2201.0], [292.0, 2203.0], [318.0, 1915.0], [319.0, 1915.0], [317.0, 1923.0], [316.0, 1929.0], [315.0, 1032.0], [314.0, 1949.0], [313.0, 1952.0], [312.0, 1984.0], [310.0, 1993.0], [305.0, 1712.0], [304.0, 2657.0], [307.0, 2292.0], [306.0, 1709.0], [309.0, 2259.0], [308.0, 2291.0], [334.0, 1829.0], [335.0, 1827.0], [333.0, 1831.0], [332.0, 1840.0], [331.0, 1848.0], [330.0, 1858.0], [329.0, 1870.0], [328.0, 1880.0], [327.0, 1083.0], [321.0, 2234.0], [320.0, 1913.0], [323.0, 1902.0], [322.0, 1673.0], [326.0, 2219.0], [325.0, 1677.0], [324.0, 1211.0], [350.0, 1722.0], [351.0, 2272.0], [349.0, 1724.0], [348.0, 1155.0], [347.0, 1236.0], [346.0, 1742.0], [345.0, 1753.5], [343.0, 1756.0], [337.0, 1816.0], [336.0, 1818.0], [339.0, 1113.0], [338.0, 1114.0], [342.0, 262.0], [341.0, 1796.0], [340.0, 1798.0], [366.0, 1288.0], [367.0, 1294.0], [365.0, 1286.0], [364.0, 1255.0], [363.0, 1382.0], [362.0, 2333.0], [361.0, 1856.0], [360.0, 2356.0], [359.0, 2356.0], [353.0, 1164.0], [352.0, 1726.0], [355.0, 1181.0], [354.0, 1887.0], [358.0, 2358.0], [357.0, 2366.0], [356.0, 1184.0], [382.0, 1847.0], [383.0, 1351.0], [381.0, 1848.0], [380.0, 1849.0], [379.0, 2245.0], [378.0, 2247.0], [377.0, 1410.0], [376.0, 1335.0], [375.0, 1863.0], [368.0, 1896.0], [370.0, 1887.0], [369.0, 1891.0], [374.0, 2078.5], [372.0, 1881.0], [398.0, 1881.0], [399.0, 1874.0], [397.0, 1888.0], [396.0, 1354.0], [395.0, 1354.0], [394.0, 1902.0], [393.0, 1910.0], [392.0, 1922.0], [390.0, 1938.0], [387.0, 1533.0], [386.0, 1337.0], [385.0, 2222.0], [384.0, 1577.0], [388.0, 1954.0], [414.0, 1408.0], [415.0, 2365.0], [413.0, 2196.5], [403.0, 1858.0], [402.0, 1859.0], [401.0, 2087.5], [411.0, 1402.0], [410.0, 1404.0], [409.0, 1403.0], [408.0, 2392.0], [407.0, 1827.0], [406.0, 1850.0], [405.0, 1852.0], [404.0, 1856.0], [430.0, 1943.0], [431.0, 1518.0], [429.0, 1948.0], [428.0, 1953.0], [427.0, 2325.0], [426.0, 1957.0], [425.0, 1960.0], [424.0, 1632.0], [423.0, 1645.0], [419.0, 1989.5], [417.0, 1993.0], [422.0, 2332.0], [421.0, 2357.0], [420.0, 1418.0], [445.0, 2092.0], [447.0, 2083.5], [444.0, 2094.0], [443.0, 2096.0], [442.0, 2095.0], [441.0, 2106.0], [439.0, 2320.0], [437.0, 2364.0], [435.0, 1908.0], [434.0, 1913.0], [433.0, 1923.0], [432.0, 1928.0], [462.0, 2015.0], [463.0, 2316.0], [461.0, 2172.0], [451.0, 2055.0], [450.0, 1493.0], [449.0, 2078.0], [459.0, 2696.0], [458.0, 2695.0], [457.0, 1881.0], [456.0, 2028.0], [455.0, 2031.0], [454.0, 2036.0], [453.0, 2056.0], [452.0, 2048.0], [478.0, 1924.0], [479.0, 1919.0], [477.0, 1927.0], [476.0, 1933.0], [475.0, 1936.0], [474.0, 1953.0], [473.0, 1955.0], [472.0, 1975.0], [471.0, 1983.0], [465.0, 2006.0], [464.0, 2672.0], [467.0, 2342.0], [466.0, 2352.0], [470.0, 2317.0], [469.0, 2328.0], [468.0, 2333.0], [494.0, 2019.0], [495.0, 1997.0], [493.0, 1942.0], [492.0, 2035.0], [491.0, 2395.0], [490.0, 2317.0], [489.0, 2339.0], [488.0, 2341.0], [487.0, 2350.0], [481.0, 1913.0], [480.0, 1915.0], [483.0, 1930.0], [482.0, 2061.0], [486.0, 2360.0], [485.0, 2371.0], [484.0, 2376.0], [510.0, 2088.0], [511.0, 2086.0], [509.0, 2091.0], [508.0, 2100.0], [507.0, 2105.0], [506.0, 2107.0], [505.0, 2113.0], [504.0, 2114.0], [503.0, 2119.0], [497.0, 2833.0], [496.0, 2392.0], [499.0, 2129.0], [498.0, 2131.0], [502.0, 2123.0], [501.0, 2123.0], [500.0, 2127.0], [540.0, 2875.0], [543.0, 1974.0], [529.0, 1971.0], [528.0, 1973.0], [531.0, 1967.0], [530.0, 1969.0], [533.0, 1952.0], [532.0, 1965.0], [542.0, 2011.0], [541.0, 2878.0], [539.0, 2277.0], [538.0, 1945.0], [537.0, 2029.0], [536.0, 2295.0], [527.0, 1982.0], [513.0, 2060.0], [512.0, 2076.0], [515.0, 1527.0], [514.0, 1519.0], [517.0, 1526.0], [516.0, 1527.0], [519.0, 2042.0], [518.0, 2047.0], [526.0, 2016.0], [525.0, 2018.0], [524.0, 2020.0], [523.0, 2331.0], [522.0, 1530.0], [521.0, 2787.0], [520.0, 2039.0], [535.0, 1936.0], [534.0, 1557.0], [572.0, 1908.0], [575.0, 2244.0], [561.0, 1990.0], [560.0, 2001.0], [563.0, 1981.0], [562.0, 1485.0], [565.0, 1973.0], [564.0, 1974.0], [574.0, 2229.0], [573.0, 2748.0], [571.0, 1916.0], [570.0, 1920.0], [569.0, 1925.0], [568.0, 1930.0], [559.0, 2003.0], [545.0, 2296.0], [544.0, 2316.0], [547.0, 2380.0], [546.0, 2386.0], [549.0, 2365.0], [548.0, 2373.0], [551.0, 2088.0], [550.0, 2362.0], [558.0, 2013.0], [557.0, 2020.0], [556.0, 2022.0], [555.0, 2028.0], [554.0, 5.0], [553.0, 1522.0], [552.0, 1525.0], [567.0, 1965.0], [566.0, 1967.0], [600.0, 1950.0], [604.0, 1531.0], [607.0, 2329.0], [593.0, 4368.0], [592.0, 1505.0], [596.0, 1963.5], [594.0, 1971.0], [606.0, 2336.0], [605.0, 1533.0], [603.0, 1532.0], [602.0, 1941.0], [601.0, 1946.0], [591.0, 1501.0], [577.0, 2017.0], [576.0, 2799.0], [579.0, 2006.0], [578.0, 2015.0], [581.0, 2001.0], [580.0, 2003.0], [583.0, 1519.0], [582.0, 1999.0], [590.0, 1938.0], [589.0, 1940.0], [588.0, 1943.0], [587.0, 1946.0], [586.0, 2129.5], [584.0, 667.0], [599.0, 1951.0], [598.0, 1955.0], [633.0, 2932.0], [638.0, 2879.0], [639.0, 3563.0], [625.0, 1913.0], [624.0, 359.0], [627.0, 1986.0], [626.0, 1991.0], [637.0, 1997.0], [636.0, 1997.0], [635.0, 2123.5], [632.0, 1977.6666666666667], [615.0, 1972.5], [613.0, 1978.0], [611.0, 2160.5], [609.0, 3529.0], [608.0, 2314.0], [623.0, 1997.0], [622.0, 1919.0], [621.0, 1548.0], [620.0, 1546.0], [619.0, 1543.0], [618.0, 1958.0], [617.0, 1536.0], [616.0, 1536.0], [629.0, 1979.0], [628.0, 1989.0], [668.0, 2892.0], [671.0, 2941.5], [657.0, 2513.0], [656.0, 1955.0], [659.0, 3211.5], [658.0, 2454.0], [661.0, 1603.0], [660.0, 1601.0], [670.0, 1967.0], [669.0, 1969.0], [667.0, 1983.0], [666.0, 1987.0], [665.0, 1992.0], [664.0, 3250.5], [655.0, 1957.0], [640.0, 1989.0], [643.0, 1982.0], [641.0, 1987.0], [645.0, 1601.0], [644.0, 1591.0], [647.0, 1602.0], [646.0, 1602.0], [654.0, 1604.0], [653.0, 1967.0], [652.0, 1969.0], [651.0, 1975.0], [650.0, 1983.0], [649.0, 1984.0], [648.0, 3767.666666666667], [663.0, 1600.0], [662.0, 1601.0], [700.0, 1964.0], [703.0, 404.0], [688.0, 322.0], [690.0, 1953.0], [689.0, 1958.0], [692.0, 1947.0], [691.0, 1947.0], [702.0, 1950.0], [701.0, 1959.0], [699.0, 1969.0], [698.0, 310.0], [697.0, 1596.0], [696.0, 1921.5], [687.0, 3543.0], [672.0, 2880.0], [674.0, 2906.0], [673.0, 2748.5], [676.0, 2032.0], [675.0, 1932.0], [679.0, 1992.0], [678.0, 2021.0], [686.0, 2862.0], [685.0, 1606.0], [684.0, 1602.0], [683.0, 1604.0], [682.0, 1603.0], [681.0, 1990.0], [680.0, 1995.0], [694.0, 1931.0], [693.0, 1943.0], [732.0, 2209.5], [735.0, 2017.0], [720.0, 2871.0], [722.0, 1950.0], [721.0, 1957.0], [725.0, 2586.0], [723.0, 1945.0], [734.0, 2031.0], [733.0, 2017.0], [731.0, 3053.5], [730.0, 4692.75], [729.0, 4175.0], [728.0, 2526.0], [719.0, 2406.0], [705.0, 1957.0], [704.0, 2061.0], [707.0, 2540.0], [706.0, 2909.0], [709.0, 2045.0], [708.0, 2048.0], [711.0, 1611.0], [710.0, 2036.0], [717.0, 1966.5], [715.0, 1969.0], [714.0, 1992.0], [713.0, 1608.0], [712.0, 1610.0], [727.0, 1982.0], [726.0, 3015.5], [761.0, 2551.0], [766.0, 2913.0], [767.0, 2945.0], [752.0, 1996.0], [754.0, 1992.0], [753.0, 1610.0], [765.0, 3099.5], [764.0, 3564.5], [763.0, 2729.0], [751.0, 3305.0], [737.0, 2023.0], [736.0, 1613.0], [740.0, 3226.0], [739.0, 2751.0], [743.0, 2619.0], [741.0, 2923.0], [750.0, 2004.0], [749.0, 2012.0], [748.0, 1617.0], [747.0, 1615.0], [746.0, 2025.0], [745.0, 2012.0], [744.0, 2013.0], [759.0, 1981.5], [757.0, 3014.5], [756.0, 1987.0], [755.0, 1988.0], [793.0, 1629.0], [798.0, 2574.0], [799.0, 1629.0], [784.0, 2236.0], [787.0, 1625.0], [785.0, 1692.0], [789.0, 2591.0], [788.0, 3314.75], [797.0, 2388.0], [795.0, 2593.0], [794.0, 1627.0], [792.0, 1641.0], [775.0, 2130.0], [774.0, 2567.0], [773.0, 2145.5], [771.0, 3115.0], [770.0, 2113.5], [768.0, 3367.5], [783.0, 2179.0], [782.0, 2204.0], [781.0, 2209.0], [780.0, 2210.0], [779.0, 2223.0], [778.0, 2146.0], [777.0, 3258.0], [776.0, 2127.0], [791.0, 2578.0], [790.0, 2897.0], [828.0, 1659.0], [831.0, 2567.0], [817.0, 3557.5], [816.0, 2621.0], [819.0, 3695.0], [818.0, 3291.0], [821.0, 2253.0], [820.0, 2208.0], [830.0, 1852.5], [829.0, 1649.0], [827.0, 1659.0], [826.0, 1666.0], [825.0, 2589.0], [824.0, 3626.3333333333335], [815.0, 1647.0], [801.0, 2172.0], [800.0, 2180.0], [803.0, 2200.0], [802.0, 2208.0], [805.0, 2614.0], [804.0, 2616.0], [807.0, 2190.0], [806.0, 2195.0], [814.0, 1643.0], [813.0, 3450.2], [811.0, 2894.5], [810.0, 2911.5], [809.0, 2592.0], [808.0, 2595.0], [823.0, 2627.0], [822.0, 2247.0], [860.0, 2542.0], [863.0, 2708.5], [848.0, 2552.0], [850.0, 1636.0], [849.0, 2185.0], [852.0, 3232.0], [851.0, 1635.0], [862.0, 3146.0], [861.0, 2861.0], [859.0, 2684.0], [858.0, 3170.5], [857.0, 2844.0], [856.0, 2300.0], [847.0, 1655.0], [832.0, 2213.0], [834.0, 3124.0], [833.0, 2566.0], [837.0, 2232.0], [836.0, 2807.0], [839.0, 3365.5], [838.0, 2247.0], [846.0, 3471.5], [845.0, 2858.0], [844.0, 2965.6666666666665], [842.0, 4138.0], [841.0, 1654.0], [840.0, 1652.0], [854.0, 3099.0], [853.0, 2597.0], [892.0, 1756.0], [895.0, 2812.0], [881.0, 2173.0], [880.0, 2150.0], [883.0, 2171.0], [882.0, 2172.0], [885.0, 2155.0], [884.0, 2169.0], [894.0, 2666.0], [893.0, 2172.0], [891.0, 1757.0], [890.0, 2184.0], [889.0, 1779.0], [888.0, 2193.0], [879.0, 1745.0], [865.0, 3203.75], [864.0, 1556.0], [867.0, 2182.0], [866.0, 3429.6666666666665], [869.0, 2175.0], [868.0, 2176.0], [871.0, 1721.0], [870.0, 3063.6666666666665], [878.0, 1745.0], [877.0, 1746.0], [876.0, 1748.0], [875.0, 2763.0], [874.0, 1750.0], [873.0, 1738.5], [887.0, 2203.0], [886.0, 1745.0], [922.0, 1807.0], [926.0, 3297.3333333333335], [927.0, 399.0], [913.0, 1796.0], [912.0, 3304.0], [915.0, 3790.75], [914.0, 1793.0], [917.0, 2796.0], [916.0, 1964.5], [925.0, 2531.3333333333335], [924.0, 1785.0], [923.0, 2458.0], [921.0, 2629.4], [903.0, 2167.0], [902.0, 1779.0], [901.0, 2205.0], [900.0, 1823.0], [899.0, 2948.0], [898.0, 1764.0], [897.0, 3290.75], [896.0, 3307.5], [911.0, 2175.0], [910.0, 2200.0], [909.0, 2176.0], [908.0, 1800.0], [906.0, 1802.0], [905.0, 2843.0], [904.0, 2192.0], [919.0, 3261.8], [918.0, 3033.3333333333335], [956.0, 2301.6666666666665], [959.0, 1776.0], [945.0, 2592.3333333333335], [944.0, 3255.5], [947.0, 1800.0], [946.0, 1802.0], [949.0, 3399.0], [948.0, 2388.0], [958.0, 1777.0], [957.0, 3332.0], [955.0, 1794.0], [954.0, 1796.0], [953.0, 1801.0], [952.0, 1803.0], [943.0, 2970.0], [929.0, 2157.0], [928.0, 2299.5], [931.0, 1782.0], [930.0, 1777.0], [933.0, 2939.0], [932.0, 1780.0], [935.0, 2475.0], [934.0, 3237.9999999999995], [942.0, 3572.0], [941.0, 2777.6666666666665], [940.0, 2488.5], [938.0, 2791.5], [937.0, 1820.0], [936.0, 1788.0], [951.0, 1801.0], [950.0, 1804.0], [988.0, 2187.0], [991.0, 2405.6470588235293], [977.0, 2123.0], [976.0, 2592.0], [979.0, 2671.0526315789475], [978.0, 2121.0], [981.0, 1704.0], [980.0, 1704.0], [990.0, 2023.5384615384617], [989.0, 2376.0487804878044], [987.0, 2537.866666666667], [986.0, 2110.0], [985.0, 2423.4166666666665], [984.0, 2064.5555555555557], [975.0, 2512.4], [961.0, 764.0], [960.0, 2113.0], [963.0, 2517.0], [962.0, 2559.0], [965.0, 2165.0], [964.0, 2135.5], [967.0, 2080.0], [966.0, 1243.0], [974.0, 2420.75], [973.0, 2394.25], [972.0, 410.0], [971.0, 2221.2], [970.0, 2131.5], [969.0, 2708.0], [968.0, 2402.0], [983.0, 1996.4444444444446], [982.0, 2251.071428571429], [1000.0, 1987.5495495495502], [999.0, 2145.0909090909095], [998.0, 2704.417840375588], [997.0, 2512.511111111111], [996.0, 2552.6396396396385], [995.0, 2375.3333333333335], [994.0, 2330.9130434782614], [993.0, 2145.0], [992.0, 1174.0], [1.0, 2.0]], "isOverall": false, "label": "/CarManageService/getByPlateNumberCM", "isController": false}, {"data": [[739.2369999999997, 2204.7274999999986]], "isOverall": false, "label": "/CarManageService/getByPlateNumberCM-Aggregated", "isController": false}, {"data": [[2.0, 1411.0], [3.0, 2101.5], [7.0, 2428.0], [20.0, 2311.0], [21.0, 1760.0], [75.0, 1178.0], [72.0, 1561.0], [118.0, 1142.0], [143.0, 1931.0], [176.0, 1848.0], [198.0, 1172.0], [193.0, 1184.0], [211.0, 1177.5], [210.0, 2288.5], [235.0, 1275.0], [254.0, 1206.0], [271.0, 931.0], [280.0, 1184.5], [298.0, 1174.0], [297.0, 1174.0], [295.0, 1115.0], [293.0, 1122.0], [315.0, 1159.25], [329.0, 1262.5], [326.0, 1160.0], [323.0, 1219.0], [321.0, 1074.0], [320.0, 1878.0], [350.0, 1168.0], [347.0, 1572.5], [339.0, 1269.0], [337.0, 1180.0], [366.0, 1464.0], [367.0, 1300.0], [365.0, 1371.0], [364.0, 1385.0], [362.0, 1342.0], [361.0, 1325.5], [356.0, 1336.3333333333333], [354.0, 1247.0], [353.0, 1322.6666666666667], [382.0, 1809.0], [378.0, 1387.0], [376.0, 1401.0], [375.0, 1336.0], [368.0, 1486.0], [396.0, 1588.0], [394.0, 1577.0], [386.0, 1443.0], [414.0, 1654.0], [413.0, 1415.0], [411.0, 1584.0], [410.0, 1881.0], [428.0, 1729.0], [419.0, 1774.5], [450.0, 1739.5], [465.0, 1704.0], [538.0, 515.0], [534.0, 1609.6666666666665], [526.0, 2897.0], [522.0, 1728.0], [513.0, 1567.0], [575.0, 2434.0], [562.0, 1622.0], [554.0, 1826.0], [553.0, 1524.0], [552.0, 1529.0], [550.0, 2120.0], [604.0, 2024.0], [602.0, 1857.0], [588.0, 4907.0], [587.0, 2376.0], [583.0, 1523.0], [582.0, 1520.0], [622.0, 3979.0], [618.0, 1560.0], [617.0, 2019.0], [616.0, 1548.0], [608.0, 1169.0], [668.0, 1664.0], [661.0, 1681.0], [654.0, 1701.5], [648.0, 1027.5], [646.0, 1675.5], [645.0, 2833.5], [644.0, 1685.0], [697.0, 658.0], [696.0, 1158.0], [693.0, 2667.0], [685.0, 1701.0], [681.0, 767.0], [735.0, 3348.0], [730.0, 1674.5], [726.0, 1713.5], [710.0, 2594.0], [766.0, 1671.0], [764.0, 1670.25], [751.0, 1685.5], [746.0, 1683.0], [736.0, 1711.0], [799.0, 2243.5], [798.0, 1727.0], [794.0, 1862.0], [792.0, 2165.0], [788.0, 1632.25], [783.0, 1560.6666666666667], [779.0, 2974.0], [777.0, 2112.5], [830.0, 1767.0], [828.0, 1120.6666666666667], [826.0, 509.0], [825.0, 2311.0], [822.0, 2328.0], [815.0, 1783.5], [813.0, 117.0], [808.0, 1737.0], [858.0, 1792.0], [852.0, 961.5], [863.0, 1742.0], [862.0, 1751.0], [856.0, 1620.0], [839.0, 1701.5], [851.0, 1216.0], [847.0, 1665.0], [846.0, 1672.0], [845.0, 1676.0], [844.0, 1693.3333333333333], [841.0, 1719.0], [870.0, 1588.3333333333335], [894.0, 2369.75], [889.0, 1772.0], [886.0, 1371.25], [885.0, 1771.0], [879.0, 1753.0], [877.0, 1749.0], [875.0, 1750.0], [873.0, 2875.0], [869.0, 1798.0], [866.0, 2144.5833333333335], [865.0, 2085.4], [864.0, 1723.0], [916.0, 1804.0], [926.0, 1808.0], [925.0, 3703.0], [922.0, 2029.3333333333333], [921.0, 2240.0], [910.0, 1817.857142857143], [899.0, 1816.3333333333335], [897.0, 1798.0], [902.0, 1818.0], [901.0, 1839.8], [909.0, 1829.8000000000002], [908.0, 1836.5], [905.0, 2207.75], [919.0, 1800.7096774193549], [918.0, 1782.75], [917.0, 1781.5], [915.0, 1809.7272727272727], [912.0, 1815.0], [956.0, 1804.0], [957.0, 1805.6], [954.0, 1805.0], [953.0, 2690.5], [949.0, 1814.0], [948.0, 1834.5], [945.0, 1844.5000000000002], [944.0, 1235.3333333333333], [943.0, 1829.0], [929.0, 1449.0], [928.0, 1838.0], [935.0, 1814.0], [931.0, 1829.0], [942.0, 1991.5714285714287], [938.0, 1845.0], [936.0, 1650.076923076923], [985.0, 1664.4444444444441], [990.0, 1800.3333333333333], [991.0, 1809.0], [976.0, 1730.5], [989.0, 929.6363636363635], [987.0, 1641.5882352941176], [986.0, 1678.0], [984.0, 1344.3333333333333], [967.0, 1800.5555555555557], [966.0, 1812.2], [965.0, 1825.5], [964.0, 1837.1000000000001], [963.0, 1819.4545454545455], [962.0, 2008.0], [961.0, 1822.2], [975.0, 1609.1999999999998], [974.0, 1720.375], [973.0, 1762.72], [971.0, 1831.1999999999998], [970.0, 1581.2142857142858], [969.0, 1720.0937500000002], [968.0, 1793.5238095238096], [983.0, 1667.8333333333333], [982.0, 1684.3999999999999], [981.0, 1294.25], [979.0, 1693.426229508197], [999.0, 3389.0490797546], [1000.0, 1885.801724137931], [998.0, 2600.0000000000014], [997.0, 1144.3], [996.0, 1502.9285714285713], [994.0, 1613.3777777777784], [992.0, 1768.5]], "isOverall": false, "label": "/CarManageService/renewCM", "isController": false}, {"data": [[939.9234999999986, 1939.3545]], "isOverall": false, "label": "/CarManageService/renewCM-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 102.0, "minX": 1.629807608E12, "maxY": 127510.5, "series": [{"data": [[1.629807612E12, 81324.0], [1.629807614E12, 127510.5], [1.629807616E12, 120121.5], [1.629807608E12, 102.0], [1.629807618E12, 113373.0], [1.62980761E12, 40569.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.629807612E12, 84953.5], [1.629807614E12, 102254.5], [1.629807616E12, 111329.5], [1.629807608E12, 121.5], [1.629807618E12, 83161.5], [1.62980761E12, 48179.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629807618E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.629807608E12, "maxY": 2724.734729493892, "series": [{"data": [[1.629807612E12, 2059.3719512195116], [1.629807614E12, 2483.8477306002937], [1.629807616E12, 2558.7048054919887], [1.629807618E12, 1760.6302521008404], [1.62980761E12, 3.0]], "isOverall": false, "label": "/CarManageService/getByPlateNumberCM", "isController": false}, {"data": [[1.629807612E12, 2724.734729493892], [1.629807614E12, 1808.1107594936693], [1.629807616E12, 1780.5568965517248], [1.629807608E12, 281.0], [1.629807618E12, 1608.5851851851846], [1.62980761E12, 1255.46835443038]], "isOverall": false, "label": "/CarManageService/renewCM", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629807618E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.629807608E12, "maxY": 2724.7085514834184, "series": [{"data": [[1.629807612E12, 2059.3597560975613], [1.629807614E12, 2483.8257686676416], [1.629807616E12, 2558.693363844392], [1.629807618E12, 1760.6148459383746], [1.62980761E12, 3.0]], "isOverall": false, "label": "/CarManageService/getByPlateNumberCM", "isController": false}, {"data": [[1.629807612E12, 2724.7085514834184], [1.629807614E12, 1808.0981012658226], [1.629807616E12, 1780.5500000000002], [1.629807608E12, 277.0], [1.629807618E12, 1608.57037037037], [1.62980761E12, 1255.4379746835432]], "isOverall": false, "label": "/CarManageService/renewCM", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629807618E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.629807608E12, "maxY": 748.5986038394416, "series": [{"data": [[1.629807612E12, 0.0], [1.629807614E12, 0.0], [1.629807616E12, 0.0], [1.629807618E12, 0.0], [1.62980761E12, 0.0]], "isOverall": false, "label": "/CarManageService/getByPlateNumberCM", "isController": false}, {"data": [[1.629807612E12, 748.5986038394416], [1.629807614E12, 15.848101265822793], [1.629807616E12, 0.0], [1.629807608E12, 248.0], [1.629807618E12, 0.0], [1.62980761E12, 187.56962025316446]], "isOverall": false, "label": "/CarManageService/renewCM", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629807618E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.629807608E12, "maxY": 5621.0, "series": [{"data": [[1.629807612E12, 4267.0], [1.629807614E12, 5517.0], [1.629807616E12, 5434.0], [1.629807608E12, 281.0], [1.629807618E12, 5621.0], [1.62980761E12, 2467.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.629807612E12, 3634.8], [1.629807614E12, 3115.0], [1.629807616E12, 3313.0], [1.629807608E12, 281.0], [1.629807618E12, 2352.0], [1.62980761E12, 2037.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.629807612E12, 4198.58], [1.629807614E12, 4563.0], [1.629807616E12, 4540.459999999994], [1.629807608E12, 281.0], [1.629807618E12, 3979.5], [1.62980761E12, 2431.5399999999995]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.629807612E12, 4069.1], [1.629807614E12, 3772.0], [1.629807616E12, 3713.5999999999995], [1.629807608E12, 281.0], [1.629807618E12, 2672.5], [1.62980761E12, 2230.7999999999997]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.629807612E12, 2.0], [1.629807614E12, 2.0], [1.629807616E12, 2.0], [1.629807608E12, 281.0], [1.629807618E12, 2.0], [1.62980761E12, 3.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.629807612E12, 2451.0], [1.629807614E12, 2349.0], [1.629807616E12, 1805.0], [1.629807608E12, 281.0], [1.629807618E12, 1870.0], [1.62980761E12, 1160.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629807618E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 281.0, "minX": 1.0, "maxY": 2988.0, "series": [{"data": [[1.0, 281.0], [512.0, 1777.0], [547.0, 2600.0], [316.0, 1270.5], [81.0, 717.0], [349.0, 2285.0], [340.0, 1547.0], [388.0, 2988.0], [452.0, 1835.0], [505.0, 1945.0], [509.0, 1943.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 547.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 277.0, "minX": 1.0, "maxY": 2988.0, "series": [{"data": [[1.0, 277.0], [512.0, 1777.0], [547.0, 2600.0], [316.0, 1270.5], [81.0, 717.0], [349.0, 2285.0], [340.0, 1547.0], [388.0, 2988.0], [452.0, 1835.0], [505.0, 1945.0], [509.0, 1943.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 547.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 72.0, "minX": 1.629807608E12, "maxY": 491.0, "series": [{"data": [[1.629807612E12, 368.0], [1.629807614E12, 491.0], [1.629807616E12, 370.0], [1.629807608E12, 211.5], [1.629807618E12, 72.0], [1.62980761E12, 487.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629807618E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.629807608E12, "maxY": 508.5, "series": [{"data": [[1.629807612E12, 368.5], [1.629807614E12, 499.5], [1.629807616E12, 508.5], [1.629807608E12, 0.5], [1.629807618E12, 424.5], [1.62980761E12, 198.5]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629807618E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.629807608E12, "maxY": 357.0, "series": [{"data": [[1.629807612E12, 286.5], [1.629807614E12, 158.0], [1.629807616E12, 290.0], [1.629807608E12, 0.5], [1.629807618E12, 67.5], [1.62980761E12, 197.5]], "isOverall": false, "label": "/CarManageService/renewCM-success", "isController": false}, {"data": [[1.629807612E12, 82.0], [1.629807614E12, 341.5], [1.629807616E12, 218.5], [1.629807618E12, 357.0], [1.62980761E12, 1.0]], "isOverall": false, "label": "/CarManageService/getByPlateNumberCM-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629807618E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.629807608E12, "maxY": 508.5, "series": [{"data": [[1.629807612E12, 368.5], [1.629807614E12, 499.5], [1.629807616E12, 508.5], [1.629807608E12, 0.5], [1.629807618E12, 424.5], [1.62980761E12, 198.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629807618E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

