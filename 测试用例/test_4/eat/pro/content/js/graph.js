/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 13226.0, "series": [{"data": [[0.0, 3.0], [0.1, 4.0], [0.2, 7.0], [0.3, 11.0], [0.4, 247.0], [0.5, 529.0], [0.6, 563.0], [0.7, 569.0], [0.8, 916.0], [0.9, 965.0], [1.0, 1039.0], [1.1, 1056.0], [1.2, 1071.0], [1.3, 1075.0], [1.4, 1076.0], [1.5, 1087.0], [1.6, 1137.0], [1.7, 1151.0], [1.8, 1164.0], [1.9, 1169.0], [2.0, 1171.0], [2.1, 1211.0], [2.2, 1241.0], [2.3, 1243.0], [2.4, 1246.0], [2.5, 1248.0], [2.6, 1251.0], [2.7, 1273.0], [2.8, 1280.0], [2.9, 1284.0], [3.0, 1288.0], [3.1, 1291.0], [3.2, 1296.0], [3.3, 1305.0], [3.4, 1308.0], [3.5, 1320.0], [3.6, 1333.0], [3.7, 1336.0], [3.8, 1346.0], [3.9, 1352.0], [4.0, 1356.0], [4.1, 1364.0], [4.2, 1368.0], [4.3, 1373.0], [4.4, 1375.0], [4.5, 1380.0], [4.6, 1382.0], [4.7, 1385.0], [4.8, 1394.0], [4.9, 1403.0], [5.0, 1409.0], [5.1, 1412.0], [5.2, 1415.0], [5.3, 1417.0], [5.4, 1421.0], [5.5, 1423.0], [5.6, 1433.0], [5.7, 1440.0], [5.8, 1453.0], [5.9, 1457.0], [6.0, 1458.0], [6.1, 1465.0], [6.2, 1472.0], [6.3, 1473.0], [6.4, 1479.0], [6.5, 1488.0], [6.6, 1490.0], [6.7, 1499.0], [6.8, 1516.0], [6.9, 1525.0], [7.0, 1530.0], [7.1, 1534.0], [7.2, 1543.0], [7.3, 1551.0], [7.4, 1564.0], [7.5, 1574.0], [7.6, 1577.0], [7.7, 1583.0], [7.8, 1594.0], [7.9, 1603.0], [8.0, 1614.0], [8.1, 1631.0], [8.2, 1649.0], [8.3, 1650.0], [8.4, 1656.0], [8.5, 1660.0], [8.6, 1668.0], [8.7, 1675.0], [8.8, 1678.0], [8.9, 1684.0], [9.0, 1688.0], [9.1, 1693.0], [9.2, 1705.0], [9.3, 1710.0], [9.4, 1712.0], [9.5, 1714.0], [9.6, 1715.0], [9.7, 1720.0], [9.8, 1723.0], [9.9, 1731.0], [10.0, 1737.0], [10.1, 1741.0], [10.2, 1742.0], [10.3, 1745.0], [10.4, 1754.0], [10.5, 1759.0], [10.6, 1764.0], [10.7, 1768.0], [10.8, 1770.0], [10.9, 1774.0], [11.0, 1778.0], [11.1, 1782.0], [11.2, 1795.0], [11.3, 1808.0], [11.4, 1810.0], [11.5, 1811.0], [11.6, 1815.0], [11.7, 1829.0], [11.8, 1835.0], [11.9, 1839.0], [12.0, 1843.0], [12.1, 1848.0], [12.2, 1856.0], [12.3, 1860.0], [12.4, 1864.0], [12.5, 1875.0], [12.6, 1877.0], [12.7, 1886.0], [12.8, 1889.0], [12.9, 1891.0], [13.0, 1895.0], [13.1, 1903.0], [13.2, 1907.0], [13.3, 1911.0], [13.4, 1918.0], [13.5, 1919.0], [13.6, 1925.0], [13.7, 1926.0], [13.8, 1933.0], [13.9, 1934.0], [14.0, 1940.0], [14.1, 1958.0], [14.2, 1967.0], [14.3, 1976.0], [14.4, 1977.0], [14.5, 1980.0], [14.6, 1982.0], [14.7, 1983.0], [14.8, 1985.0], [14.9, 1990.0], [15.0, 1994.0], [15.1, 1994.0], [15.2, 1998.0], [15.3, 2012.0], [15.4, 2015.0], [15.5, 2024.0], [15.6, 2030.0], [15.7, 2035.0], [15.8, 2035.0], [15.9, 2037.0], [16.0, 2039.0], [16.1, 2042.0], [16.2, 2044.0], [16.3, 2047.0], [16.4, 2058.0], [16.5, 2065.0], [16.6, 2074.0], [16.7, 2079.0], [16.8, 2093.0], [16.9, 2106.0], [17.0, 2107.0], [17.1, 2109.0], [17.2, 2116.0], [17.3, 2119.0], [17.4, 2121.0], [17.5, 2125.0], [17.6, 2126.0], [17.7, 2131.0], [17.8, 2140.0], [17.9, 2145.0], [18.0, 2153.0], [18.1, 2167.0], [18.2, 2176.0], [18.3, 2187.0], [18.4, 2191.0], [18.5, 2195.0], [18.6, 2204.0], [18.7, 2209.0], [18.8, 2219.0], [18.9, 2221.0], [19.0, 2231.0], [19.1, 2233.0], [19.2, 2247.0], [19.3, 2261.0], [19.4, 2266.0], [19.5, 2268.0], [19.6, 2275.0], [19.7, 2277.0], [19.8, 2283.0], [19.9, 2301.0], [20.0, 2315.0], [20.1, 2320.0], [20.2, 2325.0], [20.3, 2332.0], [20.4, 2350.0], [20.5, 2366.0], [20.6, 2372.0], [20.7, 2376.0], [20.8, 2380.0], [20.9, 2384.0], [21.0, 2393.0], [21.1, 2403.0], [21.2, 2419.0], [21.3, 2422.0], [21.4, 2428.0], [21.5, 2443.0], [21.6, 2446.0], [21.7, 2452.0], [21.8, 2455.0], [21.9, 2457.0], [22.0, 2461.0], [22.1, 2461.0], [22.2, 2476.0], [22.3, 2487.0], [22.4, 2488.0], [22.5, 2491.0], [22.6, 2493.0], [22.7, 2497.0], [22.8, 2500.0], [22.9, 2504.0], [23.0, 2511.0], [23.1, 2512.0], [23.2, 2516.0], [23.3, 2520.0], [23.4, 2533.0], [23.5, 2537.0], [23.6, 2537.0], [23.7, 2538.0], [23.8, 2539.0], [23.9, 2540.0], [24.0, 2546.0], [24.1, 2549.0], [24.2, 2552.0], [24.3, 2553.0], [24.4, 2555.0], [24.5, 2558.0], [24.6, 2561.0], [24.7, 2564.0], [24.8, 2568.0], [24.9, 2569.0], [25.0, 2571.0], [25.1, 2573.0], [25.2, 2577.0], [25.3, 2580.0], [25.4, 2592.0], [25.5, 2595.0], [25.6, 2597.0], [25.7, 2600.0], [25.8, 2603.0], [25.9, 2604.0], [26.0, 2605.0], [26.1, 2608.0], [26.2, 2611.0], [26.3, 2613.0], [26.4, 2620.0], [26.5, 2625.0], [26.6, 2626.0], [26.7, 2633.0], [26.8, 2637.0], [26.9, 2640.0], [27.0, 2643.0], [27.1, 2646.0], [27.2, 2652.0], [27.3, 2654.0], [27.4, 2657.0], [27.5, 2661.0], [27.6, 2671.0], [27.7, 2674.0], [27.8, 2680.0], [27.9, 2686.0], [28.0, 2686.0], [28.1, 2694.0], [28.2, 2701.0], [28.3, 2706.0], [28.4, 2711.0], [28.5, 2728.0], [28.6, 2735.0], [28.7, 2741.0], [28.8, 2744.0], [28.9, 2748.0], [29.0, 2754.0], [29.1, 2758.0], [29.2, 2761.0], [29.3, 2763.0], [29.4, 2768.0], [29.5, 2771.0], [29.6, 2791.0], [29.7, 2794.0], [29.8, 2797.0], [29.9, 2803.0], [30.0, 2807.0], [30.1, 2813.0], [30.2, 2816.0], [30.3, 2818.0], [30.4, 2821.0], [30.5, 2824.0], [30.6, 2825.0], [30.7, 2826.0], [30.8, 2828.0], [30.9, 2837.0], [31.0, 2843.0], [31.1, 2845.0], [31.2, 2847.0], [31.3, 2851.0], [31.4, 2863.0], [31.5, 2868.0], [31.6, 2888.0], [31.7, 2888.0], [31.8, 2900.0], [31.9, 2904.0], [32.0, 2907.0], [32.1, 2916.0], [32.2, 2926.0], [32.3, 2927.0], [32.4, 2932.0], [32.5, 2936.0], [32.6, 2943.0], [32.7, 2945.0], [32.8, 2955.0], [32.9, 2958.0], [33.0, 2963.0], [33.1, 2964.0], [33.2, 2965.0], [33.3, 2965.0], [33.4, 2967.0], [33.5, 2968.0], [33.6, 2973.0], [33.7, 2976.0], [33.8, 2979.0], [33.9, 2983.0], [34.0, 2986.0], [34.1, 2988.0], [34.2, 2989.0], [34.3, 2990.0], [34.4, 2992.0], [34.5, 2994.0], [34.6, 3001.0], [34.7, 3005.0], [34.8, 3009.0], [34.9, 3009.0], [35.0, 3012.0], [35.1, 3014.0], [35.2, 3017.0], [35.3, 3023.0], [35.4, 3028.0], [35.5, 3033.0], [35.6, 3036.0], [35.7, 3044.0], [35.8, 3047.0], [35.9, 3056.0], [36.0, 3058.0], [36.1, 3061.0], [36.2, 3061.0], [36.3, 3075.0], [36.4, 3076.0], [36.5, 3080.0], [36.6, 3083.0], [36.7, 3085.0], [36.8, 3087.0], [36.9, 3088.0], [37.0, 3089.0], [37.1, 3091.0], [37.2, 3094.0], [37.3, 3097.0], [37.4, 3101.0], [37.5, 3103.0], [37.6, 3107.0], [37.7, 3108.0], [37.8, 3110.0], [37.9, 3114.0], [38.0, 3118.0], [38.1, 3119.0], [38.2, 3121.0], [38.3, 3123.0], [38.4, 3128.0], [38.5, 3130.0], [38.6, 3135.0], [38.7, 3142.0], [38.8, 3150.0], [38.9, 3158.0], [39.0, 3161.0], [39.1, 3162.0], [39.2, 3166.0], [39.3, 3188.0], [39.4, 3192.0], [39.5, 3204.0], [39.6, 3207.0], [39.7, 3211.0], [39.8, 3214.0], [39.9, 3217.0], [40.0, 3221.0], [40.1, 3225.0], [40.2, 3228.0], [40.3, 3230.0], [40.4, 3231.0], [40.5, 3232.0], [40.6, 3239.0], [40.7, 3249.0], [40.8, 3252.0], [40.9, 3255.0], [41.0, 3263.0], [41.1, 3264.0], [41.2, 3265.0], [41.3, 3268.0], [41.4, 3271.0], [41.5, 3272.0], [41.6, 3273.0], [41.7, 3280.0], [41.8, 3285.0], [41.9, 3287.0], [42.0, 3290.0], [42.1, 3295.0], [42.2, 3300.0], [42.3, 3301.0], [42.4, 3305.0], [42.5, 3309.0], [42.6, 3315.0], [42.7, 3321.0], [42.8, 3324.0], [42.9, 3324.0], [43.0, 3327.0], [43.1, 3338.0], [43.2, 3339.0], [43.3, 3346.0], [43.4, 3360.0], [43.5, 3366.0], [43.6, 3368.0], [43.7, 3369.0], [43.8, 3373.0], [43.9, 3376.0], [44.0, 3378.0], [44.1, 3385.0], [44.2, 3396.0], [44.3, 3398.0], [44.4, 3404.0], [44.5, 3407.0], [44.6, 3411.0], [44.7, 3418.0], [44.8, 3423.0], [44.9, 3424.0], [45.0, 3425.0], [45.1, 3426.0], [45.2, 3429.0], [45.3, 3431.0], [45.4, 3432.0], [45.5, 3435.0], [45.6, 3439.0], [45.7, 3441.0], [45.8, 3442.0], [45.9, 3443.0], [46.0, 3444.0], [46.1, 3445.0], [46.2, 3445.0], [46.3, 3445.0], [46.4, 3451.0], [46.5, 3458.0], [46.6, 3459.0], [46.7, 3462.0], [46.8, 3462.0], [46.9, 3462.0], [47.0, 3464.0], [47.1, 3464.0], [47.2, 3466.0], [47.3, 3468.0], [47.4, 3473.0], [47.5, 3481.0], [47.6, 3485.0], [47.7, 3486.0], [47.8, 3488.0], [47.9, 3489.0], [48.0, 3490.0], [48.1, 3492.0], [48.2, 3495.0], [48.3, 3498.0], [48.4, 3498.0], [48.5, 3500.0], [48.6, 3502.0], [48.7, 3503.0], [48.8, 3504.0], [48.9, 3505.0], [49.0, 3506.0], [49.1, 3507.0], [49.2, 3512.0], [49.3, 3514.0], [49.4, 3516.0], [49.5, 3517.0], [49.6, 3520.0], [49.7, 3524.0], [49.8, 3526.0], [49.9, 3530.0], [50.0, 3531.0], [50.1, 3532.0], [50.2, 3535.0], [50.3, 3537.0], [50.4, 3537.0], [50.5, 3539.0], [50.6, 3543.0], [50.7, 3545.0], [50.8, 3548.0], [50.9, 3549.0], [51.0, 3550.0], [51.1, 3559.0], [51.2, 3561.0], [51.3, 3563.0], [51.4, 3564.0], [51.5, 3566.0], [51.6, 3568.0], [51.7, 3570.0], [51.8, 3570.0], [51.9, 3573.0], [52.0, 3575.0], [52.1, 3576.0], [52.2, 3578.0], [52.3, 3579.0], [52.4, 3584.0], [52.5, 3587.0], [52.6, 3588.0], [52.7, 3590.0], [52.8, 3590.0], [52.9, 3591.0], [53.0, 3595.0], [53.1, 3597.0], [53.2, 3604.0], [53.3, 3616.0], [53.4, 3618.0], [53.5, 3619.0], [53.6, 3621.0], [53.7, 3623.0], [53.8, 3623.0], [53.9, 3626.0], [54.0, 3629.0], [54.1, 3632.0], [54.2, 3634.0], [54.3, 3635.0], [54.4, 3636.0], [54.5, 3637.0], [54.6, 3638.0], [54.7, 3639.0], [54.8, 3646.0], [54.9, 3646.0], [55.0, 3648.0], [55.1, 3653.0], [55.2, 3656.0], [55.3, 3657.0], [55.4, 3660.0], [55.5, 3662.0], [55.6, 3665.0], [55.7, 3665.0], [55.8, 3666.0], [55.9, 3668.0], [56.0, 3671.0], [56.1, 3675.0], [56.2, 3678.0], [56.3, 3682.0], [56.4, 3684.0], [56.5, 3687.0], [56.6, 3688.0], [56.7, 3692.0], [56.8, 3702.0], [56.9, 3707.0], [57.0, 3713.0], [57.1, 3715.0], [57.2, 3719.0], [57.3, 3724.0], [57.4, 3725.0], [57.5, 3726.0], [57.6, 3731.0], [57.7, 3733.0], [57.8, 3734.0], [57.9, 3734.0], [58.0, 3736.0], [58.1, 3739.0], [58.2, 3741.0], [58.3, 3744.0], [58.4, 3746.0], [58.5, 3747.0], [58.6, 3748.0], [58.7, 3767.0], [58.8, 3770.0], [58.9, 3771.0], [59.0, 3772.0], [59.1, 3777.0], [59.2, 3786.0], [59.3, 3792.0], [59.4, 3802.0], [59.5, 3808.0], [59.6, 3813.0], [59.7, 3815.0], [59.8, 3823.0], [59.9, 3834.0], [60.0, 3836.0], [60.1, 3837.0], [60.2, 3843.0], [60.3, 3848.0], [60.4, 3851.0], [60.5, 3854.0], [60.6, 3861.0], [60.7, 3861.0], [60.8, 3867.0], [60.9, 3869.0], [61.0, 3880.0], [61.1, 3881.0], [61.2, 3886.0], [61.3, 3889.0], [61.4, 3890.0], [61.5, 3893.0], [61.6, 3903.0], [61.7, 3907.0], [61.8, 3911.0], [61.9, 3915.0], [62.0, 3916.0], [62.1, 3919.0], [62.2, 3920.0], [62.3, 3924.0], [62.4, 3926.0], [62.5, 3929.0], [62.6, 3931.0], [62.7, 3935.0], [62.8, 3936.0], [62.9, 3945.0], [63.0, 3951.0], [63.1, 3952.0], [63.2, 3960.0], [63.3, 3961.0], [63.4, 3962.0], [63.5, 3962.0], [63.6, 3963.0], [63.7, 3965.0], [63.8, 3965.0], [63.9, 3966.0], [64.0, 3967.0], [64.1, 3968.0], [64.2, 3970.0], [64.3, 3971.0], [64.4, 3974.0], [64.5, 3982.0], [64.6, 3985.0], [64.7, 3985.0], [64.8, 3986.0], [64.9, 3988.0], [65.0, 3992.0], [65.1, 3998.0], [65.2, 4000.0], [65.3, 4004.0], [65.4, 4016.0], [65.5, 4017.0], [65.6, 4017.0], [65.7, 4019.0], [65.8, 4024.0], [65.9, 4027.0], [66.0, 4032.0], [66.1, 4034.0], [66.2, 4035.0], [66.3, 4035.0], [66.4, 4038.0], [66.5, 4040.0], [66.6, 4041.0], [66.7, 4043.0], [66.8, 4050.0], [66.9, 4052.0], [67.0, 4055.0], [67.1, 4057.0], [67.2, 4058.0], [67.3, 4061.0], [67.4, 4066.0], [67.5, 4084.0], [67.6, 4086.0], [67.7, 4093.0], [67.8, 4097.0], [67.9, 4100.0], [68.0, 4107.0], [68.1, 4115.0], [68.2, 4116.0], [68.3, 4117.0], [68.4, 4124.0], [68.5, 4134.0], [68.6, 4135.0], [68.7, 4138.0], [68.8, 4141.0], [68.9, 4143.0], [69.0, 4144.0], [69.1, 4156.0], [69.2, 4160.0], [69.3, 4167.0], [69.4, 4184.0], [69.5, 4197.0], [69.6, 4200.0], [69.7, 4205.0], [69.8, 4207.0], [69.9, 4209.0], [70.0, 4214.0], [70.1, 4220.0], [70.2, 4224.0], [70.3, 4228.0], [70.4, 4246.0], [70.5, 4256.0], [70.6, 4293.0], [70.7, 4298.0], [70.8, 4304.0], [70.9, 4308.0], [71.0, 4311.0], [71.1, 4314.0], [71.2, 4315.0], [71.3, 4324.0], [71.4, 4332.0], [71.5, 4336.0], [71.6, 4338.0], [71.7, 4342.0], [71.8, 4344.0], [71.9, 4347.0], [72.0, 4349.0], [72.1, 4350.0], [72.2, 4353.0], [72.3, 4359.0], [72.4, 4362.0], [72.5, 4370.0], [72.6, 4375.0], [72.7, 4380.0], [72.8, 4383.0], [72.9, 4394.0], [73.0, 4395.0], [73.1, 4405.0], [73.2, 4412.0], [73.3, 4418.0], [73.4, 4419.0], [73.5, 4424.0], [73.6, 4427.0], [73.7, 4436.0], [73.8, 4443.0], [73.9, 4454.0], [74.0, 4471.0], [74.1, 4471.0], [74.2, 4480.0], [74.3, 4484.0], [74.4, 4501.0], [74.5, 4505.0], [74.6, 4508.0], [74.7, 4512.0], [74.8, 4515.0], [74.9, 4516.0], [75.0, 4523.0], [75.1, 4527.0], [75.2, 4533.0], [75.3, 4542.0], [75.4, 4548.0], [75.5, 4558.0], [75.6, 4559.0], [75.7, 4562.0], [75.8, 4565.0], [75.9, 4568.0], [76.0, 4570.0], [76.1, 4573.0], [76.2, 4576.0], [76.3, 4593.0], [76.4, 4594.0], [76.5, 4596.0], [76.6, 4603.0], [76.7, 4605.0], [76.8, 4615.0], [76.9, 4619.0], [77.0, 4622.0], [77.1, 4623.0], [77.2, 4629.0], [77.3, 4639.0], [77.4, 4649.0], [77.5, 4662.0], [77.6, 4663.0], [77.7, 4667.0], [77.8, 4677.0], [77.9, 4696.0], [78.0, 4714.0], [78.1, 4722.0], [78.2, 4729.0], [78.3, 4748.0], [78.4, 4751.0], [78.5, 4764.0], [78.6, 4778.0], [78.7, 4807.0], [78.8, 4820.0], [78.9, 4827.0], [79.0, 4839.0], [79.1, 4852.0], [79.2, 4867.0], [79.3, 4871.0], [79.4, 4876.0], [79.5, 4885.0], [79.6, 4891.0], [79.7, 4894.0], [79.8, 4898.0], [79.9, 4913.0], [80.0, 4918.0], [80.1, 4921.0], [80.2, 4922.0], [80.3, 4924.0], [80.4, 4926.0], [80.5, 4933.0], [80.6, 4933.0], [80.7, 4936.0], [80.8, 4954.0], [80.9, 4964.0], [81.0, 4967.0], [81.1, 4974.0], [81.2, 4982.0], [81.3, 4985.0], [81.4, 4988.0], [81.5, 4989.0], [81.6, 4991.0], [81.7, 4993.0], [81.8, 4995.0], [81.9, 4998.0], [82.0, 5000.0], [82.1, 5000.0], [82.2, 5001.0], [82.3, 5001.0], [82.4, 5004.0], [82.5, 5005.0], [82.6, 5006.0], [82.7, 5013.0], [82.8, 5016.0], [82.9, 5018.0], [83.0, 5020.0], [83.1, 5031.0], [83.2, 5061.0], [83.3, 5080.0], [83.4, 5121.0], [83.5, 5131.0], [83.6, 5144.0], [83.7, 5148.0], [83.8, 5154.0], [83.9, 5156.0], [84.0, 5161.0], [84.1, 5169.0], [84.2, 5190.0], [84.3, 5199.0], [84.4, 5208.0], [84.5, 5215.0], [84.6, 5220.0], [84.7, 5249.0], [84.8, 5273.0], [84.9, 5277.0], [85.0, 5283.0], [85.1, 5291.0], [85.2, 5302.0], [85.3, 5308.0], [85.4, 5324.0], [85.5, 5335.0], [85.6, 5346.0], [85.7, 5355.0], [85.8, 5359.0], [85.9, 5362.0], [86.0, 5369.0], [86.1, 5383.0], [86.2, 5389.0], [86.3, 5393.0], [86.4, 5404.0], [86.5, 5411.0], [86.6, 5414.0], [86.7, 5420.0], [86.8, 5429.0], [86.9, 5432.0], [87.0, 5472.0], [87.1, 5475.0], [87.2, 5482.0], [87.3, 5503.0], [87.4, 5520.0], [87.5, 5547.0], [87.6, 5566.0], [87.7, 5592.0], [87.8, 5599.0], [87.9, 5611.0], [88.0, 5632.0], [88.1, 5655.0], [88.2, 5685.0], [88.3, 5692.0], [88.4, 5724.0], [88.5, 5739.0], [88.6, 5760.0], [88.7, 5772.0], [88.8, 5795.0], [88.9, 5799.0], [89.0, 5808.0], [89.1, 5819.0], [89.2, 5831.0], [89.3, 5832.0], [89.4, 5838.0], [89.5, 5859.0], [89.6, 5869.0], [89.7, 5914.0], [89.8, 5932.0], [89.9, 5935.0], [90.0, 5941.0], [90.1, 5948.0], [90.2, 5959.0], [90.3, 5967.0], [90.4, 5982.0], [90.5, 6029.0], [90.6, 6104.0], [90.7, 6125.0], [90.8, 6129.0], [90.9, 6183.0], [91.0, 6257.0], [91.1, 6268.0], [91.2, 6326.0], [91.3, 6366.0], [91.4, 6390.0], [91.5, 6456.0], [91.6, 6476.0], [91.7, 6535.0], [91.8, 6574.0], [91.9, 6580.0], [92.0, 6618.0], [92.1, 6633.0], [92.2, 6645.0], [92.3, 6653.0], [92.4, 6682.0], [92.5, 6708.0], [92.6, 6719.0], [92.7, 6745.0], [92.8, 6779.0], [92.9, 6793.0], [93.0, 6805.0], [93.1, 6900.0], [93.2, 6924.0], [93.3, 6935.0], [93.4, 6978.0], [93.5, 7037.0], [93.6, 7042.0], [93.7, 7052.0], [93.8, 7077.0], [93.9, 7096.0], [94.0, 7105.0], [94.1, 7108.0], [94.2, 7115.0], [94.3, 7140.0], [94.4, 7147.0], [94.5, 7156.0], [94.6, 7157.0], [94.7, 7231.0], [94.8, 7256.0], [94.9, 7260.0], [95.0, 7283.0], [95.1, 7303.0], [95.2, 7327.0], [95.3, 7337.0], [95.4, 7345.0], [95.5, 7353.0], [95.6, 7357.0], [95.7, 7374.0], [95.8, 7393.0], [95.9, 7440.0], [96.0, 7459.0], [96.1, 7526.0], [96.2, 7531.0], [96.3, 7544.0], [96.4, 7545.0], [96.5, 7546.0], [96.6, 7547.0], [96.7, 7577.0], [96.8, 7581.0], [96.9, 7590.0], [97.0, 7687.0], [97.1, 7730.0], [97.2, 7817.0], [97.3, 7834.0], [97.4, 7851.0], [97.5, 7899.0], [97.6, 7945.0], [97.7, 8014.0], [97.8, 8135.0], [97.9, 8173.0], [98.0, 8387.0], [98.1, 8484.0], [98.2, 8499.0], [98.3, 8567.0], [98.4, 8579.0], [98.5, 8637.0], [98.6, 8713.0], [98.7, 8773.0], [98.8, 8799.0], [98.9, 8833.0], [99.0, 8940.0], [99.1, 9087.0], [99.2, 9151.0], [99.3, 9197.0], [99.4, 9253.0], [99.5, 9403.0], [99.6, 9535.0], [99.7, 9610.0], [99.8, 9618.0], [99.9, 13163.0]], "isOverall": false, "label": "/CustomerService/loginByPhone", "isController": false}, {"data": [[0.0, 9.0], [0.1, 10.0], [0.2, 10.0], [0.3, 11.0], [0.4, 12.0], [0.5, 13.0], [0.6, 13.0], [0.7, 14.0], [0.8, 14.0], [0.9, 15.0], [1.0, 15.0], [1.1, 15.0], [1.2, 16.0], [1.3, 16.0], [1.4, 17.0], [1.5, 17.0], [1.6, 17.0], [1.7, 17.0], [1.8, 18.0], [1.9, 19.0], [2.0, 19.0], [2.1, 19.0], [2.2, 20.0], [2.3, 20.0], [2.4, 20.0], [2.5, 21.0], [2.6, 21.0], [2.7, 22.0], [2.8, 23.0], [2.9, 24.0], [3.0, 24.0], [3.1, 25.0], [3.2, 25.0], [3.3, 25.0], [3.4, 26.0], [3.5, 27.0], [3.6, 28.0], [3.7, 28.0], [3.8, 29.0], [3.9, 29.0], [4.0, 29.0], [4.1, 30.0], [4.2, 30.0], [4.3, 30.0], [4.4, 31.0], [4.5, 31.0], [4.6, 31.0], [4.7, 31.0], [4.8, 31.0], [4.9, 32.0], [5.0, 32.0], [5.1, 32.0], [5.2, 32.0], [5.3, 33.0], [5.4, 34.0], [5.5, 35.0], [5.6, 35.0], [5.7, 36.0], [5.8, 36.0], [5.9, 37.0], [6.0, 37.0], [6.1, 38.0], [6.2, 39.0], [6.3, 39.0], [6.4, 39.0], [6.5, 40.0], [6.6, 41.0], [6.7, 41.0], [6.8, 42.0], [6.9, 42.0], [7.0, 42.0], [7.1, 43.0], [7.2, 44.0], [7.3, 44.0], [7.4, 44.0], [7.5, 44.0], [7.6, 45.0], [7.7, 45.0], [7.8, 45.0], [7.9, 46.0], [8.0, 46.0], [8.1, 47.0], [8.2, 48.0], [8.3, 48.0], [8.4, 49.0], [8.5, 49.0], [8.6, 50.0], [8.7, 51.0], [8.8, 52.0], [8.9, 52.0], [9.0, 53.0], [9.1, 53.0], [9.2, 53.0], [9.3, 55.0], [9.4, 55.0], [9.5, 56.0], [9.6, 57.0], [9.7, 57.0], [9.8, 58.0], [9.9, 58.0], [10.0, 59.0], [10.1, 60.0], [10.2, 60.0], [10.3, 62.0], [10.4, 64.0], [10.5, 65.0], [10.6, 67.0], [10.7, 68.0], [10.8, 69.0], [10.9, 70.0], [11.0, 70.0], [11.1, 71.0], [11.2, 71.0], [11.3, 72.0], [11.4, 73.0], [11.5, 74.0], [11.6, 75.0], [11.7, 75.0], [11.8, 77.0], [11.9, 77.0], [12.0, 78.0], [12.1, 79.0], [12.2, 80.0], [12.3, 81.0], [12.4, 82.0], [12.5, 83.0], [12.6, 83.0], [12.7, 84.0], [12.8, 85.0], [12.9, 86.0], [13.0, 87.0], [13.1, 88.0], [13.2, 89.0], [13.3, 90.0], [13.4, 91.0], [13.5, 91.0], [13.6, 93.0], [13.7, 94.0], [13.8, 95.0], [13.9, 95.0], [14.0, 96.0], [14.1, 100.0], [14.2, 100.0], [14.3, 102.0], [14.4, 103.0], [14.5, 103.0], [14.6, 105.0], [14.7, 105.0], [14.8, 106.0], [14.9, 107.0], [15.0, 108.0], [15.1, 109.0], [15.2, 110.0], [15.3, 110.0], [15.4, 111.0], [15.5, 112.0], [15.6, 113.0], [15.7, 114.0], [15.8, 115.0], [15.9, 117.0], [16.0, 119.0], [16.1, 120.0], [16.2, 120.0], [16.3, 122.0], [16.4, 122.0], [16.5, 123.0], [16.6, 124.0], [16.7, 126.0], [16.8, 126.0], [16.9, 128.0], [17.0, 130.0], [17.1, 134.0], [17.2, 136.0], [17.3, 136.0], [17.4, 137.0], [17.5, 139.0], [17.6, 141.0], [17.7, 142.0], [17.8, 143.0], [17.9, 144.0], [18.0, 146.0], [18.1, 147.0], [18.2, 149.0], [18.3, 150.0], [18.4, 152.0], [18.5, 154.0], [18.6, 155.0], [18.7, 155.0], [18.8, 161.0], [18.9, 165.0], [19.0, 166.0], [19.1, 169.0], [19.2, 170.0], [19.3, 171.0], [19.4, 173.0], [19.5, 173.0], [19.6, 175.0], [19.7, 177.0], [19.8, 180.0], [19.9, 181.0], [20.0, 183.0], [20.1, 183.0], [20.2, 185.0], [20.3, 187.0], [20.4, 189.0], [20.5, 191.0], [20.6, 192.0], [20.7, 193.0], [20.8, 198.0], [20.9, 202.0], [21.0, 203.0], [21.1, 205.0], [21.2, 209.0], [21.3, 213.0], [21.4, 219.0], [21.5, 220.0], [21.6, 229.0], [21.7, 231.0], [21.8, 233.0], [21.9, 236.0], [22.0, 240.0], [22.1, 243.0], [22.2, 250.0], [22.3, 254.0], [22.4, 257.0], [22.5, 267.0], [22.6, 291.0], [22.7, 296.0], [22.8, 303.0], [22.9, 317.0], [23.0, 331.0], [23.1, 339.0], [23.2, 382.0], [23.3, 407.0], [23.4, 437.0], [23.5, 446.0], [23.6, 470.0], [23.7, 492.0], [23.8, 506.0], [23.9, 525.0], [24.0, 527.0], [24.1, 529.0], [24.2, 537.0], [24.3, 544.0], [24.4, 561.0], [24.5, 571.0], [24.6, 594.0], [24.7, 631.0], [24.8, 647.0], [24.9, 653.0], [25.0, 675.0], [25.1, 686.0], [25.2, 693.0], [25.3, 705.0], [25.4, 708.0], [25.5, 710.0], [25.6, 712.0], [25.7, 715.0], [25.8, 720.0], [25.9, 723.0], [26.0, 727.0], [26.1, 731.0], [26.2, 735.0], [26.3, 737.0], [26.4, 738.0], [26.5, 740.0], [26.6, 745.0], [26.7, 756.0], [26.8, 757.0], [26.9, 777.0], [27.0, 805.0], [27.1, 810.0], [27.2, 830.0], [27.3, 837.0], [27.4, 851.0], [27.5, 867.0], [27.6, 888.0], [27.7, 893.0], [27.8, 901.0], [27.9, 907.0], [28.0, 911.0], [28.1, 971.0], [28.2, 983.0], [28.3, 991.0], [28.4, 997.0], [28.5, 1039.0], [28.6, 1077.0], [28.7, 1114.0], [28.8, 1121.0], [28.9, 1159.0], [29.0, 1166.0], [29.1, 1181.0], [29.2, 1194.0], [29.3, 1245.0], [29.4, 1315.0], [29.5, 1340.0], [29.6, 1366.0], [29.7, 1390.0], [29.8, 1396.0], [29.9, 1398.0], [30.0, 1399.0], [30.1, 1410.0], [30.2, 1448.0], [30.3, 1461.0], [30.4, 1476.0], [30.5, 1486.0], [30.6, 1491.0], [30.7, 1496.0], [30.8, 1501.0], [30.9, 1507.0], [31.0, 1580.0], [31.1, 1586.0], [31.2, 1590.0], [31.3, 1618.0], [31.4, 1625.0], [31.5, 1633.0], [31.6, 1641.0], [31.7, 1662.0], [31.8, 1666.0], [31.9, 1675.0], [32.0, 1686.0], [32.1, 1693.0], [32.2, 1714.0], [32.3, 1730.0], [32.4, 1739.0], [32.5, 1742.0], [32.6, 1757.0], [32.7, 1792.0], [32.8, 1820.0], [32.9, 1825.0], [33.0, 1834.0], [33.1, 1835.0], [33.2, 1838.0], [33.3, 1844.0], [33.4, 1857.0], [33.5, 1861.0], [33.6, 1862.0], [33.7, 1864.0], [33.8, 1866.0], [33.9, 1869.0], [34.0, 1873.0], [34.1, 1875.0], [34.2, 1877.0], [34.3, 1878.0], [34.4, 1880.0], [34.5, 1882.0], [34.6, 1883.0], [34.7, 1883.0], [34.8, 1884.0], [34.9, 1884.0], [35.0, 1884.0], [35.1, 1886.0], [35.2, 1886.0], [35.3, 1886.0], [35.4, 1887.0], [35.5, 1888.0], [35.6, 1889.0], [35.7, 1890.0], [35.8, 1891.0], [35.9, 1891.0], [36.0, 1891.0], [36.1, 1893.0], [36.2, 1893.0], [36.3, 1894.0], [36.4, 1895.0], [36.5, 1896.0], [36.6, 1898.0], [36.7, 1898.0], [36.8, 1901.0], [36.9, 1904.0], [37.0, 1905.0], [37.1, 1906.0], [37.2, 1906.0], [37.3, 1908.0], [37.4, 1910.0], [37.5, 1911.0], [37.6, 1912.0], [37.7, 1914.0], [37.8, 1915.0], [37.9, 1916.0], [38.0, 1922.0], [38.1, 1932.0], [38.2, 1936.0], [38.3, 1954.0], [38.4, 1959.0], [38.5, 1989.0], [38.6, 1994.0], [38.7, 2002.0], [38.8, 2004.0], [38.9, 2006.0], [39.0, 2008.0], [39.1, 2010.0], [39.2, 2014.0], [39.3, 2014.0], [39.4, 2015.0], [39.5, 2016.0], [39.6, 2017.0], [39.7, 2017.0], [39.8, 2020.0], [39.9, 2021.0], [40.0, 2022.0], [40.1, 2023.0], [40.2, 2023.0], [40.3, 2024.0], [40.4, 2025.0], [40.5, 2025.0], [40.6, 2026.0], [40.7, 2026.0], [40.8, 2026.0], [40.9, 2027.0], [41.0, 2027.0], [41.1, 2028.0], [41.2, 2029.0], [41.3, 2030.0], [41.4, 2030.0], [41.5, 2031.0], [41.6, 2032.0], [41.7, 2032.0], [41.8, 2033.0], [41.9, 2033.0], [42.0, 2034.0], [42.1, 2035.0], [42.2, 2035.0], [42.3, 2036.0], [42.4, 2036.0], [42.5, 2036.0], [42.6, 2036.0], [42.7, 2037.0], [42.8, 2037.0], [42.9, 2038.0], [43.0, 2038.0], [43.1, 2038.0], [43.2, 2039.0], [43.3, 2040.0], [43.4, 2040.0], [43.5, 2040.0], [43.6, 2040.0], [43.7, 2041.0], [43.8, 2041.0], [43.9, 2041.0], [44.0, 2042.0], [44.1, 2042.0], [44.2, 2044.0], [44.3, 2044.0], [44.4, 2044.0], [44.5, 2045.0], [44.6, 2046.0], [44.7, 2046.0], [44.8, 2046.0], [44.9, 2047.0], [45.0, 2048.0], [45.1, 2048.0], [45.2, 2048.0], [45.3, 2049.0], [45.4, 2050.0], [45.5, 2050.0], [45.6, 2051.0], [45.7, 2051.0], [45.8, 2052.0], [45.9, 2052.0], [46.0, 2053.0], [46.1, 2053.0], [46.2, 2055.0], [46.3, 2055.0], [46.4, 2056.0], [46.5, 2056.0], [46.6, 2057.0], [46.7, 2058.0], [46.8, 2060.0], [46.9, 2062.0], [47.0, 2062.0], [47.1, 2062.0], [47.2, 2063.0], [47.3, 2063.0], [47.4, 2064.0], [47.5, 2065.0], [47.6, 2066.0], [47.7, 2066.0], [47.8, 2067.0], [47.9, 2067.0], [48.0, 2068.0], [48.1, 2069.0], [48.2, 2069.0], [48.3, 2070.0], [48.4, 2070.0], [48.5, 2070.0], [48.6, 2071.0], [48.7, 2072.0], [48.8, 2072.0], [48.9, 2074.0], [49.0, 2075.0], [49.1, 2075.0], [49.2, 2076.0], [49.3, 2076.0], [49.4, 2078.0], [49.5, 2079.0], [49.6, 2079.0], [49.7, 2081.0], [49.8, 2082.0], [49.9, 2083.0], [50.0, 2084.0], [50.1, 2084.0], [50.2, 2085.0], [50.3, 2088.0], [50.4, 2091.0], [50.5, 2093.0], [50.6, 2096.0], [50.7, 2099.0], [50.8, 2100.0], [50.9, 2101.0], [51.0, 2103.0], [51.1, 2105.0], [51.2, 2107.0], [51.3, 2126.0], [51.4, 2169.0], [51.5, 2174.0], [51.6, 2182.0], [51.7, 2188.0], [51.8, 2206.0], [51.9, 2222.0], [52.0, 2239.0], [52.1, 2257.0], [52.2, 2261.0], [52.3, 2289.0], [52.4, 2299.0], [52.5, 2322.0], [52.6, 2350.0], [52.7, 2364.0], [52.8, 2416.0], [52.9, 2423.0], [53.0, 2433.0], [53.1, 2455.0], [53.2, 2458.0], [53.3, 2461.0], [53.4, 2462.0], [53.5, 2464.0], [53.6, 2466.0], [53.7, 2469.0], [53.8, 2471.0], [53.9, 2472.0], [54.0, 2476.0], [54.1, 2477.0], [54.2, 2478.0], [54.3, 2478.0], [54.4, 2482.0], [54.5, 2486.0], [54.6, 2488.0], [54.7, 2489.0], [54.8, 2492.0], [54.9, 2492.0], [55.0, 2495.0], [55.1, 2497.0], [55.2, 2499.0], [55.3, 2500.0], [55.4, 2501.0], [55.5, 2502.0], [55.6, 2504.0], [55.7, 2505.0], [55.8, 2505.0], [55.9, 2506.0], [56.0, 2507.0], [56.1, 2507.0], [56.2, 2509.0], [56.3, 2510.0], [56.4, 2513.0], [56.5, 2514.0], [56.6, 2515.0], [56.7, 2517.0], [56.8, 2519.0], [56.9, 2519.0], [57.0, 2522.0], [57.1, 2524.0], [57.2, 2526.0], [57.3, 2526.0], [57.4, 2527.0], [57.5, 2528.0], [57.6, 2528.0], [57.7, 2530.0], [57.8, 2532.0], [57.9, 2534.0], [58.0, 2534.0], [58.1, 2537.0], [58.2, 2541.0], [58.3, 2542.0], [58.4, 2544.0], [58.5, 2547.0], [58.6, 2550.0], [58.7, 2552.0], [58.8, 2554.0], [58.9, 2558.0], [59.0, 2561.0], [59.1, 2563.0], [59.2, 2563.0], [59.3, 2565.0], [59.4, 2566.0], [59.5, 2571.0], [59.6, 2572.0], [59.7, 2573.0], [59.8, 2573.0], [59.9, 2575.0], [60.0, 2576.0], [60.1, 2576.0], [60.2, 2577.0], [60.3, 2577.0], [60.4, 2578.0], [60.5, 2579.0], [60.6, 2580.0], [60.7, 2580.0], [60.8, 2582.0], [60.9, 2583.0], [61.0, 2584.0], [61.1, 2587.0], [61.2, 2588.0], [61.3, 2588.0], [61.4, 2589.0], [61.5, 2589.0], [61.6, 2592.0], [61.7, 2593.0], [61.8, 2593.0], [61.9, 2595.0], [62.0, 2596.0], [62.1, 2596.0], [62.2, 2597.0], [62.3, 2597.0], [62.4, 2597.0], [62.5, 2599.0], [62.6, 2599.0], [62.7, 2600.0], [62.8, 2601.0], [62.9, 2601.0], [63.0, 2601.0], [63.1, 2602.0], [63.2, 2603.0], [63.3, 2605.0], [63.4, 2606.0], [63.5, 2607.0], [63.6, 2607.0], [63.7, 2609.0], [63.8, 2609.0], [63.9, 2609.0], [64.0, 2611.0], [64.1, 2612.0], [64.2, 2613.0], [64.3, 2614.0], [64.4, 2614.0], [64.5, 2617.0], [64.6, 2617.0], [64.7, 2619.0], [64.8, 2621.0], [64.9, 2622.0], [65.0, 2623.0], [65.1, 2624.0], [65.2, 2624.0], [65.3, 2624.0], [65.4, 2625.0], [65.5, 2626.0], [65.6, 2626.0], [65.7, 2627.0], [65.8, 2628.0], [65.9, 2628.0], [66.0, 2629.0], [66.1, 2630.0], [66.2, 2631.0], [66.3, 2632.0], [66.4, 2633.0], [66.5, 2633.0], [66.6, 2635.0], [66.7, 2639.0], [66.8, 2640.0], [66.9, 2640.0], [67.0, 2641.0], [67.1, 2641.0], [67.2, 2642.0], [67.3, 2642.0], [67.4, 2643.0], [67.5, 2643.0], [67.6, 2644.0], [67.7, 2645.0], [67.8, 2646.0], [67.9, 2646.0], [68.0, 2647.0], [68.1, 2648.0], [68.2, 2649.0], [68.3, 2650.0], [68.4, 2650.0], [68.5, 2651.0], [68.6, 2652.0], [68.7, 2652.0], [68.8, 2653.0], [68.9, 2653.0], [69.0, 2654.0], [69.1, 2654.0], [69.2, 2655.0], [69.3, 2655.0], [69.4, 2656.0], [69.5, 2657.0], [69.6, 2658.0], [69.7, 2659.0], [69.8, 2660.0], [69.9, 2661.0], [70.0, 2663.0], [70.1, 2663.0], [70.2, 2664.0], [70.3, 2665.0], [70.4, 2667.0], [70.5, 2667.0], [70.6, 2667.0], [70.7, 2668.0], [70.8, 2669.0], [70.9, 2670.0], [71.0, 2671.0], [71.1, 2671.0], [71.2, 2672.0], [71.3, 2673.0], [71.4, 2675.0], [71.5, 2675.0], [71.6, 2676.0], [71.7, 2677.0], [71.8, 2680.0], [71.9, 2681.0], [72.0, 2682.0], [72.1, 2684.0], [72.2, 2687.0], [72.3, 2687.0], [72.4, 2692.0], [72.5, 2693.0], [72.6, 2695.0], [72.7, 2701.0], [72.8, 2704.0], [72.9, 2708.0], [73.0, 2715.0], [73.1, 2715.0], [73.2, 2717.0], [73.3, 2717.0], [73.4, 2719.0], [73.5, 2720.0], [73.6, 2726.0], [73.7, 2728.0], [73.8, 2733.0], [73.9, 2734.0], [74.0, 2736.0], [74.1, 2737.0], [74.2, 2738.0], [74.3, 2742.0], [74.4, 2746.0], [74.5, 2749.0], [74.6, 2750.0], [74.7, 2752.0], [74.8, 2755.0], [74.9, 2759.0], [75.0, 2760.0], [75.1, 2763.0], [75.2, 2768.0], [75.3, 2773.0], [75.4, 2774.0], [75.5, 2778.0], [75.6, 2781.0], [75.7, 2790.0], [75.8, 2791.0], [75.9, 2799.0], [76.0, 2805.0], [76.1, 2809.0], [76.2, 2817.0], [76.3, 2817.0], [76.4, 2819.0], [76.5, 2825.0], [76.6, 2826.0], [76.7, 2827.0], [76.8, 2828.0], [76.9, 2831.0], [77.0, 2835.0], [77.1, 2837.0], [77.2, 2837.0], [77.3, 2839.0], [77.4, 2840.0], [77.5, 2841.0], [77.6, 2841.0], [77.7, 2844.0], [77.8, 2846.0], [77.9, 2847.0], [78.0, 2847.0], [78.1, 2848.0], [78.2, 2849.0], [78.3, 2850.0], [78.4, 2850.0], [78.5, 2851.0], [78.6, 2851.0], [78.7, 2852.0], [78.8, 2853.0], [78.9, 2853.0], [79.0, 2853.0], [79.1, 2855.0], [79.2, 2855.0], [79.3, 2856.0], [79.4, 2857.0], [79.5, 2857.0], [79.6, 2859.0], [79.7, 2859.0], [79.8, 2862.0], [79.9, 2862.0], [80.0, 2862.0], [80.1, 2863.0], [80.2, 2863.0], [80.3, 2864.0], [80.4, 2864.0], [80.5, 2865.0], [80.6, 2865.0], [80.7, 2867.0], [80.8, 2867.0], [80.9, 2868.0], [81.0, 2870.0], [81.1, 2871.0], [81.2, 2873.0], [81.3, 2873.0], [81.4, 2874.0], [81.5, 2875.0], [81.6, 2877.0], [81.7, 2878.0], [81.8, 2880.0], [81.9, 2880.0], [82.0, 2882.0], [82.1, 2884.0], [82.2, 2889.0], [82.3, 2891.0], [82.4, 2893.0], [82.5, 2895.0], [82.6, 2899.0], [82.7, 2900.0], [82.8, 2903.0], [82.9, 2906.0], [83.0, 2906.0], [83.1, 2912.0], [83.2, 2914.0], [83.3, 2915.0], [83.4, 2916.0], [83.5, 2917.0], [83.6, 2919.0], [83.7, 2925.0], [83.8, 2929.0], [83.9, 2937.0], [84.0, 2942.0], [84.1, 2952.0], [84.2, 2969.0], [84.3, 2973.0], [84.4, 2979.0], [84.5, 2981.0], [84.6, 2992.0], [84.7, 3005.0], [84.8, 3013.0], [84.9, 3033.0], [85.0, 3044.0], [85.1, 3054.0], [85.2, 3055.0], [85.3, 3057.0], [85.4, 3060.0], [85.5, 3064.0], [85.6, 3069.0], [85.7, 3071.0], [85.8, 3074.0], [85.9, 3079.0], [86.0, 3087.0], [86.1, 3089.0], [86.2, 3090.0], [86.3, 3099.0], [86.4, 3115.0], [86.5, 3117.0], [86.6, 3117.0], [86.7, 3120.0], [86.8, 3122.0], [86.9, 3126.0], [87.0, 3129.0], [87.1, 3133.0], [87.2, 3140.0], [87.3, 3154.0], [87.4, 3156.0], [87.5, 3160.0], [87.6, 3162.0], [87.7, 3164.0], [87.8, 3165.0], [87.9, 3169.0], [88.0, 3172.0], [88.1, 3173.0], [88.2, 3175.0], [88.3, 3176.0], [88.4, 3178.0], [88.5, 3183.0], [88.6, 3187.0], [88.7, 3190.0], [88.8, 3192.0], [88.9, 3195.0], [89.0, 3209.0], [89.1, 3212.0], [89.2, 3216.0], [89.3, 3224.0], [89.4, 3229.0], [89.5, 3234.0], [89.6, 3236.0], [89.7, 3241.0], [89.8, 3244.0], [89.9, 3247.0], [90.0, 3249.0], [90.1, 3255.0], [90.2, 3260.0], [90.3, 3261.0], [90.4, 3266.0], [90.5, 3279.0], [90.6, 3289.0], [90.7, 3294.0], [90.8, 3297.0], [90.9, 3301.0], [91.0, 3312.0], [91.1, 3328.0], [91.2, 3333.0], [91.3, 3344.0], [91.4, 3347.0], [91.5, 3350.0], [91.6, 3351.0], [91.7, 3369.0], [91.8, 3378.0], [91.9, 3388.0], [92.0, 3400.0], [92.1, 3406.0], [92.2, 3416.0], [92.3, 3471.0], [92.4, 3480.0], [92.5, 3491.0], [92.6, 3498.0], [92.7, 3511.0], [92.8, 3527.0], [92.9, 3532.0], [93.0, 3549.0], [93.1, 3563.0], [93.2, 3578.0], [93.3, 3619.0], [93.4, 3622.0], [93.5, 3636.0], [93.6, 3641.0], [93.7, 3661.0], [93.8, 3683.0], [93.9, 3697.0], [94.0, 3707.0], [94.1, 3722.0], [94.2, 3756.0], [94.3, 3771.0], [94.4, 3782.0], [94.5, 3782.0], [94.6, 3791.0], [94.7, 3796.0], [94.8, 3809.0], [94.9, 3811.0], [95.0, 3815.0], [95.1, 3825.0], [95.2, 3836.0], [95.3, 3861.0], [95.4, 3867.0], [95.5, 3872.0], [95.6, 3878.0], [95.7, 3883.0], [95.8, 3915.0], [95.9, 3917.0], [96.0, 3920.0], [96.1, 3930.0], [96.2, 3936.0], [96.3, 3944.0], [96.4, 3949.0], [96.5, 3963.0], [96.6, 3994.0], [96.7, 3999.0], [96.8, 4012.0], [96.9, 4056.0], [97.0, 4094.0], [97.1, 4106.0], [97.2, 4109.0], [97.3, 4135.0], [97.4, 4147.0], [97.5, 4161.0], [97.6, 4165.0], [97.7, 4171.0], [97.8, 4191.0], [97.9, 4198.0], [98.0, 4218.0], [98.1, 4285.0], [98.2, 4387.0], [98.3, 4429.0], [98.4, 4450.0], [98.5, 4477.0], [98.6, 4527.0], [98.7, 4546.0], [98.8, 4567.0], [98.9, 4840.0], [99.0, 4849.0], [99.1, 4920.0], [99.2, 5195.0], [99.3, 5494.0], [99.4, 5840.0], [99.5, 5846.0], [99.6, 5904.0], [99.7, 6033.0], [99.8, 6685.0], [99.9, 8356.0]], "isOverall": false, "label": "/EvaluationService/submitEvaluation2", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 281.0, "series": [{"data": [[0.0, 8.0], [600.0, 1.0], [900.0, 2.0], [1000.0, 13.0], [1100.0, 9.0], [1200.0, 26.0], [1300.0, 32.0], [1400.0, 37.0], [1500.0, 22.0], [1600.0, 27.0], [1700.0, 41.0], [1800.0, 35.0], [1900.0, 44.0], [2000.0, 33.0], [2100.0, 33.0], [2200.0, 27.0], [2300.0, 23.0], [2400.0, 35.0], [2500.0, 58.0], [2600.0, 50.0], [2700.0, 33.0], [2800.0, 39.0], [2900.0, 55.0], [3000.0, 57.0], [3100.0, 42.0], [3200.0, 55.0], [3300.0, 43.0], [3400.0, 82.0], [3500.0, 94.0], [3600.0, 73.0], [3700.0, 52.0], [3800.0, 43.0], [3900.0, 73.0], [4000.0, 54.0], [4200.0, 24.0], [4300.0, 46.0], [4100.0, 33.0], [4500.0, 43.0], [4400.0, 27.0], [4600.0, 28.0], [4800.0, 24.0], [4700.0, 14.0], [5100.0, 19.0], [5000.0, 28.0], [4900.0, 43.0], [5200.0, 17.0], [5300.0, 24.0], [5600.0, 10.0], [5500.0, 11.0], [5400.0, 18.0], [5800.0, 15.0], [5700.0, 12.0], [6100.0, 8.0], [5900.0, 15.0], [6000.0, 3.0], [6300.0, 6.0], [6200.0, 3.0], [6400.0, 4.0], [6500.0, 6.0], [6600.0, 11.0], [6900.0, 8.0], [6700.0, 10.0], [6800.0, 2.0], [7000.0, 10.0], [7100.0, 14.0], [7400.0, 5.0], [7300.0, 15.0], [7200.0, 8.0], [7500.0, 17.0], [7600.0, 2.0], [7900.0, 3.0], [7700.0, 3.0], [7800.0, 7.0], [8100.0, 3.0], [8000.0, 2.0], [8400.0, 4.0], [8700.0, 6.0], [8500.0, 5.0], [8600.0, 1.0], [8200.0, 1.0], [8300.0, 1.0], [9100.0, 4.0], [8900.0, 2.0], [8800.0, 3.0], [9200.0, 3.0], [9000.0, 1.0], [9500.0, 2.0], [9600.0, 3.0], [9400.0, 2.0], [9800.0, 1.0], [13100.0, 1.0], [13200.0, 1.0], [200.0, 2.0], [500.0, 5.0]], "isOverall": false, "label": "/CustomerService/loginByPhone", "isController": false}, {"data": [[0.0, 281.0], [600.0, 13.0], [700.0, 33.0], [800.0, 16.0], [900.0, 15.0], [1000.0, 4.0], [1100.0, 11.0], [1200.0, 3.0], [1300.0, 14.0], [1400.0, 14.0], [1500.0, 10.0], [1600.0, 18.0], [1700.0, 11.0], [1800.0, 80.0], [1900.0, 39.0], [2000.0, 243.0], [2100.0, 20.0], [2200.0, 13.0], [2300.0, 7.0], [2400.0, 50.0], [2500.0, 147.0], [2600.0, 201.0], [2700.0, 65.0], [2800.0, 135.0], [2900.0, 39.0], [3000.0, 34.0], [3100.0, 52.0], [3200.0, 39.0], [3300.0, 22.0], [3400.0, 13.0], [3500.0, 13.0], [3700.0, 16.0], [3600.0, 13.0], [3800.0, 20.0], [3900.0, 20.0], [4000.0, 6.0], [4100.0, 18.0], [4200.0, 4.0], [4300.0, 2.0], [4500.0, 6.0], [4400.0, 6.0], [4800.0, 4.0], [4700.0, 1.0], [5100.0, 1.0], [4900.0, 2.0], [5200.0, 1.0], [5400.0, 1.0], [5800.0, 5.0], [5900.0, 2.0], [6000.0, 1.0], [6600.0, 2.0], [7700.0, 1.0], [8300.0, 1.0], [11400.0, 1.0], [100.0, 136.0], [200.0, 37.0], [300.0, 11.0], [400.0, 10.0], [500.0, 17.0]], "isOverall": false, "label": "/EvaluationService/submitEvaluation2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 13200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 265.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3250.0, "series": [{"data": [[0.0, 485.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 265.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3250.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 62.867021276595764, "minX": 1.629792584E12, "maxY": 1000.0, "series": [{"data": [[1.629792584E12, 1000.0], [1.629792594E12, 777.8404669260698], [1.629792586E12, 998.4163150492265], [1.629792596E12, 319.9999999999998], [1.629792588E12, 997.6948148148144], [1.629792598E12, 62.867021276595764], [1.629792592E12, 950.4981818181816], [1.62979259E12, 993.8150684931503]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629792598E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.0, "maxY": 9616.0, "series": [{"data": [[9.0, 5169.0], [20.0, 6248.5], [21.0, 5797.0], [31.0, 7460.0], [33.0, 6456.0], [32.0, 5451.333333333333], [35.0, 7364.0], [45.0, 8037.0], [47.0, 3514.0], [46.0, 5025.5], [48.0, 5547.0], [55.0, 965.0], [57.0, 5282.25], [59.0, 8484.0], [61.0, 6069.25], [66.0, 7818.0], [71.0, 7115.0], [70.0, 7090.0], [75.0, 4.0], [74.0, 3449.5], [73.0, 5890.6], [79.0, 5765.142857142857], [76.0, 2654.0], [83.0, 5411.0], [87.0, 6390.0], [84.0, 6248.333333333334], [89.0, 5724.333333333333], [94.0, 8820.25], [98.0, 3228.0], [100.0, 6032.6], [111.0, 5257.0], [110.0, 10.0], [109.0, 4951.0], [108.0, 6741.0], [114.0, 5040.5], [119.0, 18.0], [118.0, 3851.0], [123.0, 5642.0], [121.0, 4375.0], [120.0, 5477.0], [126.0, 7260.0], [125.0, 3166.0], [135.0, 4414.0], [129.0, 6206.8], [140.0, 1911.0], [139.0, 3721.5], [138.0, 6618.0], [137.0, 6632.0], [151.0, 5799.0], [146.0, 1982.0], [145.0, 3614.75], [144.0, 5750.0], [155.0, 4827.0], [154.0, 5447.857142857142], [153.0, 7260.0], [152.0, 5724.0], [167.0, 5894.5], [166.0, 5106.25], [164.0, 3868.0], [170.0, 6677.0], [183.0, 6928.666666666667], [182.0, 2592.0], [181.0, 2601.5], [180.0, 2620.0], [178.0, 4882.0], [177.0, 3890.0], [176.0, 4080.0], [184.0, 2687.0], [199.0, 5468.5], [194.0, 5478.0], [193.0, 4869.4], [192.0, 4898.0], [206.0, 2645.0], [201.0, 9616.0], [200.0, 2646.0], [217.0, 6125.0], [265.0, 962.0], [287.0, 3655.5], [280.0, 8387.0], [275.0, 4465.0], [299.0, 9403.0], [297.0, 1373.0], [296.0, 1368.0], [290.0, 3897.0], [289.0, 1381.5], [306.0, 5199.0], [334.0, 3870.6], [333.0, 1715.0], [330.0, 1714.0], [329.0, 1684.0], [328.0, 3102.6666666666665], [327.0, 1664.0], [324.0, 1650.0], [320.0, 3740.5], [351.0, 3934.5], [340.0, 5647.857142857143], [338.0, 1732.0], [336.0, 3085.0], [362.0, 7374.0], [357.0, 1816.0], [377.0, 5432.0], [370.0, 1860.0], [389.0, 5355.0], [388.0, 3133.0], [387.0, 3146.0], [415.0, 1889.0], [412.0, 1875.0], [403.0, 3290.0], [402.0, 4453.0], [428.0, 5453.0], [433.0, 1873.0], [456.0, 3686.75], [455.0, 2780.3333333333335], [468.0, 3640.5], [467.0, 4906.0], [480.0, 4729.0], [539.0, 4835.5], [526.0, 4718.0], [517.0, 3754.0], [573.0, 6392.0], [572.0, 5547.0], [562.0, 4751.0], [599.0, 6268.0], [581.0, 2015.0], [632.0, 2036.0], [630.0, 2032.5], [622.0, 4923.0], [671.0, 4219.5], [662.0, 4253.0], [661.0, 3107.5], [655.0, 4517.0], [645.0, 2022.0], [643.0, 2035.0], [693.0, 5196.666666666667], [679.0, 3754.857142857143], [677.0, 2012.0], [676.0, 4160.0], [672.0, 2631.0], [727.0, 3418.0], [726.0, 4099.75], [717.0, 3163.4], [705.0, 2065.0], [766.0, 2475.0], [762.0, 3584.3333333333335], [759.0, 4721.0], [750.0, 3681.25], [749.0, 2436.0], [740.0, 3769.0], [737.0, 2376.0], [736.0, 3576.0], [795.0, 2653.0], [793.0, 4129.666666666667], [783.0, 3615.5], [782.0, 2611.0], [781.0, 2459.5], [773.0, 2503.0], [771.0, 4733.666666666667], [770.0, 8284.0], [828.0, 3004.0], [830.0, 4492.5], [831.0, 3044.0], [829.0, 3333.3333333333335], [826.0, 4003.916666666667], [825.0, 4052.75], [824.0, 4150.5], [807.0, 4056.692307692308], [805.0, 6183.0], [804.0, 4342.0], [800.0, 2705.5], [823.0, 4010.3333333333335], [818.0, 4653.571428571428], [860.0, 4778.142857142857], [861.0, 4026.0], [857.0, 4535.0], [856.0, 4969.0], [852.0, 4052.733333333333], [851.0, 4207.727272727272], [850.0, 4918.5], [849.0, 3777.3333333333335], [842.0, 4969.407407407408], [833.0, 4394.25], [832.0, 3050.0], [839.0, 3128.0], [834.0, 3869.0], [841.0, 3948.25], [840.0, 4216.0], [894.0, 5356.0], [895.0, 4218.909090909091], [893.0, 4995.75], [888.0, 4617.249999999999], [887.0, 3519.0], [886.0, 5393.0], [882.0, 4940.599999999999], [880.0, 3502.3333333333335], [878.0, 5914.0], [865.0, 4753.111111111111], [867.0, 3369.0], [866.0, 3368.5], [869.0, 5085.5], [868.0, 4185.5], [871.0, 3462.0], [870.0, 3447.0], [875.0, 4962.0], [874.0, 5095.885714285715], [873.0, 3451.0], [872.0, 3749.2], [915.0, 5376.857142857143], [927.0, 4459.0], [903.0, 3642.5], [902.0, 3646.3333333333335], [901.0, 5725.777777777777], [900.0, 3632.0], [898.0, 4251.214285714284], [897.0, 4219.818181818182], [918.0, 7998.0], [917.0, 5297.263157894737], [916.0, 3802.0], [913.0, 3830.5], [912.0, 3726.0], [908.0, 5267.076923076923], [907.0, 3704.0], [906.0, 3687.0], [905.0, 5420.0], [904.0, 3788.9999999999995], [953.0, 4374.666666666667], [947.0, 4573.0], [958.0, 4198.0], [957.0, 4091.8333333333335], [956.0, 4126.0], [943.0, 5426.5], [929.0, 4723.25], [928.0, 3909.0], [931.0, 4936.181818181819], [930.0, 3915.0], [933.0, 3949.0], [932.0, 4648.0], [935.0, 5717.5], [934.0, 5276.689655172413], [941.0, 5607.0], [940.0, 6480.400000000001], [937.0, 7409.166666666667], [936.0, 4042.8], [950.0, 4596.0], [949.0, 4604.0], [948.0, 5810.454545454546], [945.0, 4127.142857142857], [944.0, 5181.7], [989.0, 5905.294117647058], [979.0, 3656.5], [991.0, 4316.0], [976.0, 4461.722222222222], [987.0, 5747.181818181818], [985.0, 5522.38888888889], [984.0, 5555.428571428572], [966.0, 3888.5], [965.0, 3929.5], [964.0, 4110.777777777777], [963.0, 3983.5], [961.0, 8135.0], [960.0, 4017.3333333333335], [975.0, 4207.0], [974.0, 4346.636363636364], [971.0, 7987.0], [970.0, 3820.0], [969.0, 4302.5], [968.0, 3841.25], [983.0, 3590.0], [982.0, 6454.999999999999], [980.0, 5426.181818181817], [978.0, 4250.571428571428], [977.0, 5308.0], [1000.0, 1345.9565217391314], [999.0, 1671.1801801801803], [998.0, 2994.2540620384048], [996.0, 3480.0625], [995.0, 4406.911111111111], [994.0, 3638.090909090909], [993.0, 4769.875], [992.0, 4626.871794871793]], "isOverall": false, "label": "/CustomerService/loginByPhone", "isController": false}, {"data": [[863.8394999999994, 3728.5705000000003]], "isOverall": false, "label": "/CustomerService/loginByPhone-Aggregated", "isController": false}, {"data": [[3.0, 2549.0], [5.0, 161.0], [6.0, 236.0], [7.0, 17.0], [8.0, 52.0], [9.0, 240.0], [10.0, 37.0], [11.0, 68.0], [12.0, 175.0], [13.0, 849.0], [15.0, 146.5], [17.0, 506.0], [18.0, 250.0], [19.0, 1340.0], [20.0, 1666.0], [21.0, 32.0], [22.0, 52.0], [23.0, 4528.0], [24.0, 4846.0], [25.0, 39.0], [26.0, 177.0], [27.0, 166.0], [29.0, 82.5], [30.0, 675.0], [31.0, 188.0], [33.0, 180.0], [32.0, 715.0], [35.0, 172.0], [34.0, 174.0], [37.0, 820.0], [36.0, 46.0], [39.0, 888.0], [38.0, 41.0], [43.0, 837.0], [42.0, 29.0], [45.0, 19.0], [44.0, 2089.0], [47.0, 492.0], [46.0, 267.0], [49.0, 3809.0], [48.0, 12.0], [51.0, 16.5], [52.0, 35.0], [54.0, 2697.5], [57.0, 4840.0], [56.0, 28.0], [59.0, 4849.0], [58.0, 1834.0], [61.0, 122.0], [60.0, 11.0], [63.0, 52.0], [62.0, 59.0], [67.0, 506.0], [66.0, 2289.0], [65.0, 46.0], [64.0, 45.0], [71.0, 10.0], [70.0, 736.0], [69.0, 79.0], [68.0, 20.0], [75.0, 29.0], [74.0, 10.0], [73.0, 631.0], [72.0, 633.0], [79.0, 1486.0], [78.0, 621.0], [77.0, 29.0], [76.0, 548.0], [83.0, 49.0], [82.0, 57.0], [81.0, 122.0], [87.0, 372.5], [86.0, 72.0], [85.0, 12.0], [84.0, 18.0], [91.0, 25.0], [90.0, 29.0], [89.0, 3872.0], [88.0, 14.0], [95.0, 23.0], [94.0, 164.0], [93.0, 169.0], [92.0, 14.0], [99.0, 106.0], [98.0, 114.0], [97.0, 21.0], [96.0, 122.0], [103.0, 241.0], [102.0, 3932.0], [101.0, 4527.0], [100.0, 4546.0], [107.0, 6685.0], [106.0, 183.0], [105.0, 4567.0], [104.0, 4519.0], [111.0, 4439.5], [110.0, 85.0], [109.0, 13.0], [108.0, 155.0], [115.0, 3178.0], [114.0, 4477.0], [113.0, 16.0], [112.0, 25.0], [119.0, 70.0], [118.0, 17.0], [117.0, 93.0], [116.0, 112.0], [123.0, 42.0], [122.0, 49.0], [121.0, 87.0], [120.0, 4398.5], [126.0, 3194.0], [125.0, 20.0], [124.0, 24.0], [135.0, 56.0], [134.0, 3154.0], [133.0, 3865.0], [132.0, 71.0], [131.0, 30.0], [129.0, 3174.0], [128.0, 64.0], [143.0, 18.0], [142.0, 45.0], [141.0, 5840.0], [140.0, 3312.0], [139.0, 3854.0], [138.0, 30.0], [137.0, 70.0], [136.0, 20.0], [151.0, 41.0], [150.0, 37.0], [149.0, 45.0], [148.0, 42.5], [146.0, 2462.0], [145.0, 31.0], [144.0, 3173.0], [159.0, 3882.5], [157.0, 7374.0], [156.0, 94.0], [155.0, 53.0], [154.0, 24.0], [153.0, 5846.0], [152.0, 2322.0], [167.0, 15.0], [166.0, 30.0], [165.0, 11.0], [164.0, 19.0], [163.0, 48.0], [162.0, 78.0], [161.0, 19.0], [160.0, 83.0], [175.0, 71.0], [174.0, 3322.0], [173.0, 57.0], [172.0, 42.0], [171.0, 96.0], [170.0, 2456.0], [169.0, 40.0], [168.0, 13.0], [183.0, 32.0], [182.0, 39.0], [181.0, 3290.0], [180.0, 3289.0], [179.0, 3294.0], [178.0, 17.0], [177.0, 55.0], [176.0, 16.0], [191.0, 21.0], [190.0, 17.0], [189.0, 27.0], [188.0, 26.0], [186.0, 29.0], [185.0, 110.0], [184.0, 53.0], [199.0, 525.0], [198.0, 435.0], [197.0, 280.5], [195.0, 441.0], [194.0, 538.0], [193.0, 382.0], [192.0, 42.0], [207.0, 561.0], [206.0, 571.0], [205.0, 737.0], [204.0, 745.0], [203.0, 529.0], [202.0, 528.0], [201.0, 2471.0], [200.0, 527.0], [215.0, 666.0], [214.0, 737.0], [213.0, 741.0], [212.0, 693.0], [211.0, 708.0], [210.0, 585.0], [209.0, 720.0], [223.0, 759.0], [221.0, 727.0], [220.0, 777.0], [219.0, 756.0], [218.0, 725.0], [217.0, 723.0], [216.0, 699.0], [231.0, 709.0], [230.0, 1778.5], [229.0, 1118.0], [228.0, 851.0], [227.0, 710.0], [226.0, 711.0], [225.0, 720.0], [224.0, 971.0], [239.0, 734.0], [238.0, 883.0], [237.0, 738.0], [236.0, 712.0], [235.0, 740.0], [234.0, 774.0], [233.0, 903.0], [232.0, 731.0], [247.0, 830.0], [246.0, 979.0], [245.0, 757.0], [244.0, 802.0], [243.0, 997.0], [242.0, 983.0], [241.0, 740.0], [240.0, 722.0], [255.0, 900.0], [254.0, 901.0], [253.0, 832.0], [252.0, 1583.0], [251.0, 860.0], [250.0, 1139.0], [249.0, 1315.0], [248.0, 2650.0], [270.0, 1399.0], [271.0, 1379.0], [269.0, 1194.0], [268.0, 1215.0], [267.0, 1632.0], [266.0, 1114.0], [265.0, 1039.0], [264.0, 915.0], [263.0, 889.0], [257.0, 1245.0], [256.0, 907.0], [259.0, 910.0], [258.0, 1099.0], [262.0, 1329.0], [261.0, 893.0], [260.0, 3244.0], [286.0, 1494.0], [287.0, 1487.0], [285.0, 3406.0], [284.0, 1412.0], [283.0, 1399.0], [282.0, 1507.0], [281.0, 1410.0], [280.0, 1358.0], [279.0, 1287.0], [273.0, 1366.0], [272.0, 1176.0], [275.0, 3165.0], [274.0, 71.0], [278.0, 1456.0], [277.0, 2532.0], [276.0, 1474.0], [301.0, 1586.0], [303.0, 1538.5], [300.0, 1594.0], [291.0, 1399.0], [290.0, 1461.0], [289.0, 1476.0], [288.0, 120.0], [299.0, 1448.0], [298.0, 1510.0], [297.0, 1396.0], [296.0, 1397.0], [295.0, 1390.0], [294.0, 1398.0], [293.0, 1395.0], [292.0, 1503.0], [318.0, 1657.0], [319.0, 1934.0], [317.0, 1866.0], [316.0, 1662.0], [315.0, 1801.0], [314.0, 1618.0], [313.0, 1671.0], [312.0, 180.0], [311.0, 1675.0], [305.0, 1491.0], [304.0, 1486.0], [307.0, 1618.0], [306.0, 1625.0], [310.0, 1633.0], [309.0, 1641.0], [308.0, 1641.0], [334.0, 1718.0], [335.0, 1742.0], [333.0, 1855.0], [332.0, 1861.0], [331.0, 1883.0], [330.0, 1730.0], [329.0, 1730.0], [328.0, 1697.0], [327.0, 1693.0], [321.0, 85.0], [320.0, 1686.0], [323.0, 2632.0], [322.0, 1688.0], [326.0, 1837.0], [325.0, 1714.0], [324.0, 1677.0], [350.0, 1843.0], [351.0, 1857.0], [349.0, 1805.0], [339.0, 21.0], [338.0, 22.0], [337.0, 1754.0], [336.0, 45.0], [347.0, 1824.0], [346.0, 1825.0], [345.0, 1792.0], [344.0, 1827.0], [343.0, 1869.0], [342.0, 34.0], [341.0, 1862.0], [340.0, 1740.0], [366.0, 1896.0], [367.0, 1886.0], [365.0, 1884.0], [364.0, 1872.0], [363.0, 1886.0], [362.0, 2041.0], [361.0, 1872.25], [357.0, 1834.0], [355.0, 1838.0], [354.0, 1835.0], [353.0, 1844.0], [352.0, 1883.0], [356.0, 1873.0], [381.0, 1884.0], [382.0, 1898.0], [380.0, 1870.5], [371.0, 1886.0], [370.0, 1876.0], [369.0, 1876.0], [378.0, 1892.0], [377.0, 1880.0], [376.0, 1880.0], [375.0, 1884.0], [374.0, 46.0], [373.0, 1879.0], [372.0, 1875.0], [398.0, 1878.0], [399.0, 1884.0], [397.0, 1885.5], [396.0, 1888.0], [394.0, 1891.0], [393.0, 1882.0], [392.0, 1908.0], [391.0, 1886.0], [385.0, 1859.0], [384.0, 1898.5], [387.0, 1884.0], [386.0, 1900.0], [390.0, 1882.0], [389.0, 1889.0], [388.0, 1862.0], [414.0, 1911.0], [415.0, 1913.0], [413.0, 1905.0], [412.0, 1912.0], [411.0, 1904.0], [410.0, 1883.0], [409.0, 1914.5], [407.0, 1914.0], [401.0, 1893.0], [400.0, 1893.0], [403.0, 1891.0], [402.0, 1894.0], [405.0, 1886.0], [404.0, 1904.0], [429.0, 1915.0], [431.0, 1907.5], [428.0, 1921.0], [419.0, 1898.0], [418.0, 1916.0], [417.0, 1891.0], [416.0, 1914.0], [427.0, 1911.0], [426.0, 1885.0], [425.0, 1890.0], [424.0, 1895.0], [423.0, 1906.0], [422.0, 1911.0], [420.0, 1889.0], [446.0, 1891.0], [447.0, 2016.0], [445.0, 1897.0], [444.0, 1895.0], [443.0, 1886.0], [442.0, 1893.0], [441.0, 1906.0], [440.0, 1902.0], [439.0, 1901.0], [433.0, 1894.0], [432.0, 1923.0], [435.0, 1895.0], [434.0, 1887.0], [438.0, 1904.0], [436.0, 1910.0], [461.0, 2023.0], [462.0, 2017.0], [460.0, 2008.0], [450.0, 1991.0], [449.0, 1994.0], [448.0, 1954.0], [459.0, 1987.0], [458.0, 2022.0], [457.0, 1994.0], [456.0, 2002.0], [455.0, 1938.5], [453.0, 1974.3333333333333], [476.0, 2004.0], [478.0, 2032.0], [479.0, 2032.0], [477.0, 2027.0], [475.0, 2022.5], [473.0, 2037.5], [471.0, 2006.0], [465.0, 1738.6666666666667], [467.0, 2020.0], [466.0, 2022.0], [470.0, 2017.0], [469.0, 2040.0], [468.0, 2024.0], [483.0, 2085.0], [493.0, 2065.0], [494.0, 2056.0], [492.0, 2066.0], [491.0, 2060.3333333333335], [489.0, 2060.0], [486.0, 2038.0], [485.0, 2057.0], [482.0, 2079.0], [481.0, 2042.0], [480.0, 2044.0], [509.0, 2078.0], [510.0, 2027.0], [508.0, 2057.0], [498.0, 2063.0], [497.0, 2062.0], [496.0, 2097.5], [507.0, 2036.0], [506.0, 2035.0], [505.0, 2038.0], [504.0, 107.0], [503.0, 2051.0], [502.0, 2046.0], [501.0, 2044.0], [500.0, 2052.0], [541.0, 2049.0], [531.0, 2049.0], [543.0, 2042.0], [528.0, 2033.0], [530.0, 2062.0], [529.0, 2068.0], [539.0, 2051.0], [538.0, 2049.0], [537.0, 2051.5], [519.0, 2044.0], [518.0, 2054.0], [517.0, 2036.0], [516.0, 2015.0], [515.0, 2035.5], [514.0, 2025.0], [513.0, 2014.0], [512.0, 2020.0], [527.0, 2030.0], [526.0, 2008.0], [525.0, 2014.0], [524.0, 2005.0], [523.0, 2026.0], [522.0, 2025.0], [521.0, 2050.0], [520.0, 2044.0], [535.0, 2038.0], [533.0, 2042.0], [532.0, 2053.0], [570.0, 1596.5], [574.0, 2048.0], [575.0, 2056.0], [561.0, 2030.0], [560.0, 2021.5], [563.0, 2027.0], [562.0, 2027.0], [565.0, 2041.0], [564.0, 2043.0], [573.0, 2053.0], [572.0, 2037.0], [571.0, 2041.0], [568.0, 2030.0], [551.0, 2027.0], [550.0, 2041.0], [549.0, 2047.0], [548.0, 2025.0], [547.0, 2028.0], [546.0, 2038.0], [545.0, 2047.0], [544.0, 2046.0], [559.0, 2019.0], [557.0, 2033.0], [556.0, 2040.0], [555.0, 2033.0], [554.0, 1767.5], [552.0, 2036.0], [567.0, 2040.0], [566.0, 2015.0], [601.0, 2107.0], [606.0, 2083.5], [607.0, 2066.0], [593.0, 2101.0], [592.0, 2070.0], [595.0, 2070.0], [594.0, 2103.0], [597.0, 2067.0], [596.0, 2080.0], [604.0, 2090.0], [603.0, 2104.0], [602.0, 2108.0], [600.0, 2102.0], [583.0, 2038.5], [581.0, 2036.0], [580.0, 2044.0], [579.0, 2036.0], [578.0, 2051.0], [577.0, 2065.0], [576.0, 2081.0], [591.0, 4011.0], [590.0, 2070.0], [589.0, 1164.0], [588.0, 2096.0], [587.0, 2106.0], [586.0, 2076.0], [585.0, 2066.0], [584.0, 2062.0], [599.0, 2086.0], [598.0, 2091.0], [636.0, 2063.0], [639.0, 2067.0], [625.0, 2088.0], [624.0, 2079.0], [627.0, 2050.0], [626.0, 2059.0], [629.0, 2084.0], [628.0, 2084.0], [638.0, 2053.0], [637.0, 2101.0], [635.0, 2071.0], [634.0, 2069.0], [633.0, 2045.0], [632.0, 2078.0], [623.0, 2091.0], [608.0, 2093.0], [610.0, 2077.0], [609.0, 2075.5], [612.0, 2082.0], [611.0, 2076.0], [614.0, 2075.0], [613.0, 2071.0], [622.0, 2055.0], [621.0, 2054.5], [620.0, 2064.0], [619.0, 2063.0], [618.0, 2068.0], [617.0, 2062.0], [616.0, 2070.6666666666665], [631.0, 2056.0], [630.0, 2066.5], [669.0, 2058.0], [660.0, 2029.0], [671.0, 1529.5], [657.0, 2023.0], [656.0, 2052.0], [659.0, 2035.0], [658.0, 2029.0], [668.0, 2014.0], [667.0, 2046.0], [666.0, 2028.6666666666667], [647.0, 2066.0], [646.0, 62.0], [645.0, 2046.0], [644.0, 2050.0], [643.0, 2065.0], [642.0, 2048.0], [641.0, 2046.0], [640.0, 2046.0], [655.0, 2041.0], [654.0, 2031.0], [653.0, 2032.0], [652.0, 2036.0], [651.0, 2040.0], [650.0, 2030.0], [648.0, 2056.0], [663.0, 2033.0], [662.0, 2027.0], [661.0, 2026.0], [700.0, 2072.0], [703.0, 2169.0], [689.0, 2040.0], [688.0, 2037.0], [691.0, 28.0], [690.0, 2105.0], [693.0, 2098.0], [692.0, 2023.0], [702.0, 2075.0], [701.0, 75.0], [699.0, 2160.0], [698.0, 2080.0], [697.0, 2174.0], [696.0, 2181.0], [687.0, 2042.0], [673.0, 2060.0], [672.0, 2099.0], [675.0, 2072.0], [674.0, 2082.0], [677.0, 2084.0], [676.0, 2073.0], [679.0, 2067.5], [678.0, 1523.5], [686.0, 2070.0], [685.0, 2084.0], [684.0, 2049.0], [683.0, 2075.0], [682.0, 2057.0], [681.0, 2055.0], [680.0, 2099.0], [695.0, 2188.0], [694.0, 2170.0], [732.0, 2516.0], [735.0, 2465.0], [721.0, 2433.0], [720.0, 2304.0], [723.0, 2299.0], [722.0, 2289.0], [725.0, 2222.0], [724.0, 2377.0], [734.0, 2476.0], [733.0, 2473.0], [731.0, 2353.0], [730.0, 2458.0], [729.0, 2364.0], [728.0, 2476.0], [719.0, 2350.0], [704.0, 2079.0], [706.0, 2085.0], [705.0, 2208.0], [718.0, 38.0], [717.0, 2244.7272727272725], [727.0, 70.0], [726.0, 2330.0], [762.0, 2526.0], [766.0, 2530.0], [767.0, 2544.0], [753.0, 65.0], [752.0, 2517.0], [755.0, 2523.0], [754.0, 2510.0], [757.0, 2466.0], [756.0, 2499.0], [765.0, 2551.0], [764.0, 2528.0], [763.0, 2563.0], [761.0, 3631.6666666666665], [743.0, 2529.0], [742.0, 2505.0], [741.0, 2507.0], [740.0, 9.0], [739.0, 2416.0], [738.0, 2424.0], [737.0, 2423.0], [736.0, 2444.0], [751.0, 2515.0], [750.0, 2506.0], [749.0, 2492.0], [748.0, 2463.0], [747.0, 2462.0], [746.0, 2461.0], [745.0, 2506.0], [744.0, 2505.0], [759.0, 2534.0], [758.0, 2477.0], [796.0, 2752.0], [799.0, 2921.0], [785.0, 2749.0], [784.0, 1375.0], [787.0, 2684.0], [786.0, 2687.0], [789.0, 2672.0], [788.0, 2719.0], [798.0, 2781.0], [797.0, 2791.5], [795.0, 2698.75], [794.0, 2698.3333333333335], [793.0, 2702.0], [792.0, 31.0], [783.0, 2668.0], [770.0, 2537.5], [769.0, 2521.5], [772.0, 2510.0], [771.0, 2565.25], [774.0, 1895.6666666666667], [773.0, 2506.0], [782.0, 2639.0], [781.0, 2661.5], [780.0, 2563.5], [779.0, 2588.0], [778.0, 2647.0], [777.0, 2537.6666666666665], [776.0, 2486.5], [791.0, 2675.0], [790.0, 2716.0], [828.0, 3078.0], [831.0, 3140.0], [817.0, 2871.0], [816.0, 2855.0], [819.0, 107.0], [818.0, 2929.0], [821.0, 59.0], [820.0, 58.0], [830.0, 470.0], [829.0, 3211.0], [827.0, 3160.0], [826.0, 67.0], [825.0, 3130.5], [824.0, 3117.0], [815.0, 2887.0], [802.0, 2831.3333333333335], [800.0, 1423.5], [804.0, 35.0], [803.0, 2906.0], [807.0, 973.6666666666667], [805.0, 23.0], [813.0, 64.0], [812.0, 30.0], [811.0, 74.0], [810.0, 2864.0], [809.0, 2906.0], [808.0, 57.0], [823.0, 616.5], [822.0, 76.0], [860.0, 3388.0], [863.0, 3347.0], [848.0, 537.0], [850.0, 88.0], [849.0, 3415.5], [852.0, 867.0], [851.0, 43.0], [862.0, 36.0], [861.0, 2499.0], [859.0, 3471.0], [858.0, 1809.0], [857.0, 38.0], [856.0, 58.0], [847.0, 87.5], [832.0, 17.0], [834.0, 82.0], [833.0, 3164.0], [836.0, 3192.0], [835.0, 3236.0], [839.0, 3191.0], [838.0, 1657.5], [845.0, 72.0], [844.0, 477.0], [843.0, 30.0], [842.0, 3229.5], [841.0, 1703.5], [840.0, 55.0], [855.0, 3460.0], [854.0, 1699.0], [892.0, 4442.0], [895.0, 181.0], [881.0, 3510.0], [880.0, 77.0], [883.0, 3563.0], [882.0, 446.0], [885.0, 3573.5], [884.0, 84.0], [894.0, 3748.5], [893.0, 3579.0], [891.0, 109.0], [890.0, 3527.0], [889.0, 452.0], [888.0, 3549.0], [879.0, 32.0], [865.0, 1799.0], [864.0, 3348.0], [867.0, 89.0], [866.0, 165.0], [869.0, 3493.0], [868.0, 3485.0], [871.0, 91.0], [870.0, 4411.0], [878.0, 44.0], [877.0, 44.0], [876.0, 2381.333333333333], [875.0, 49.0], [874.0, 1846.0], [873.0, 43.0], [872.0, 80.0], [887.0, 126.0], [886.0, 3525.0], [925.0, 3917.5], [916.0, 3832.0], [927.0, 3194.6666666666665], [913.0, 3992.0], [912.0, 39.0], [915.0, 3825.0], [914.0, 3876.0], [923.0, 3915.0], [922.0, 2668.6666666666665], [920.0, 1587.0], [903.0, 1921.5], [902.0, 4453.0], [901.0, 111.0], [900.0, 10.0], [899.0, 3795.0], [898.0, 229.0], [897.0, 156.0], [896.0, 3811.0], [911.0, 3920.0], [910.0, 5777.5], [909.0, 52.0], [908.0, 105.0], [907.0, 3944.0], [906.0, 28.0], [905.0, 60.0], [904.0, 3777.0], [919.0, 3917.0], [918.0, 2068.0], [917.0, 3940.0], [956.0, 2167.0], [959.0, 4136.0], [945.0, 32.0], [944.0, 2112.5], [947.0, 15.0], [946.0, 13.0], [949.0, 281.0], [948.0, 4214.5], [958.0, 4165.0], [957.0, 2792.3333333333335], [955.0, 4252.0], [954.0, 4175.0], [953.0, 4429.25], [952.0, 4285.0], [943.0, 91.0], [929.0, 111.0], [928.0, 1980.5], [931.0, 2738.3333333333335], [930.0, 105.0], [933.0, 4156.0], [932.0, 4753.0], [935.0, 57.0], [934.0, 2756.0], [942.0, 117.0], [941.0, 93.0], [940.0, 2369.75], [939.0, 82.0], [938.0, 4109.0], [937.0, 4094.0], [936.0, 4105.5], [951.0, 32.0], [950.0, 4184.5], [988.0, 192.0], [991.0, 85.0], [977.0, 3707.0], [976.0, 2478.2727272727266], [979.0, 3878.0], [978.0, 2940.857142857143], [981.0, 3412.75], [980.0, 3417.0], [990.0, 1773.6666666666665], [989.0, 2600.6], [987.0, 2442.3333333333335], [986.0, 3970.0], [985.0, 2774.285714285714], [984.0, 114.5], [975.0, 2543.0], [961.0, 996.0], [960.0, 2181.0], [963.0, 3994.0], [962.0, 75.0], [965.0, 3994.0], [964.0, 180.25], [967.0, 70.0], [966.0, 3946.0], [974.0, 2579.0], [973.0, 14.0], [972.0, 133.0], [971.0, 1345.0], [970.0, 3861.0], [969.0, 3963.0], [968.0, 35.0], [983.0, 134.0], [982.0, 2798.75], [1000.0, 352.53846153846155], [999.0, 159.76], [998.0, 1702.6944444444441], [997.0, 2594.571428571429], [996.0, 2527.672727272727], [995.0, 2656.761421319795], [994.0, 2286.3913043478256], [993.0, 2855.2200000000003], [992.0, 3086.8965517241377], [1.0, 1739.0]], "isOverall": false, "label": "/EvaluationService/submitEvaluation2", "isController": false}, {"data": [[735.6590000000008, 1951.8120000000017]], "isOverall": false, "label": "/EvaluationService/submitEvaluation2-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 4608.0, "minX": 1.629792584E12, "maxY": 88830.0, "series": [{"data": [[1.629792584E12, 4896.0], [1.629792594E12, 78642.0], [1.629792586E12, 72522.0], [1.629792596E12, 63138.0], [1.629792588E12, 68850.0], [1.629792598E12, 19176.0], [1.629792592E12, 56100.0], [1.62979259E12, 44676.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.629792584E12, 4608.0], [1.629792594E12, 88830.0], [1.629792586E12, 69510.0], [1.629792596E12, 77550.0], [1.629792588E12, 79422.0], [1.629792598E12, 22536.0], [1.629792592E12, 57756.0], [1.62979259E12, 55788.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629792598E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 212.5217391304349, "minX": 1.629792584E12, "maxY": 5748.521126760561, "series": [{"data": [[1.629792584E12, 1132.9285714285716], [1.629792594E12, 4248.885245901641], [1.629792586E12, 2315.6610738255044], [1.629792596E12, 4278.103658536587], [1.629792588E12, 3525.898601398602], [1.629792598E12, 5748.521126760561], [1.629792592E12, 5070.806878306879], [1.62979259E12, 4529.958762886599]], "isOverall": false, "label": "/CustomerService/loginByPhone", "isController": false}, {"data": [[1.629792584E12, 409.1666666666667], [1.629792594E12, 2074.886419753085], [1.629792586E12, 212.5217391304349], [1.629792596E12, 1559.9890109890118], [1.629792588E12, 2185.4087403598965], [1.629792598E12, 928.7435897435895], [1.629792592E12, 2447.424418604651], [1.62979259E12, 2776.718475073315]], "isOverall": false, "label": "/EvaluationService/submitEvaluation2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629792598E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 212.47826086956533, "minX": 1.629792584E12, "maxY": 5748.507042253521, "series": [{"data": [[1.629792584E12, 1132.7857142857142], [1.629792594E12, 4248.860655737706], [1.629792586E12, 2315.595637583893], [1.629792596E12, 4278.079268292681], [1.629792588E12, 3525.8916083916074], [1.629792598E12, 5748.507042253521], [1.629792592E12, 5070.78835978836], [1.62979259E12, 4529.948453608247]], "isOverall": false, "label": "/CustomerService/loginByPhone", "isController": false}, {"data": [[1.629792584E12, 409.0], [1.629792594E12, 2074.87160493827], [1.629792586E12, 212.47826086956533], [1.629792596E12, 1559.9780219780216], [1.629792588E12, 2185.3907455012863], [1.629792598E12, 928.7179487179486], [1.629792592E12, 2447.395348837209], [1.62979259E12, 2776.697947214077]], "isOverall": false, "label": "/EvaluationService/submitEvaluation2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629792598E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.629792584E12, "maxY": 916.1224832214766, "series": [{"data": [[1.629792584E12, 757.7142857142857], [1.629792594E12, 14.762295081967203], [1.629792586E12, 916.1224832214766], [1.629792596E12, 0.0], [1.629792588E12, 826.9615384615383], [1.629792598E12, 22.999999999999996], [1.629792592E12, 166.01058201058197], [1.62979259E12, 411.18556701030917]], "isOverall": false, "label": "/CustomerService/loginByPhone", "isController": false}, {"data": [[1.629792584E12, 0.0], [1.629792594E12, 0.0], [1.629792586E12, 0.0], [1.629792596E12, 0.0], [1.629792588E12, 0.0], [1.629792598E12, 0.0], [1.629792592E12, 0.0], [1.62979259E12, 0.0]], "isOverall": false, "label": "/EvaluationService/submitEvaluation2", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629792598E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.629792584E12, "maxY": 13226.0, "series": [{"data": [[1.629792584E12, 1490.0], [1.629792594E12, 9810.0], [1.629792586E12, 3544.0], [1.629792596E12, 11486.0], [1.629792588E12, 5159.0], [1.629792598E12, 13226.0], [1.629792592E12, 9550.0], [1.62979259E12, 7458.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.629792584E12, 1464.5], [1.629792594E12, 4968.400000000001], [1.629792586E12, 3075.0], [1.629792596E12, 5209.0], [1.629792588E12, 3785.7999999999997], [1.629792598E12, 7256.8], [1.629792592E12, 7356.200000000001], [1.62979259E12, 5163.400000000002]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.629792584E12, 1490.0], [1.629792594E12, 8304.159999999998], [1.629792586E12, 3502.88], [1.629792596E12, 8197.599999999957], [1.629792588E12, 4731.52], [1.629792598E12, 13169.929999999998], [1.629792592E12, 8966.95], [1.62979259E12, 7235.610000000004]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.629792584E12, 1485.3], [1.629792594E12, 5394.6], [1.629792586E12, 3222.6], [1.629792596E12, 5961.0], [1.629792588E12, 4022.9999999999986], [1.629792598E12, 7873.799999999999], [1.629792592E12, 7940.049999999999], [1.62979259E12, 6046.049999999997]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.629792584E12, 5.0], [1.629792594E12, 9.0], [1.629792586E12, 10.0], [1.629792596E12, 3.0], [1.629792588E12, 19.0], [1.629792598E12, 4.0], [1.629792592E12, 10.0], [1.62979259E12, 3.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.629792584E12, 1112.5], [1.629792594E12, 2967.0], [1.629792586E12, 2109.0], [1.629792596E12, 1900.0], [1.629792588E12, 2646.0], [1.629792598E12, 868.5], [1.629792592E12, 4089.5], [1.62979259E12, 2917.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629792598E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 868.5, "minX": 48.0, "maxY": 4119.5, "series": [{"data": [[188.0, 868.5], [48.0, 1112.5], [194.0, 3159.5], [212.0, 3864.0], [244.0, 2853.0], [271.0, 1315.0], [284.0, 2588.5], [323.0, 2101.0], [351.0, 1705.0], [338.0, 4119.5], [348.0, 1915.0], [360.0, 2796.0], [391.0, 3231.0], [448.0, 3624.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 448.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 868.5, "minX": 48.0, "maxY": 4119.5, "series": [{"data": [[188.0, 868.5], [48.0, 1112.5], [194.0, 3159.0], [212.0, 3864.0], [244.0, 2853.0], [271.0, 1315.0], [284.0, 2588.5], [323.0, 2101.0], [351.0, 1705.0], [338.0, 4119.5], [348.0, 1915.0], [360.0, 2796.0], [391.0, 3231.0], [448.0, 3624.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 448.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 37.0, "minX": 1.629792584E12, "maxY": 524.0, "series": [{"data": [[1.629792584E12, 524.0], [1.629792594E12, 218.5], [1.629792586E12, 354.5], [1.629792596E12, 85.0], [1.629792588E12, 336.0], [1.629792598E12, 37.0], [1.629792592E12, 227.5], [1.62979259E12, 217.5]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629792598E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 24.0, "minX": 1.629792584E12, "maxY": 385.5, "series": [{"data": [[1.629792584E12, 24.0], [1.629792594E12, 385.5], [1.629792586E12, 355.5], [1.629792596E12, 309.5], [1.629792588E12, 337.5], [1.629792598E12, 94.0], [1.629792592E12, 275.0], [1.62979259E12, 219.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629792598E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.629792584E12, "maxY": 298.0, "series": [{"data": [[1.629792584E12, 21.0], [1.629792594E12, 183.0], [1.629792586E12, 298.0], [1.629792596E12, 82.0], [1.629792588E12, 143.0], [1.629792598E12, 35.5], [1.629792592E12, 189.0], [1.62979259E12, 48.5]], "isOverall": false, "label": "/CustomerService/loginByPhone-success", "isController": false}, {"data": [[1.629792584E12, 3.0], [1.629792594E12, 202.5], [1.629792586E12, 57.5], [1.629792596E12, 227.5], [1.629792588E12, 194.5], [1.629792598E12, 58.5], [1.629792592E12, 86.0], [1.62979259E12, 170.5]], "isOverall": false, "label": "/EvaluationService/submitEvaluation2-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629792598E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 24.0, "minX": 1.629792584E12, "maxY": 385.5, "series": [{"data": [[1.629792584E12, 24.0], [1.629792594E12, 385.5], [1.629792586E12, 355.5], [1.629792596E12, 309.5], [1.629792588E12, 337.5], [1.629792598E12, 94.0], [1.629792592E12, 275.0], [1.62979259E12, 219.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629792598E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

