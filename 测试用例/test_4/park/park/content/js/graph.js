/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 10783.0, "series": [{"data": [[0.0, 8.0], [0.1, 8.0], [0.2, 9.0], [0.3, 9.0], [0.4, 10.0], [0.5, 10.0], [0.6, 10.0], [0.7, 10.0], [0.8, 11.0], [0.9, 11.0], [1.0, 11.0], [1.1, 12.0], [1.2, 12.0], [1.3, 12.0], [1.4, 12.0], [1.5, 12.0], [1.6, 13.0], [1.7, 13.0], [1.8, 13.0], [1.9, 13.0], [2.0, 14.0], [2.1, 14.0], [2.2, 14.0], [2.3, 14.0], [2.4, 14.0], [2.5, 15.0], [2.6, 15.0], [2.7, 15.0], [2.8, 15.0], [2.9, 15.0], [3.0, 16.0], [3.1, 16.0], [3.2, 17.0], [3.3, 17.0], [3.4, 18.0], [3.5, 18.0], [3.6, 19.0], [3.7, 19.0], [3.8, 20.0], [3.9, 20.0], [4.0, 21.0], [4.1, 21.0], [4.2, 21.0], [4.3, 22.0], [4.4, 24.0], [4.5, 24.0], [4.6, 25.0], [4.7, 25.0], [4.8, 25.0], [4.9, 27.0], [5.0, 30.0], [5.1, 31.0], [5.2, 32.0], [5.3, 34.0], [5.4, 37.0], [5.5, 37.0], [5.6, 40.0], [5.7, 42.0], [5.8, 43.0], [5.9, 45.0], [6.0, 52.0], [6.1, 59.0], [6.2, 64.0], [6.3, 68.0], [6.4, 78.0], [6.5, 82.0], [6.6, 82.0], [6.7, 89.0], [6.8, 93.0], [6.9, 100.0], [7.0, 102.0], [7.1, 105.0], [7.2, 110.0], [7.3, 117.0], [7.4, 134.0], [7.5, 136.0], [7.6, 162.0], [7.7, 174.0], [7.8, 185.0], [7.9, 189.0], [8.0, 220.0], [8.1, 230.0], [8.2, 246.0], [8.3, 257.0], [8.4, 258.0], [8.5, 279.0], [8.6, 299.0], [8.7, 315.0], [8.8, 357.0], [8.9, 369.0], [9.0, 375.0], [9.1, 377.0], [9.2, 506.0], [9.3, 533.0], [9.4, 564.0], [9.5, 669.0], [9.6, 729.0], [9.7, 842.0], [9.8, 880.0], [9.9, 1041.0], [10.0, 1098.0], [10.1, 1118.0], [10.2, 1137.0], [10.3, 1195.0], [10.4, 1384.0], [10.5, 1455.0], [10.6, 1477.0], [10.7, 1495.0], [10.8, 1509.0], [10.9, 1511.0], [11.0, 1513.0], [11.1, 1522.0], [11.2, 1527.0], [11.3, 1532.0], [11.4, 1535.0], [11.5, 1542.0], [11.6, 1543.0], [11.7, 1545.0], [11.8, 1566.0], [11.9, 1583.0], [12.0, 1617.0], [12.1, 1667.0], [12.2, 1692.0], [12.3, 1730.0], [12.4, 1741.0], [12.5, 1760.0], [12.6, 1806.0], [12.7, 1823.0], [12.8, 1904.0], [12.9, 1942.0], [13.0, 1978.0], [13.1, 1980.0], [13.2, 1984.0], [13.3, 1986.0], [13.4, 1989.0], [13.5, 1994.0], [13.6, 1995.0], [13.7, 2001.0], [13.8, 2003.0], [13.9, 2008.0], [14.0, 2010.0], [14.1, 2011.0], [14.2, 2011.0], [14.3, 2013.0], [14.4, 2018.0], [14.5, 2023.0], [14.6, 2029.0], [14.7, 2035.0], [14.8, 2039.0], [14.9, 2040.0], [15.0, 2043.0], [15.1, 2045.0], [15.2, 2051.0], [15.3, 2052.0], [15.4, 2055.0], [15.5, 2057.0], [15.6, 2057.0], [15.7, 2058.0], [15.8, 2058.0], [15.9, 2060.0], [16.0, 2062.0], [16.1, 2067.0], [16.2, 2072.0], [16.3, 2077.0], [16.4, 2085.0], [16.5, 2104.0], [16.6, 2127.0], [16.7, 2139.0], [16.8, 2143.0], [16.9, 2147.0], [17.0, 2148.0], [17.1, 2153.0], [17.2, 2158.0], [17.3, 2164.0], [17.4, 2166.0], [17.5, 2168.0], [17.6, 2174.0], [17.7, 2177.0], [17.8, 2178.0], [17.9, 2180.0], [18.0, 2185.0], [18.1, 2189.0], [18.2, 2191.0], [18.3, 2192.0], [18.4, 2192.0], [18.5, 2202.0], [18.6, 2203.0], [18.7, 2207.0], [18.8, 2213.0], [18.9, 2217.0], [19.0, 2219.0], [19.1, 2220.0], [19.2, 2228.0], [19.3, 2229.0], [19.4, 2230.0], [19.5, 2233.0], [19.6, 2235.0], [19.7, 2237.0], [19.8, 2239.0], [19.9, 2241.0], [20.0, 2242.0], [20.1, 2244.0], [20.2, 2244.0], [20.3, 2246.0], [20.4, 2248.0], [20.5, 2249.0], [20.6, 2250.0], [20.7, 2254.0], [20.8, 2256.0], [20.9, 2256.0], [21.0, 2258.0], [21.1, 2259.0], [21.2, 2261.0], [21.3, 2264.0], [21.4, 2266.0], [21.5, 2268.0], [21.6, 2269.0], [21.7, 2270.0], [21.8, 2271.0], [21.9, 2271.0], [22.0, 2271.0], [22.1, 2273.0], [22.2, 2273.0], [22.3, 2274.0], [22.4, 2275.0], [22.5, 2276.0], [22.6, 2278.0], [22.7, 2278.0], [22.8, 2278.0], [22.9, 2280.0], [23.0, 2281.0], [23.1, 2284.0], [23.2, 2289.0], [23.3, 2290.0], [23.4, 2292.0], [23.5, 2295.0], [23.6, 2297.0], [23.7, 2299.0], [23.8, 2301.0], [23.9, 2302.0], [24.0, 2306.0], [24.1, 2307.0], [24.2, 2308.0], [24.3, 2309.0], [24.4, 2310.0], [24.5, 2311.0], [24.6, 2312.0], [24.7, 2313.0], [24.8, 2317.0], [24.9, 2319.0], [25.0, 2321.0], [25.1, 2322.0], [25.2, 2323.0], [25.3, 2324.0], [25.4, 2325.0], [25.5, 2326.0], [25.6, 2328.0], [25.7, 2330.0], [25.8, 2332.0], [25.9, 2332.0], [26.0, 2335.0], [26.1, 2337.0], [26.2, 2338.0], [26.3, 2339.0], [26.4, 2340.0], [26.5, 2341.0], [26.6, 2341.0], [26.7, 2341.0], [26.8, 2342.0], [26.9, 2342.0], [27.0, 2343.0], [27.1, 2344.0], [27.2, 2344.0], [27.3, 2345.0], [27.4, 2345.0], [27.5, 2346.0], [27.6, 2346.0], [27.7, 2347.0], [27.8, 2349.0], [27.9, 2350.0], [28.0, 2351.0], [28.1, 2352.0], [28.2, 2354.0], [28.3, 2355.0], [28.4, 2356.0], [28.5, 2357.0], [28.6, 2360.0], [28.7, 2362.0], [28.8, 2363.0], [28.9, 2366.0], [29.0, 2367.0], [29.1, 2369.0], [29.2, 2370.0], [29.3, 2373.0], [29.4, 2374.0], [29.5, 2374.0], [29.6, 2375.0], [29.7, 2376.0], [29.8, 2377.0], [29.9, 2380.0], [30.0, 2381.0], [30.1, 2382.0], [30.2, 2384.0], [30.3, 2385.0], [30.4, 2386.0], [30.5, 2389.0], [30.6, 2390.0], [30.7, 2392.0], [30.8, 2393.0], [30.9, 2396.0], [31.0, 2397.0], [31.1, 2398.0], [31.2, 2399.0], [31.3, 2400.0], [31.4, 2401.0], [31.5, 2402.0], [31.6, 2403.0], [31.7, 2403.0], [31.8, 2404.0], [31.9, 2406.0], [32.0, 2408.0], [32.1, 2409.0], [32.2, 2410.0], [32.3, 2411.0], [32.4, 2417.0], [32.5, 2419.0], [32.6, 2420.0], [32.7, 2421.0], [32.8, 2421.0], [32.9, 2423.0], [33.0, 2426.0], [33.1, 2427.0], [33.2, 2429.0], [33.3, 2430.0], [33.4, 2431.0], [33.5, 2433.0], [33.6, 2433.0], [33.7, 2435.0], [33.8, 2435.0], [33.9, 2435.0], [34.0, 2438.0], [34.1, 2439.0], [34.2, 2440.0], [34.3, 2440.0], [34.4, 2443.0], [34.5, 2445.0], [34.6, 2446.0], [34.7, 2449.0], [34.8, 2451.0], [34.9, 2452.0], [35.0, 2452.0], [35.1, 2454.0], [35.2, 2455.0], [35.3, 2455.0], [35.4, 2456.0], [35.5, 2456.0], [35.6, 2457.0], [35.7, 2457.0], [35.8, 2458.0], [35.9, 2459.0], [36.0, 2459.0], [36.1, 2460.0], [36.2, 2461.0], [36.3, 2462.0], [36.4, 2463.0], [36.5, 2463.0], [36.6, 2465.0], [36.7, 2467.0], [36.8, 2468.0], [36.9, 2468.0], [37.0, 2470.0], [37.1, 2471.0], [37.2, 2471.0], [37.3, 2471.0], [37.4, 2472.0], [37.5, 2472.0], [37.6, 2473.0], [37.7, 2474.0], [37.8, 2476.0], [37.9, 2476.0], [38.0, 2477.0], [38.1, 2477.0], [38.2, 2478.0], [38.3, 2479.0], [38.4, 2479.0], [38.5, 2480.0], [38.6, 2480.0], [38.7, 2480.0], [38.8, 2481.0], [38.9, 2483.0], [39.0, 2484.0], [39.1, 2484.0], [39.2, 2485.0], [39.3, 2486.0], [39.4, 2486.0], [39.5, 2488.0], [39.6, 2488.0], [39.7, 2490.0], [39.8, 2492.0], [39.9, 2492.0], [40.0, 2493.0], [40.1, 2494.0], [40.2, 2495.0], [40.3, 2496.0], [40.4, 2497.0], [40.5, 2498.0], [40.6, 2498.0], [40.7, 2499.0], [40.8, 2499.0], [40.9, 2502.0], [41.0, 2502.0], [41.1, 2504.0], [41.2, 2505.0], [41.3, 2506.0], [41.4, 2506.0], [41.5, 2506.0], [41.6, 2507.0], [41.7, 2507.0], [41.8, 2507.0], [41.9, 2508.0], [42.0, 2508.0], [42.1, 2508.0], [42.2, 2509.0], [42.3, 2509.0], [42.4, 2510.0], [42.5, 2510.0], [42.6, 2511.0], [42.7, 2512.0], [42.8, 2512.0], [42.9, 2512.0], [43.0, 2513.0], [43.1, 2513.0], [43.2, 2513.0], [43.3, 2514.0], [43.4, 2514.0], [43.5, 2514.0], [43.6, 2515.0], [43.7, 2516.0], [43.8, 2516.0], [43.9, 2516.0], [44.0, 2516.0], [44.1, 2517.0], [44.2, 2518.0], [44.3, 2518.0], [44.4, 2519.0], [44.5, 2520.0], [44.6, 2520.0], [44.7, 2521.0], [44.8, 2522.0], [44.9, 2522.0], [45.0, 2523.0], [45.1, 2523.0], [45.2, 2523.0], [45.3, 2524.0], [45.4, 2524.0], [45.5, 2525.0], [45.6, 2526.0], [45.7, 2526.0], [45.8, 2527.0], [45.9, 2527.0], [46.0, 2527.0], [46.1, 2529.0], [46.2, 2530.0], [46.3, 2530.0], [46.4, 2531.0], [46.5, 2532.0], [46.6, 2532.0], [46.7, 2532.0], [46.8, 2533.0], [46.9, 2533.0], [47.0, 2534.0], [47.1, 2534.0], [47.2, 2534.0], [47.3, 2535.0], [47.4, 2535.0], [47.5, 2536.0], [47.6, 2536.0], [47.7, 2536.0], [47.8, 2537.0], [47.9, 2538.0], [48.0, 2538.0], [48.1, 2539.0], [48.2, 2539.0], [48.3, 2540.0], [48.4, 2542.0], [48.5, 2542.0], [48.6, 2542.0], [48.7, 2543.0], [48.8, 2544.0], [48.9, 2544.0], [49.0, 2545.0], [49.1, 2545.0], [49.2, 2545.0], [49.3, 2548.0], [49.4, 2548.0], [49.5, 2549.0], [49.6, 2550.0], [49.7, 2550.0], [49.8, 2550.0], [49.9, 2550.0], [50.0, 2550.0], [50.1, 2550.0], [50.2, 2551.0], [50.3, 2551.0], [50.4, 2552.0], [50.5, 2552.0], [50.6, 2552.0], [50.7, 2552.0], [50.8, 2553.0], [50.9, 2555.0], [51.0, 2556.0], [51.1, 2556.0], [51.2, 2557.0], [51.3, 2558.0], [51.4, 2558.0], [51.5, 2560.0], [51.6, 2560.0], [51.7, 2561.0], [51.8, 2562.0], [51.9, 2563.0], [52.0, 2564.0], [52.1, 2564.0], [52.2, 2564.0], [52.3, 2565.0], [52.4, 2565.0], [52.5, 2565.0], [52.6, 2566.0], [52.7, 2566.0], [52.8, 2566.0], [52.9, 2567.0], [53.0, 2568.0], [53.1, 2568.0], [53.2, 2569.0], [53.3, 2569.0], [53.4, 2570.0], [53.5, 2572.0], [53.6, 2572.0], [53.7, 2572.0], [53.8, 2573.0], [53.9, 2574.0], [54.0, 2577.0], [54.1, 2577.0], [54.2, 2578.0], [54.3, 2579.0], [54.4, 2579.0], [54.5, 2581.0], [54.6, 2581.0], [54.7, 2583.0], [54.8, 2585.0], [54.9, 2585.0], [55.0, 2586.0], [55.1, 2587.0], [55.2, 2587.0], [55.3, 2589.0], [55.4, 2590.0], [55.5, 2591.0], [55.6, 2594.0], [55.7, 2595.0], [55.8, 2598.0], [55.9, 2601.0], [56.0, 2601.0], [56.1, 2602.0], [56.2, 2603.0], [56.3, 2604.0], [56.4, 2606.0], [56.5, 2606.0], [56.6, 2607.0], [56.7, 2607.0], [56.8, 2607.0], [56.9, 2608.0], [57.0, 2611.0], [57.1, 2613.0], [57.2, 2616.0], [57.3, 2617.0], [57.4, 2621.0], [57.5, 2623.0], [57.6, 2627.0], [57.7, 2627.0], [57.8, 2636.0], [57.9, 2642.0], [58.0, 2645.0], [58.1, 2647.0], [58.2, 2650.0], [58.3, 2652.0], [58.4, 2653.0], [58.5, 2655.0], [58.6, 2655.0], [58.7, 2656.0], [58.8, 2657.0], [58.9, 2658.0], [59.0, 2662.0], [59.1, 2663.0], [59.2, 2667.0], [59.3, 2672.0], [59.4, 2674.0], [59.5, 2675.0], [59.6, 2676.0], [59.7, 2682.0], [59.8, 2683.0], [59.9, 2685.0], [60.0, 2687.0], [60.1, 2689.0], [60.2, 2690.0], [60.3, 2693.0], [60.4, 2702.0], [60.5, 2714.0], [60.6, 2723.0], [60.7, 2724.0], [60.8, 2726.0], [60.9, 2728.0], [61.0, 2736.0], [61.1, 2739.0], [61.2, 2748.0], [61.3, 2756.0], [61.4, 2776.0], [61.5, 2776.0], [61.6, 2777.0], [61.7, 2779.0], [61.8, 2782.0], [61.9, 2784.0], [62.0, 2785.0], [62.1, 2791.0], [62.2, 2794.0], [62.3, 2804.0], [62.4, 2817.0], [62.5, 2825.0], [62.6, 2828.0], [62.7, 2831.0], [62.8, 2842.0], [62.9, 2845.0], [63.0, 2846.0], [63.1, 2848.0], [63.2, 2855.0], [63.3, 2863.0], [63.4, 2866.0], [63.5, 2868.0], [63.6, 2869.0], [63.7, 2870.0], [63.8, 2870.0], [63.9, 2871.0], [64.0, 2871.0], [64.1, 2871.0], [64.2, 2872.0], [64.3, 2872.0], [64.4, 2874.0], [64.5, 2875.0], [64.6, 2875.0], [64.7, 2875.0], [64.8, 2876.0], [64.9, 2877.0], [65.0, 2877.0], [65.1, 2877.0], [65.2, 2878.0], [65.3, 2879.0], [65.4, 2879.0], [65.5, 2880.0], [65.6, 2880.0], [65.7, 2881.0], [65.8, 2881.0], [65.9, 2882.0], [66.0, 2882.0], [66.1, 2883.0], [66.2, 2883.0], [66.3, 2884.0], [66.4, 2884.0], [66.5, 2885.0], [66.6, 2886.0], [66.7, 2887.0], [66.8, 2889.0], [66.9, 2890.0], [67.0, 2891.0], [67.1, 2891.0], [67.2, 2892.0], [67.3, 2893.0], [67.4, 2894.0], [67.5, 2896.0], [67.6, 2899.0], [67.7, 2903.0], [67.8, 2906.0], [67.9, 2915.0], [68.0, 2918.0], [68.1, 2921.0], [68.2, 2922.0], [68.3, 2925.0], [68.4, 2925.0], [68.5, 2927.0], [68.6, 2930.0], [68.7, 2932.0], [68.8, 2932.0], [68.9, 2934.0], [69.0, 2935.0], [69.1, 2937.0], [69.2, 2939.0], [69.3, 2941.0], [69.4, 2942.0], [69.5, 2943.0], [69.6, 2944.0], [69.7, 2945.0], [69.8, 2949.0], [69.9, 2951.0], [70.0, 2951.0], [70.1, 2953.0], [70.2, 2954.0], [70.3, 2954.0], [70.4, 2956.0], [70.5, 2957.0], [70.6, 2958.0], [70.7, 2959.0], [70.8, 2962.0], [70.9, 2962.0], [71.0, 2963.0], [71.1, 2967.0], [71.2, 2967.0], [71.3, 2969.0], [71.4, 2973.0], [71.5, 2973.0], [71.6, 2975.0], [71.7, 2976.0], [71.8, 2978.0], [71.9, 2981.0], [72.0, 2983.0], [72.1, 2984.0], [72.2, 2986.0], [72.3, 2988.0], [72.4, 2991.0], [72.5, 2992.0], [72.6, 2999.0], [72.7, 3001.0], [72.8, 3003.0], [72.9, 3005.0], [73.0, 3006.0], [73.1, 3008.0], [73.2, 3010.0], [73.3, 3011.0], [73.4, 3014.0], [73.5, 3018.0], [73.6, 3018.0], [73.7, 3019.0], [73.8, 3024.0], [73.9, 3026.0], [74.0, 3028.0], [74.1, 3031.0], [74.2, 3031.0], [74.3, 3034.0], [74.4, 3036.0], [74.5, 3036.0], [74.6, 3037.0], [74.7, 3039.0], [74.8, 3042.0], [74.9, 3043.0], [75.0, 3045.0], [75.1, 3046.0], [75.2, 3050.0], [75.3, 3052.0], [75.4, 3052.0], [75.5, 3054.0], [75.6, 3054.0], [75.7, 3057.0], [75.8, 3058.0], [75.9, 3060.0], [76.0, 3062.0], [76.1, 3068.0], [76.2, 3071.0], [76.3, 3071.0], [76.4, 3072.0], [76.5, 3074.0], [76.6, 3075.0], [76.7, 3077.0], [76.8, 3078.0], [76.9, 3081.0], [77.0, 3081.0], [77.1, 3083.0], [77.2, 3087.0], [77.3, 3088.0], [77.4, 3088.0], [77.5, 3089.0], [77.6, 3091.0], [77.7, 3094.0], [77.8, 3097.0], [77.9, 3098.0], [78.0, 3099.0], [78.1, 3099.0], [78.2, 3100.0], [78.3, 3101.0], [78.4, 3101.0], [78.5, 3102.0], [78.6, 3104.0], [78.7, 3104.0], [78.8, 3104.0], [78.9, 3105.0], [79.0, 3106.0], [79.1, 3107.0], [79.2, 3108.0], [79.3, 3108.0], [79.4, 3109.0], [79.5, 3111.0], [79.6, 3113.0], [79.7, 3114.0], [79.8, 3114.0], [79.9, 3115.0], [80.0, 3116.0], [80.1, 3116.0], [80.2, 3117.0], [80.3, 3120.0], [80.4, 3121.0], [80.5, 3122.0], [80.6, 3123.0], [80.7, 3123.0], [80.8, 3125.0], [80.9, 3125.0], [81.0, 3126.0], [81.1, 3127.0], [81.2, 3131.0], [81.3, 3134.0], [81.4, 3135.0], [81.5, 3136.0], [81.6, 3137.0], [81.7, 3138.0], [81.8, 3139.0], [81.9, 3140.0], [82.0, 3140.0], [82.1, 3142.0], [82.2, 3142.0], [82.3, 3143.0], [82.4, 3144.0], [82.5, 3144.0], [82.6, 3145.0], [82.7, 3145.0], [82.8, 3147.0], [82.9, 3149.0], [83.0, 3151.0], [83.1, 3152.0], [83.2, 3152.0], [83.3, 3155.0], [83.4, 3156.0], [83.5, 3157.0], [83.6, 3157.0], [83.7, 3159.0], [83.8, 3160.0], [83.9, 3160.0], [84.0, 3161.0], [84.1, 3161.0], [84.2, 3162.0], [84.3, 3163.0], [84.4, 3164.0], [84.5, 3165.0], [84.6, 3165.0], [84.7, 3166.0], [84.8, 3168.0], [84.9, 3170.0], [85.0, 3170.0], [85.1, 3171.0], [85.2, 3171.0], [85.3, 3172.0], [85.4, 3173.0], [85.5, 3173.0], [85.6, 3174.0], [85.7, 3176.0], [85.8, 3177.0], [85.9, 3178.0], [86.0, 3179.0], [86.1, 3180.0], [86.2, 3181.0], [86.3, 3182.0], [86.4, 3183.0], [86.5, 3184.0], [86.6, 3184.0], [86.7, 3186.0], [86.8, 3188.0], [86.9, 3188.0], [87.0, 3190.0], [87.1, 3192.0], [87.2, 3193.0], [87.3, 3194.0], [87.4, 3194.0], [87.5, 3196.0], [87.6, 3196.0], [87.7, 3198.0], [87.8, 3199.0], [87.9, 3200.0], [88.0, 3204.0], [88.1, 3206.0], [88.2, 3206.0], [88.3, 3206.0], [88.4, 3209.0], [88.5, 3211.0], [88.6, 3212.0], [88.7, 3213.0], [88.8, 3213.0], [88.9, 3216.0], [89.0, 3216.0], [89.1, 3220.0], [89.2, 3222.0], [89.3, 3224.0], [89.4, 3225.0], [89.5, 3228.0], [89.6, 3228.0], [89.7, 3233.0], [89.8, 3244.0], [89.9, 3249.0], [90.0, 3252.0], [90.1, 3254.0], [90.2, 3260.0], [90.3, 3262.0], [90.4, 3262.0], [90.5, 3265.0], [90.6, 3273.0], [90.7, 3281.0], [90.8, 3284.0], [90.9, 3287.0], [91.0, 3292.0], [91.1, 3298.0], [91.2, 3303.0], [91.3, 3305.0], [91.4, 3310.0], [91.5, 3313.0], [91.6, 3330.0], [91.7, 3334.0], [91.8, 3349.0], [91.9, 3351.0], [92.0, 3360.0], [92.1, 3395.0], [92.2, 3443.0], [92.3, 3448.0], [92.4, 3471.0], [92.5, 3509.0], [92.6, 3567.0], [92.7, 3603.0], [92.8, 3618.0], [92.9, 3627.0], [93.0, 3641.0], [93.1, 3681.0], [93.2, 3705.0], [93.3, 3720.0], [93.4, 3731.0], [93.5, 3745.0], [93.6, 3757.0], [93.7, 3825.0], [93.8, 3844.0], [93.9, 3868.0], [94.0, 3949.0], [94.1, 3998.0], [94.2, 4002.0], [94.3, 4023.0], [94.4, 4112.0], [94.5, 4147.0], [94.6, 4178.0], [94.7, 4249.0], [94.8, 4313.0], [94.9, 4326.0], [95.0, 4345.0], [95.1, 4476.0], [95.2, 4526.0], [95.3, 4602.0], [95.4, 4616.0], [95.5, 4697.0], [95.6, 4730.0], [95.7, 4746.0], [95.8, 4790.0], [95.9, 4882.0], [96.0, 4913.0], [96.1, 5010.0], [96.2, 5062.0], [96.3, 5162.0], [96.4, 5243.0], [96.5, 5325.0], [96.6, 5398.0], [96.7, 5717.0], [96.8, 5752.0], [96.9, 5902.0], [97.0, 6098.0], [97.1, 6239.0], [97.2, 6346.0], [97.3, 6498.0], [97.4, 7139.0], [97.5, 7345.0], [97.6, 7443.0], [97.7, 7481.0], [97.8, 7640.0], [97.9, 7708.0], [98.0, 7788.0], [98.1, 8349.0], [98.2, 8376.0], [98.3, 8543.0], [98.4, 8839.0], [98.5, 8976.0], [98.6, 9034.0], [98.7, 9176.0], [98.8, 9425.0], [98.9, 10001.0], [99.0, 10157.0], [99.1, 10263.0], [99.2, 10385.0], [99.3, 10396.0], [99.4, 10486.0], [99.5, 10548.0], [99.6, 10576.0], [99.7, 10653.0], [99.8, 10738.0], [99.9, 10752.0]], "isOverall": false, "label": "/car/manage/renew", "isController": false}, {"data": [[0.0, 2.0], [0.1, 3.0], [0.2, 3.0], [0.3, 3.0], [0.4, 4.0], [0.5, 4.0], [0.6, 4.0], [0.7, 5.0], [0.8, 6.0], [0.9, 6.0], [1.0, 7.0], [1.1, 7.0], [1.2, 8.0], [1.3, 9.0], [1.4, 9.0], [1.5, 12.0], [1.6, 15.0], [1.7, 18.0], [1.8, 30.0], [1.9, 42.0], [2.0, 73.0], [2.1, 100.0], [2.2, 116.0], [2.3, 120.0], [2.4, 132.0], [2.5, 240.0], [2.6, 323.0], [2.7, 336.0], [2.8, 361.0], [2.9, 412.0], [3.0, 506.0], [3.1, 528.0], [3.2, 562.0], [3.3, 627.0], [3.4, 633.0], [3.5, 638.0], [3.6, 646.0], [3.7, 656.0], [3.8, 696.0], [3.9, 739.0], [4.0, 758.0], [4.1, 798.0], [4.2, 803.0], [4.3, 839.0], [4.4, 853.0], [4.5, 862.0], [4.6, 865.0], [4.7, 898.0], [4.8, 931.0], [4.9, 951.0], [5.0, 969.0], [5.1, 997.0], [5.2, 1004.0], [5.3, 1010.0], [5.4, 1020.0], [5.5, 1022.0], [5.6, 1029.0], [5.7, 1045.0], [5.8, 1060.0], [5.9, 1073.0], [6.0, 1078.0], [6.1, 1087.0], [6.2, 1093.0], [6.3, 1098.0], [6.4, 1098.0], [6.5, 1100.0], [6.6, 1101.0], [6.7, 1112.0], [6.8, 1116.0], [6.9, 1117.0], [7.0, 1121.0], [7.1, 1124.0], [7.2, 1135.0], [7.3, 1137.0], [7.4, 1149.0], [7.5, 1157.0], [7.6, 1164.0], [7.7, 1171.0], [7.8, 1176.0], [7.9, 1180.0], [8.0, 1181.0], [8.1, 1189.0], [8.2, 1191.0], [8.3, 1202.0], [8.4, 1207.0], [8.5, 1209.0], [8.6, 1221.0], [8.7, 1234.0], [8.8, 1236.0], [8.9, 1237.0], [9.0, 1239.0], [9.1, 1261.0], [9.2, 1262.0], [9.3, 1269.0], [9.4, 1276.0], [9.5, 1280.0], [9.6, 1288.0], [9.7, 1292.0], [9.8, 1297.0], [9.9, 1309.0], [10.0, 1314.0], [10.1, 1323.0], [10.2, 1327.0], [10.3, 1344.0], [10.4, 1353.0], [10.5, 1360.0], [10.6, 1363.0], [10.7, 1364.0], [10.8, 1368.0], [10.9, 1369.0], [11.0, 1371.0], [11.1, 1381.0], [11.2, 1384.0], [11.3, 1388.0], [11.4, 1403.0], [11.5, 1405.0], [11.6, 1412.0], [11.7, 1420.0], [11.8, 1423.0], [11.9, 1431.0], [12.0, 1439.0], [12.1, 1443.0], [12.2, 1450.0], [12.3, 1452.0], [12.4, 1454.0], [12.5, 1460.0], [12.6, 1461.0], [12.7, 1463.0], [12.8, 1467.0], [12.9, 1472.0], [13.0, 1480.0], [13.1, 1484.0], [13.2, 1488.0], [13.3, 1489.0], [13.4, 1498.0], [13.5, 1502.0], [13.6, 1508.0], [13.7, 1515.0], [13.8, 1517.0], [13.9, 1520.0], [14.0, 1524.0], [14.1, 1527.0], [14.2, 1533.0], [14.3, 1538.0], [14.4, 1554.0], [14.5, 1562.0], [14.6, 1569.0], [14.7, 1572.0], [14.8, 1574.0], [14.9, 1581.0], [15.0, 1582.0], [15.1, 1585.0], [15.2, 1588.0], [15.3, 1592.0], [15.4, 1594.0], [15.5, 1602.0], [15.6, 1608.0], [15.7, 1620.0], [15.8, 1628.0], [15.9, 1629.0], [16.0, 1629.0], [16.1, 1642.0], [16.2, 1648.0], [16.3, 1651.0], [16.4, 1660.0], [16.5, 1666.0], [16.6, 1667.0], [16.7, 1672.0], [16.8, 1680.0], [16.9, 1689.0], [17.0, 1690.0], [17.1, 1694.0], [17.2, 1701.0], [17.3, 1702.0], [17.4, 1706.0], [17.5, 1711.0], [17.6, 1715.0], [17.7, 1721.0], [17.8, 1728.0], [17.9, 1734.0], [18.0, 1736.0], [18.1, 1741.0], [18.2, 1743.0], [18.3, 1746.0], [18.4, 1749.0], [18.5, 1755.0], [18.6, 1761.0], [18.7, 1769.0], [18.8, 1769.0], [18.9, 1775.0], [19.0, 1783.0], [19.1, 1791.0], [19.2, 1795.0], [19.3, 1797.0], [19.4, 1801.0], [19.5, 1809.0], [19.6, 1815.0], [19.7, 1817.0], [19.8, 1822.0], [19.9, 1823.0], [20.0, 1829.0], [20.1, 1832.0], [20.2, 1836.0], [20.3, 1837.0], [20.4, 1839.0], [20.5, 1843.0], [20.6, 1851.0], [20.7, 1854.0], [20.8, 1855.0], [20.9, 1860.0], [21.0, 1861.0], [21.1, 1870.0], [21.2, 1873.0], [21.3, 1880.0], [21.4, 1880.0], [21.5, 1887.0], [21.6, 1891.0], [21.7, 1898.0], [21.8, 1900.0], [21.9, 1902.0], [22.0, 1909.0], [22.1, 1912.0], [22.2, 1915.0], [22.3, 1917.0], [22.4, 1917.0], [22.5, 1919.0], [22.6, 1923.0], [22.7, 1933.0], [22.8, 1934.0], [22.9, 1936.0], [23.0, 1939.0], [23.1, 1942.0], [23.2, 1945.0], [23.3, 1946.0], [23.4, 1948.0], [23.5, 1950.0], [23.6, 1955.0], [23.7, 1956.0], [23.8, 1961.0], [23.9, 1961.0], [24.0, 1968.0], [24.1, 1971.0], [24.2, 1973.0], [24.3, 1976.0], [24.4, 1981.0], [24.5, 1985.0], [24.6, 1991.0], [24.7, 1995.0], [24.8, 1996.0], [24.9, 2001.0], [25.0, 2003.0], [25.1, 2005.0], [25.2, 2017.0], [25.3, 2023.0], [25.4, 2024.0], [25.5, 2030.0], [25.6, 2031.0], [25.7, 2034.0], [25.8, 2038.0], [25.9, 2046.0], [26.0, 2051.0], [26.1, 2055.0], [26.2, 2059.0], [26.3, 2061.0], [26.4, 2063.0], [26.5, 2069.0], [26.6, 2071.0], [26.7, 2076.0], [26.8, 2078.0], [26.9, 2079.0], [27.0, 2087.0], [27.1, 2094.0], [27.2, 2099.0], [27.3, 2102.0], [27.4, 2103.0], [27.5, 2107.0], [27.6, 2112.0], [27.7, 2112.0], [27.8, 2116.0], [27.9, 2126.0], [28.0, 2129.0], [28.1, 2136.0], [28.2, 2140.0], [28.3, 2141.0], [28.4, 2148.0], [28.5, 2149.0], [28.6, 2156.0], [28.7, 2159.0], [28.8, 2163.0], [28.9, 2164.0], [29.0, 2172.0], [29.1, 2175.0], [29.2, 2178.0], [29.3, 2183.0], [29.4, 2185.0], [29.5, 2188.0], [29.6, 2204.0], [29.7, 2211.0], [29.8, 2214.0], [29.9, 2215.0], [30.0, 2221.0], [30.1, 2223.0], [30.2, 2249.0], [30.3, 2251.0], [30.4, 2255.0], [30.5, 2258.0], [30.6, 2261.0], [30.7, 2267.0], [30.8, 2269.0], [30.9, 2275.0], [31.0, 2283.0], [31.1, 2290.0], [31.2, 2297.0], [31.3, 2298.0], [31.4, 2305.0], [31.5, 2310.0], [31.6, 2315.0], [31.7, 2322.0], [31.8, 2328.0], [31.9, 2342.0], [32.0, 2350.0], [32.1, 2353.0], [32.2, 2362.0], [32.3, 2363.0], [32.4, 2365.0], [32.5, 2366.0], [32.6, 2367.0], [32.7, 2369.0], [32.8, 2369.0], [32.9, 2370.0], [33.0, 2370.0], [33.1, 2371.0], [33.2, 2371.0], [33.3, 2374.0], [33.4, 2375.0], [33.5, 2376.0], [33.6, 2377.0], [33.7, 2377.0], [33.8, 2379.0], [33.9, 2379.0], [34.0, 2382.0], [34.1, 2382.0], [34.2, 2383.0], [34.3, 2384.0], [34.4, 2385.0], [34.5, 2385.0], [34.6, 2385.0], [34.7, 2387.0], [34.8, 2387.0], [34.9, 2388.0], [35.0, 2389.0], [35.1, 2389.0], [35.2, 2390.0], [35.3, 2390.0], [35.4, 2390.0], [35.5, 2391.0], [35.6, 2391.0], [35.7, 2391.0], [35.8, 2392.0], [35.9, 2393.0], [36.0, 2393.0], [36.1, 2394.0], [36.2, 2394.0], [36.3, 2395.0], [36.4, 2395.0], [36.5, 2395.0], [36.6, 2396.0], [36.7, 2396.0], [36.8, 2396.0], [36.9, 2397.0], [37.0, 2397.0], [37.1, 2398.0], [37.2, 2398.0], [37.3, 2399.0], [37.4, 2399.0], [37.5, 2400.0], [37.6, 2401.0], [37.7, 2401.0], [37.8, 2402.0], [37.9, 2402.0], [38.0, 2403.0], [38.1, 2404.0], [38.2, 2405.0], [38.3, 2406.0], [38.4, 2407.0], [38.5, 2409.0], [38.6, 2409.0], [38.7, 2410.0], [38.8, 2410.0], [38.9, 2412.0], [39.0, 2412.0], [39.1, 2413.0], [39.2, 2415.0], [39.3, 2415.0], [39.4, 2416.0], [39.5, 2419.0], [39.6, 2420.0], [39.7, 2420.0], [39.8, 2421.0], [39.9, 2423.0], [40.0, 2425.0], [40.1, 2428.0], [40.2, 2429.0], [40.3, 2429.0], [40.4, 2430.0], [40.5, 2433.0], [40.6, 2433.0], [40.7, 2434.0], [40.8, 2435.0], [40.9, 2437.0], [41.0, 2439.0], [41.1, 2439.0], [41.2, 2441.0], [41.3, 2442.0], [41.4, 2444.0], [41.5, 2444.0], [41.6, 2445.0], [41.7, 2445.0], [41.8, 2446.0], [41.9, 2447.0], [42.0, 2447.0], [42.1, 2449.0], [42.2, 2449.0], [42.3, 2452.0], [42.4, 2454.0], [42.5, 2456.0], [42.6, 2457.0], [42.7, 2458.0], [42.8, 2459.0], [42.9, 2460.0], [43.0, 2460.0], [43.1, 2460.0], [43.2, 2460.0], [43.3, 2461.0], [43.4, 2462.0], [43.5, 2463.0], [43.6, 2463.0], [43.7, 2464.0], [43.8, 2465.0], [43.9, 2465.0], [44.0, 2466.0], [44.1, 2467.0], [44.2, 2470.0], [44.3, 2474.0], [44.4, 2478.0], [44.5, 2480.0], [44.6, 2483.0], [44.7, 2484.0], [44.8, 2486.0], [44.9, 2488.0], [45.0, 2491.0], [45.1, 2492.0], [45.2, 2493.0], [45.3, 2494.0], [45.4, 2495.0], [45.5, 2499.0], [45.6, 2501.0], [45.7, 2502.0], [45.8, 2502.0], [45.9, 2502.0], [46.0, 2504.0], [46.1, 2505.0], [46.2, 2505.0], [46.3, 2507.0], [46.4, 2508.0], [46.5, 2509.0], [46.6, 2510.0], [46.7, 2511.0], [46.8, 2513.0], [46.9, 2514.0], [47.0, 2515.0], [47.1, 2517.0], [47.2, 2517.0], [47.3, 2521.0], [47.4, 2523.0], [47.5, 2524.0], [47.6, 2526.0], [47.7, 2529.0], [47.8, 2529.0], [47.9, 2531.0], [48.0, 2531.0], [48.1, 2532.0], [48.2, 2533.0], [48.3, 2535.0], [48.4, 2537.0], [48.5, 2537.0], [48.6, 2538.0], [48.7, 2539.0], [48.8, 2541.0], [48.9, 2541.0], [49.0, 2543.0], [49.1, 2544.0], [49.2, 2546.0], [49.3, 2547.0], [49.4, 2548.0], [49.5, 2548.0], [49.6, 2550.0], [49.7, 2552.0], [49.8, 2555.0], [49.9, 2556.0], [50.0, 2561.0], [50.1, 2567.0], [50.2, 2569.0], [50.3, 2571.0], [50.4, 2572.0], [50.5, 2574.0], [50.6, 2575.0], [50.7, 2578.0], [50.8, 2583.0], [50.9, 2585.0], [51.0, 2586.0], [51.1, 2587.0], [51.2, 2589.0], [51.3, 2590.0], [51.4, 2592.0], [51.5, 2595.0], [51.6, 2597.0], [51.7, 2598.0], [51.8, 2600.0], [51.9, 2600.0], [52.0, 2602.0], [52.1, 2603.0], [52.2, 2603.0], [52.3, 2604.0], [52.4, 2611.0], [52.5, 2613.0], [52.6, 2615.0], [52.7, 2627.0], [52.8, 2630.0], [52.9, 2633.0], [53.0, 2634.0], [53.1, 2640.0], [53.2, 2642.0], [53.3, 2644.0], [53.4, 2645.0], [53.5, 2652.0], [53.6, 2655.0], [53.7, 2656.0], [53.8, 2657.0], [53.9, 2661.0], [54.0, 2667.0], [54.1, 2676.0], [54.2, 2683.0], [54.3, 2694.0], [54.4, 2701.0], [54.5, 2703.0], [54.6, 2708.0], [54.7, 2711.0], [54.8, 2716.0], [54.9, 2719.0], [55.0, 2743.0], [55.1, 2746.0], [55.2, 2756.0], [55.3, 2756.0], [55.4, 2760.0], [55.5, 2763.0], [55.6, 2768.0], [55.7, 2775.0], [55.8, 2777.0], [55.9, 2781.0], [56.0, 2783.0], [56.1, 2786.0], [56.2, 2787.0], [56.3, 2789.0], [56.4, 2790.0], [56.5, 2791.0], [56.6, 2792.0], [56.7, 2795.0], [56.8, 2798.0], [56.9, 2800.0], [57.0, 2804.0], [57.1, 2807.0], [57.2, 2807.0], [57.3, 2809.0], [57.4, 2814.0], [57.5, 2819.0], [57.6, 2823.0], [57.7, 2823.0], [57.8, 2827.0], [57.9, 2830.0], [58.0, 2831.0], [58.1, 2832.0], [58.2, 2834.0], [58.3, 2834.0], [58.4, 2836.0], [58.5, 2837.0], [58.6, 2837.0], [58.7, 2839.0], [58.8, 2840.0], [58.9, 2841.0], [59.0, 2842.0], [59.1, 2843.0], [59.2, 2844.0], [59.3, 2846.0], [59.4, 2846.0], [59.5, 2853.0], [59.6, 2861.0], [59.7, 2861.0], [59.8, 2862.0], [59.9, 2866.0], [60.0, 2867.0], [60.1, 2872.0], [60.2, 2873.0], [60.3, 2873.0], [60.4, 2875.0], [60.5, 2875.0], [60.6, 2876.0], [60.7, 2877.0], [60.8, 2877.0], [60.9, 2880.0], [61.0, 2881.0], [61.1, 2883.0], [61.2, 2884.0], [61.3, 2889.0], [61.4, 2891.0], [61.5, 2892.0], [61.6, 2894.0], [61.7, 2898.0], [61.8, 2900.0], [61.9, 2902.0], [62.0, 2903.0], [62.1, 2903.0], [62.2, 2904.0], [62.3, 2904.0], [62.4, 2906.0], [62.5, 2907.0], [62.6, 2909.0], [62.7, 2910.0], [62.8, 2911.0], [62.9, 2913.0], [63.0, 2913.0], [63.1, 2914.0], [63.2, 2914.0], [63.3, 2916.0], [63.4, 2916.0], [63.5, 2917.0], [63.6, 2918.0], [63.7, 2919.0], [63.8, 2920.0], [63.9, 2920.0], [64.0, 2921.0], [64.1, 2921.0], [64.2, 2923.0], [64.3, 2925.0], [64.4, 2926.0], [64.5, 2927.0], [64.6, 2927.0], [64.7, 2928.0], [64.8, 2930.0], [64.9, 2931.0], [65.0, 2932.0], [65.1, 2934.0], [65.2, 2935.0], [65.3, 2936.0], [65.4, 2937.0], [65.5, 2937.0], [65.6, 2938.0], [65.7, 2940.0], [65.8, 2941.0], [65.9, 2943.0], [66.0, 2943.0], [66.1, 2945.0], [66.2, 2947.0], [66.3, 2947.0], [66.4, 2948.0], [66.5, 2949.0], [66.6, 2950.0], [66.7, 2950.0], [66.8, 2954.0], [66.9, 2954.0], [67.0, 2956.0], [67.1, 2957.0], [67.2, 2958.0], [67.3, 2959.0], [67.4, 2960.0], [67.5, 2961.0], [67.6, 2962.0], [67.7, 2963.0], [67.8, 2964.0], [67.9, 2965.0], [68.0, 2966.0], [68.1, 2968.0], [68.2, 2968.0], [68.3, 2970.0], [68.4, 2971.0], [68.5, 2972.0], [68.6, 2972.0], [68.7, 2974.0], [68.8, 2974.0], [68.9, 2975.0], [69.0, 2976.0], [69.1, 2977.0], [69.2, 2978.0], [69.3, 2981.0], [69.4, 2983.0], [69.5, 2985.0], [69.6, 2988.0], [69.7, 2989.0], [69.8, 2990.0], [69.9, 2992.0], [70.0, 2996.0], [70.1, 2997.0], [70.2, 3001.0], [70.3, 3004.0], [70.4, 3006.0], [70.5, 3011.0], [70.6, 3012.0], [70.7, 3015.0], [70.8, 3016.0], [70.9, 3021.0], [71.0, 3024.0], [71.1, 3025.0], [71.2, 3029.0], [71.3, 3034.0], [71.4, 3039.0], [71.5, 3041.0], [71.6, 3043.0], [71.7, 3046.0], [71.8, 3049.0], [71.9, 3050.0], [72.0, 3055.0], [72.1, 3058.0], [72.2, 3059.0], [72.3, 3065.0], [72.4, 3066.0], [72.5, 3066.0], [72.6, 3068.0], [72.7, 3069.0], [72.8, 3071.0], [72.9, 3073.0], [73.0, 3075.0], [73.1, 3077.0], [73.2, 3078.0], [73.3, 3079.0], [73.4, 3084.0], [73.5, 3086.0], [73.6, 3086.0], [73.7, 3088.0], [73.8, 3089.0], [73.9, 3090.0], [74.0, 3090.0], [74.1, 3092.0], [74.2, 3092.0], [74.3, 3094.0], [74.4, 3095.0], [74.5, 3096.0], [74.6, 3096.0], [74.7, 3098.0], [74.8, 3099.0], [74.9, 3100.0], [75.0, 3105.0], [75.1, 3108.0], [75.2, 3108.0], [75.3, 3110.0], [75.4, 3113.0], [75.5, 3115.0], [75.6, 3116.0], [75.7, 3118.0], [75.8, 3120.0], [75.9, 3121.0], [76.0, 3121.0], [76.1, 3126.0], [76.2, 3128.0], [76.3, 3130.0], [76.4, 3132.0], [76.5, 3133.0], [76.6, 3134.0], [76.7, 3139.0], [76.8, 3141.0], [76.9, 3142.0], [77.0, 3142.0], [77.1, 3145.0], [77.2, 3147.0], [77.3, 3149.0], [77.4, 3149.0], [77.5, 3150.0], [77.6, 3150.0], [77.7, 3151.0], [77.8, 3152.0], [77.9, 3152.0], [78.0, 3152.0], [78.1, 3153.0], [78.2, 3153.0], [78.3, 3154.0], [78.4, 3155.0], [78.5, 3157.0], [78.6, 3158.0], [78.7, 3159.0], [78.8, 3161.0], [78.9, 3162.0], [79.0, 3163.0], [79.1, 3164.0], [79.2, 3164.0], [79.3, 3165.0], [79.4, 3166.0], [79.5, 3168.0], [79.6, 3170.0], [79.7, 3172.0], [79.8, 3175.0], [79.9, 3177.0], [80.0, 3180.0], [80.1, 3182.0], [80.2, 3182.0], [80.3, 3186.0], [80.4, 3189.0], [80.5, 3193.0], [80.6, 3195.0], [80.7, 3199.0], [80.8, 3200.0], [80.9, 3202.0], [81.0, 3204.0], [81.1, 3206.0], [81.2, 3208.0], [81.3, 3212.0], [81.4, 3215.0], [81.5, 3215.0], [81.6, 3220.0], [81.7, 3220.0], [81.8, 3226.0], [81.9, 3230.0], [82.0, 3231.0], [82.1, 3235.0], [82.2, 3245.0], [82.3, 3249.0], [82.4, 3254.0], [82.5, 3260.0], [82.6, 3268.0], [82.7, 3275.0], [82.8, 3293.0], [82.9, 3294.0], [83.0, 3298.0], [83.1, 3301.0], [83.2, 3302.0], [83.3, 3302.0], [83.4, 3308.0], [83.5, 3309.0], [83.6, 3314.0], [83.7, 3317.0], [83.8, 3325.0], [83.9, 3327.0], [84.0, 3328.0], [84.1, 3331.0], [84.2, 3335.0], [84.3, 3338.0], [84.4, 3340.0], [84.5, 3342.0], [84.6, 3351.0], [84.7, 3358.0], [84.8, 3360.0], [84.9, 3373.0], [85.0, 3387.0], [85.1, 3400.0], [85.2, 3437.0], [85.3, 3441.0], [85.4, 3492.0], [85.5, 3556.0], [85.6, 3585.0], [85.7, 3589.0], [85.8, 3591.0], [85.9, 3597.0], [86.0, 3600.0], [86.1, 3605.0], [86.2, 3605.0], [86.3, 3605.0], [86.4, 3607.0], [86.5, 3609.0], [86.6, 3611.0], [86.7, 3613.0], [86.8, 3613.0], [86.9, 3618.0], [87.0, 3619.0], [87.1, 3620.0], [87.2, 3625.0], [87.3, 3626.0], [87.4, 3627.0], [87.5, 3628.0], [87.6, 3628.0], [87.7, 3631.0], [87.8, 3633.0], [87.9, 3634.0], [88.0, 3638.0], [88.1, 3642.0], [88.2, 3643.0], [88.3, 3645.0], [88.4, 3650.0], [88.5, 3655.0], [88.6, 3657.0], [88.7, 3659.0], [88.8, 3661.0], [88.9, 3662.0], [89.0, 3663.0], [89.1, 3665.0], [89.2, 3668.0], [89.3, 3669.0], [89.4, 3670.0], [89.5, 3673.0], [89.6, 3674.0], [89.7, 3676.0], [89.8, 3678.0], [89.9, 3680.0], [90.0, 3685.0], [90.1, 3686.0], [90.2, 3688.0], [90.3, 3693.0], [90.4, 3695.0], [90.5, 3698.0], [90.6, 3701.0], [90.7, 3707.0], [90.8, 3710.0], [90.9, 3713.0], [91.0, 3716.0], [91.1, 3717.0], [91.2, 3721.0], [91.3, 3723.0], [91.4, 3733.0], [91.5, 3734.0], [91.6, 3743.0], [91.7, 3747.0], [91.8, 3754.0], [91.9, 3763.0], [92.0, 3778.0], [92.1, 3797.0], [92.2, 3814.0], [92.3, 3826.0], [92.4, 3835.0], [92.5, 3895.0], [92.6, 3958.0], [92.7, 4005.0], [92.8, 4044.0], [92.9, 4052.0], [93.0, 4061.0], [93.1, 4085.0], [93.2, 4112.0], [93.3, 4123.0], [93.4, 4129.0], [93.5, 4143.0], [93.6, 4154.0], [93.7, 4162.0], [93.8, 4175.0], [93.9, 4182.0], [94.0, 4191.0], [94.1, 4207.0], [94.2, 4213.0], [94.3, 4234.0], [94.4, 4241.0], [94.5, 4245.0], [94.6, 4251.0], [94.7, 4275.0], [94.8, 4280.0], [94.9, 4290.0], [95.0, 4299.0], [95.1, 4306.0], [95.2, 4315.0], [95.3, 4328.0], [95.4, 4334.0], [95.5, 4339.0], [95.6, 4348.0], [95.7, 4358.0], [95.8, 4367.0], [95.9, 4375.0], [96.0, 4408.0], [96.1, 4448.0], [96.2, 4504.0], [96.3, 4523.0], [96.4, 4556.0], [96.5, 4639.0], [96.6, 4779.0], [96.7, 4842.0], [96.8, 4875.0], [96.9, 4893.0], [97.0, 4897.0], [97.1, 4906.0], [97.2, 4937.0], [97.3, 4941.0], [97.4, 4958.0], [97.5, 4968.0], [97.6, 5033.0], [97.7, 5034.0], [97.8, 5050.0], [97.9, 5055.0], [98.0, 5057.0], [98.1, 5067.0], [98.2, 5079.0], [98.3, 5085.0], [98.4, 5090.0], [98.5, 5140.0], [98.6, 5193.0], [98.7, 5205.0], [98.8, 5222.0], [98.9, 5471.0], [99.0, 5476.0], [99.1, 5701.0], [99.2, 5885.0], [99.3, 6680.0], [99.4, 6864.0], [99.5, 7085.0], [99.6, 7186.0], [99.7, 7467.0], [99.8, 8324.0], [99.9, 9953.0]], "isOverall": false, "label": "/car/manage/getByPlateNumber", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 300.0, "series": [{"data": [[0.0, 138.0], [600.0, 3.0], [700.0, 1.0], [800.0, 4.0], [900.0, 1.0], [1000.0, 3.0], [1100.0, 6.0], [1200.0, 1.0], [1300.0, 1.0], [1400.0, 6.0], [1500.0, 24.0], [1600.0, 6.0], [1700.0, 7.0], [1800.0, 4.0], [1900.0, 17.0], [2000.0, 57.0], [2100.0, 40.0], [2200.0, 106.0], [2300.0, 150.0], [2400.0, 191.0], [2500.0, 300.0], [2600.0, 91.0], [2700.0, 38.0], [2800.0, 108.0], [2900.0, 100.0], [3000.0, 110.0], [3100.0, 194.0], [3200.0, 66.0], [3300.0, 20.0], [3400.0, 6.0], [3500.0, 4.0], [3700.0, 10.0], [3600.0, 10.0], [3800.0, 6.0], [3900.0, 5.0], [4000.0, 4.0], [4100.0, 5.0], [4300.0, 5.0], [4200.0, 3.0], [4600.0, 5.0], [4500.0, 2.0], [4400.0, 3.0], [4700.0, 6.0], [4800.0, 3.0], [5000.0, 3.0], [4900.0, 2.0], [5100.0, 3.0], [5300.0, 4.0], [5200.0, 1.0], [5700.0, 4.0], [5800.0, 1.0], [5900.0, 2.0], [6000.0, 1.0], [6100.0, 1.0], [6300.0, 1.0], [6200.0, 2.0], [6400.0, 2.0], [7000.0, 1.0], [7100.0, 1.0], [7400.0, 4.0], [7300.0, 2.0], [7600.0, 3.0], [7700.0, 3.0], [8300.0, 4.0], [8500.0, 1.0], [8200.0, 1.0], [8600.0, 1.0], [8900.0, 3.0], [9000.0, 2.0], [9100.0, 1.0], [8800.0, 1.0], [9300.0, 1.0], [9400.0, 1.0], [9500.0, 1.0], [10000.0, 2.0], [10200.0, 3.0], [10100.0, 1.0], [10300.0, 4.0], [10500.0, 5.0], [10600.0, 2.0], [10700.0, 4.0], [10400.0, 1.0], [100.0, 21.0], [200.0, 15.0], [300.0, 8.0], [400.0, 1.0], [500.0, 5.0]], "isOverall": false, "label": "/car/manage/renew", "isController": false}, {"data": [[0.0, 42.0], [600.0, 12.0], [700.0, 7.0], [800.0, 11.0], [900.0, 9.0], [1000.0, 26.0], [1100.0, 36.0], [1200.0, 31.0], [1300.0, 30.0], [1400.0, 41.0], [1500.0, 41.0], [1600.0, 34.0], [1700.0, 44.0], [1800.0, 48.0], [1900.0, 62.0], [2000.0, 47.0], [2100.0, 47.0], [2200.0, 35.0], [2300.0, 123.0], [2400.0, 162.0], [2500.0, 123.0], [2600.0, 53.0], [2700.0, 50.0], [2800.0, 99.0], [2900.0, 168.0], [3000.0, 93.0], [3100.0, 119.0], [3200.0, 45.0], [3300.0, 41.0], [3400.0, 7.0], [3500.0, 10.0], [3600.0, 93.0], [3700.0, 31.0], [3800.0, 8.0], [3900.0, 3.0], [4000.0, 10.0], [4100.0, 18.0], [4200.0, 19.0], [4300.0, 19.0], [4600.0, 3.0], [4500.0, 5.0], [4400.0, 4.0], [4700.0, 2.0], [4800.0, 7.0], [5000.0, 19.0], [4900.0, 10.0], [5100.0, 4.0], [5200.0, 3.0], [5400.0, 4.0], [5500.0, 1.0], [5800.0, 2.0], [5700.0, 1.0], [6100.0, 1.0], [6600.0, 1.0], [6900.0, 1.0], [6700.0, 1.0], [6800.0, 1.0], [7100.0, 2.0], [7000.0, 1.0], [7400.0, 1.0], [7300.0, 1.0], [8200.0, 1.0], [8300.0, 1.0], [8600.0, 1.0], [9900.0, 1.0], [10200.0, 1.0], [100.0, 8.0], [200.0, 2.0], [300.0, 6.0], [400.0, 2.0], [500.0, 5.0]], "isOverall": false, "label": "/car/manage/getByPlateNumber", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 239.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3518.0, "series": [{"data": [[0.0, 243.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 239.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3518.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 74.38281250000001, "minX": 1.629796796E12, "maxY": 1000.0, "series": [{"data": [[1.6297968E12, 992.6618819776711], [1.629796798E12, 999.160621761658], [1.629796808E12, 74.38281250000001], [1.629796796E12, 1000.0], [1.629796806E12, 445.0818897637795], [1.629796804E12, 864.4646892655361], [1.629796802E12, 973.5618320610694]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629796808E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3.0, "minX": 2.0, "maxY": 10270.0, "series": [{"data": [[2.0, 16.5], [3.0, 14.0], [4.0, 2572.0], [5.0, 2804.0], [6.0, 8.0], [7.0, 8.0], [8.0, 3949.0], [9.0, 2245.0], [10.0, 3942.0], [11.0, 4227.0], [12.0, 8054.5], [13.0, 2219.0], [14.0, 21.0], [15.0, 6343.666666666666], [16.0, 4147.0], [17.0, 11.0], [18.0, 4512.5], [19.0, 4294.0], [20.0, 2192.0], [21.0, 5256.0], [22.0, 10.0], [23.0, 5009.0], [24.0, 5380.0], [25.0, 6498.0], [26.0, 7548.5], [27.0, 9655.666666666666], [28.0, 15.0], [29.0, 42.0], [30.0, 13.0], [31.0, 18.0], [33.0, 43.0], [32.0, 3443.0], [35.0, 2127.0], [34.0, 6777.0], [37.0, 14.0], [36.0, 12.0], [39.0, 8668.0], [38.0, 842.0], [41.0, 14.0], [40.0, 12.0], [43.0, 11.0], [42.0, 3868.0], [45.0, 5339.5], [44.0, 3864.0], [47.0, 3900.5], [46.0, 12.0], [49.0, 15.0], [48.0, 5791.666666666667], [51.0, 11.0], [50.0, 15.0], [53.0, 15.0], [52.0, 30.0], [55.0, 3602.0], [54.0, 6666.333333333334], [57.0, 37.0], [56.0, 6299.0], [59.0, 10.0], [58.0, 14.0], [61.0, 602.0], [60.0, 4002.0], [63.0, 4016.0], [62.0, 9.0], [67.0, 4602.0], [66.0, 34.0], [65.0, 7275.0], [64.0, 25.0], [71.0, 117.0], [70.0, 102.0], [69.0, 8317.0], [68.0, 4607.0], [75.0, 174.0], [74.0, 7819.5], [73.0, 1942.0], [72.0, 1920.0], [79.0, 94.0], [78.0, 66.0], [77.0, 377.0], [76.0, 10.0], [83.0, 135.0], [82.0, 109.0], [81.0, 230.0], [80.0, 4820.0], [87.0, 258.0], [86.0, 136.0], [85.0, 81.0], [84.0, 183.0], [91.0, 226.0], [90.0, 241.0], [89.0, 296.0], [88.0, 162.0], [95.0, 52.0], [94.0, 187.0], [93.0, 185.0], [92.0, 35.0], [99.0, 3809.0], [98.0, 3825.0], [97.0, 258.0], [96.0, 2958.0], [103.0, 3909.0], [102.0, 2301.0], [101.0, 4479.0], [100.0, 6950.0], [107.0, 5162.0], [106.0, 3710.0], [105.0, 6974.5], [104.0, 6171.5], [111.0, 5201.5], [110.0, 1719.0], [109.0, 533.0], [108.0, 279.0], [115.0, 359.0], [114.0, 357.0], [113.0, 315.0], [112.0, 5260.0], [119.0, 5601.5], [118.0, 536.0], [117.0, 369.0], [116.0, 3703.0], [123.0, 1137.0], [122.0, 1118.0], [121.0, 1420.0], [120.0, 1088.0], [127.0, 1384.0], [126.0, 1279.0], [125.0, 1601.0], [124.0, 1137.0], [135.0, 6483.5], [134.0, 1543.0], [133.0, 1542.0], [132.0, 1545.0], [131.0, 1542.0], [130.0, 1544.0], [129.0, 1495.0], [128.0, 1455.0], [143.0, 1516.0], [142.0, 5797.0], [141.0, 1534.5], [139.0, 1533.5], [137.0, 1520.5], [151.0, 5323.0], [150.0, 1692.0], [149.0, 5978.5], [148.0, 3334.0], [147.0, 1511.0], [146.0, 1509.0], [145.0, 1512.0], [144.0, 1513.0], [159.0, 1817.0], [158.0, 1664.0], [157.0, 1667.0], [156.0, 1760.0], [155.0, 1840.0], [154.0, 1823.0], [153.0, 2896.0], [152.0, 1672.0], [165.0, 2253.0], [164.0, 2060.0], [163.0, 1806.0], [162.0, 1783.0], [161.0, 1741.0], [160.0, 1730.0], [175.0, 2166.0], [174.0, 4609.5], [173.0, 2206.0], [172.0, 2143.0], [171.0, 2037.0], [170.0, 2038.5], [168.0, 2051.0], [183.0, 2270.0], [182.0, 2158.0], [181.0, 2261.0], [180.0, 2177.0], [179.0, 2180.0], [178.0, 2191.0], [177.0, 2192.0], [176.0, 2147.0], [191.0, 2234.0], [190.0, 2147.0], [189.0, 2148.0], [188.0, 2256.0], [187.0, 2153.0], [186.0, 2153.0], [185.0, 2157.0], [184.0, 2242.0], [199.0, 2164.0], [198.0, 2166.0], [197.0, 2168.0], [196.0, 2147.0], [195.0, 2207.0], [194.0, 2137.0], [193.0, 2230.0], [192.0, 2141.0], [207.0, 2168.0], [206.0, 2277.0], [205.0, 2174.0], [204.0, 2177.0], [203.0, 2180.0], [202.0, 2174.0], [201.0, 2169.0], [200.0, 2162.0], [214.0, 2187.0], [213.0, 2198.0], [212.0, 2212.0], [211.0, 2223.5], [209.0, 2560.0], [208.0, 2192.0], [223.0, 2341.0], [222.0, 2328.0], [221.0, 2339.0], [220.0, 2341.0], [219.0, 2278.0], [218.0, 2249.0], [217.0, 2196.5], [216.0, 2203.0], [231.0, 2347.0], [230.0, 2241.0], [229.0, 2228.0], [228.0, 2229.0], [227.0, 2217.0], [226.0, 2218.0], [225.0, 2349.0], [224.0, 2213.0], [239.0, 3830.0], [238.0, 2279.0], [237.0, 2273.0], [236.0, 2295.0], [235.0, 2270.0], [234.0, 2269.0], [233.0, 2256.0], [232.0, 2238.0], [247.0, 2325.0], [246.0, 2291.0], [245.0, 2289.0], [244.0, 2289.0], [242.0, 2294.5], [255.0, 2273.0], [254.0, 2371.0], [253.0, 2273.0], [252.0, 2509.0], [251.0, 2368.0], [250.0, 2367.0], [249.0, 2345.0], [248.0, 2330.0], [270.0, 2290.0], [271.0, 2307.0], [269.0, 2446.0], [268.0, 2308.0], [267.0, 2320.0], [266.0, 2311.0], [265.0, 2290.0], [264.0, 2369.0], [263.0, 2281.0], [257.0, 2273.0], [256.0, 2271.0], [259.0, 2271.0], [258.0, 2269.0], [262.0, 2278.0], [261.0, 2278.0], [260.0, 2274.0], [286.0, 2309.0], [287.0, 2312.0], [285.0, 2310.0], [284.0, 2275.0], [283.0, 2272.0], [282.0, 2293.0], [281.0, 2296.0], [280.0, 2307.0], [279.0, 2302.0], [273.0, 2375.0], [272.0, 2435.0], [275.0, 2302.0], [274.0, 2306.0], [278.0, 2309.0], [276.0, 3627.0], [302.0, 3567.0], [303.0, 2266.0], [301.0, 2276.0], [300.0, 2266.0], [299.0, 2259.0], [298.0, 2278.0], [297.0, 2271.0], [296.0, 2258.0], [295.0, 2271.0], [289.0, 2313.0], [288.0, 2386.0], [291.0, 2330.0], [290.0, 2308.0], [294.0, 2274.0], [293.0, 2258.0], [292.0, 2318.0], [318.0, 2240.0], [319.0, 2257.0], [317.0, 2266.0], [316.0, 2220.0], [315.0, 2244.0], [314.0, 2249.0], [313.0, 2236.0], [312.0, 2293.0], [311.0, 2278.0], [305.0, 2264.0], [304.0, 2280.0], [307.0, 2271.0], [306.0, 2275.0], [310.0, 2185.0], [309.0, 2268.0], [308.0, 2268.0], [334.0, 3170.0], [335.0, 2246.0], [333.0, 2260.0], [332.0, 2244.0], [331.0, 2254.0], [330.0, 2244.0], [329.0, 2255.0], [328.0, 2233.0], [327.0, 2247.0], [321.0, 2239.0], [320.0, 2241.0], [323.0, 2237.0], [322.0, 2244.0], [326.0, 2219.0], [324.0, 2235.0], [338.0, 2248.0], [350.0, 2321.0], [351.0, 2306.0], [348.0, 2334.0], [346.0, 2326.5], [344.0, 2354.0], [343.0, 2344.0], [342.0, 2277.0], [340.0, 2253.0], [337.0, 2325.0], [336.0, 2340.0], [366.0, 2342.0], [367.0, 2341.0], [365.0, 2357.5], [355.0, 2370.0], [354.0, 2374.0], [353.0, 2364.0], [352.0, 2345.0], [363.0, 2345.0], [362.0, 2351.0], [361.0, 2367.0], [360.0, 2318.0], [358.0, 2342.0], [357.0, 2349.0], [356.0, 2360.0], [382.0, 2355.0], [383.0, 2342.0], [381.0, 2350.5], [371.0, 2376.0], [370.0, 2338.0], [369.0, 2343.0], [368.0, 2363.0], [379.0, 2347.5], [377.0, 2346.0], [376.0, 2335.0], [375.0, 2324.0], [374.0, 2374.0], [373.0, 2322.0], [372.0, 2435.0], [398.0, 2323.0], [399.0, 2332.0], [397.0, 2339.0], [396.0, 2323.0], [395.0, 2324.0], [394.0, 2430.0], [393.0, 2331.0], [392.0, 2389.0], [391.0, 2340.0], [384.0, 2350.0], [387.0, 2341.5], [385.0, 5761.0], [390.0, 2363.0], [389.0, 3154.0], [414.0, 2476.0], [415.0, 2527.0], [413.0, 2476.0], [412.0, 2442.0], [411.0, 5672.0], [410.0, 2401.0], [409.0, 2403.0], [408.0, 2352.0], [407.0, 2479.0], [401.0, 2351.5], [403.0, 2499.0], [402.0, 2642.0], [406.0, 2354.0], [405.0, 2353.0], [404.0, 2494.0], [430.0, 2518.0], [431.0, 2530.0], [429.0, 2550.0], [428.0, 2519.0], [427.0, 4345.5], [426.0, 2523.0], [425.0, 2522.0], [424.0, 2520.0], [423.0, 2536.0], [417.0, 2538.0], [416.0, 2468.0], [419.0, 2463.0], [418.0, 2534.0], [422.0, 2477.0], [421.0, 2537.0], [420.0, 2542.0], [444.0, 2964.0], [446.0, 2532.0], [447.0, 2604.0], [445.0, 2606.0], [441.0, 2524.0], [440.0, 3138.0], [439.0, 2530.0], [433.0, 3116.0], [432.0, 2527.0], [438.0, 2536.0], [437.0, 3839.2], [462.0, 2565.0], [463.0, 2570.0], [461.0, 2567.5], [451.0, 2556.0], [450.0, 5748.5], [449.0, 2516.0], [448.0, 2581.0], [459.0, 2566.0], [458.0, 2568.0], [457.0, 2570.0], [455.0, 2567.0], [454.0, 2578.0], [453.0, 2570.0], [452.0, 2572.0], [478.0, 2468.0], [479.0, 2466.0], [477.0, 2562.0], [467.0, 2564.0], [466.0, 3034.0], [465.0, 2566.0], [475.0, 2551.0], [474.0, 5781.0], [473.0, 2598.0], [472.0, 2563.0], [471.0, 2557.5], [470.0, 2549.0], [469.0, 2566.0], [494.0, 2399.0], [495.0, 2503.0], [493.0, 2451.0], [492.0, 2411.0], [491.0, 2530.0], [490.0, 2519.0], [489.0, 2540.0], [488.0, 2552.0], [487.0, 2553.0], [481.0, 2543.0], [480.0, 2568.0], [483.0, 2560.0], [482.0, 2456.0], [486.0, 2556.0], [485.0, 2557.0], [484.0, 3125.0], [510.0, 2456.0], [511.0, 2480.0], [509.0, 2366.0], [508.0, 331.0], [507.0, 2358.0], [506.0, 2506.0], [505.0, 2355.0], [504.0, 2380.0], [503.0, 2382.0], [497.0, 2417.0], [496.0, 2396.0], [499.0, 3061.0], [498.0, 2403.0], [502.0, 2393.0], [501.0, 2403.0], [500.0, 2407.0], [537.0, 2346.0], [542.0, 2491.0], [543.0, 2502.0], [529.0, 2410.0], [528.0, 2400.0], [531.0, 2552.0], [530.0, 4156.0], [533.0, 2384.0], [532.0, 2542.0], [541.0, 2492.0], [539.0, 5515.5], [538.0, 2345.0], [536.0, 2357.0], [519.0, 2312.0], [518.0, 2332.0], [517.0, 2328.0], [516.0, 2299.0], [515.0, 2456.0], [514.0, 2322.0], [513.0, 2334.0], [512.0, 2346.0], [527.0, 2393.0], [526.0, 2409.0], [525.0, 2397.0], [524.0, 2397.0], [523.0, 2422.0], [522.0, 2399.0], [521.0, 2399.0], [520.0, 2434.0], [535.0, 2361.0], [534.0, 2378.0], [569.0, 2462.0], [574.0, 2455.0], [575.0, 3228.0], [561.0, 2446.0], [560.0, 2459.0], [563.0, 2481.0], [562.0, 2484.0], [565.0, 2404.0], [564.0, 2423.0], [573.0, 2460.0], [572.0, 2457.0], [571.0, 2459.0], [568.0, 2463.0], [551.0, 2481.0], [550.0, 2603.0], [549.0, 2475.0], [548.0, 2622.0], [547.0, 2477.0], [546.0, 2533.0], [545.0, 2497.0], [544.0, 2492.0], [559.0, 2607.0], [558.0, 2652.0], [557.0, 2496.0], [556.0, 2455.0], [555.0, 2627.0], [554.0, 2462.0], [553.0, 2472.0], [552.0, 2472.0], [567.0, 2469.0], [566.0, 2440.0], [604.0, 2552.0], [607.0, 2551.0], [593.0, 2577.0], [592.0, 2577.0], [595.0, 2574.0], [594.0, 2579.0], [597.0, 2569.0], [596.0, 2577.0], [606.0, 2550.0], [605.0, 2552.0], [603.0, 2572.0], [602.0, 2561.0], [601.0, 2581.0], [600.0, 2583.0], [591.0, 5468.0], [577.0, 2672.0], [576.0, 2627.0], [579.0, 2531.0], [578.0, 2535.0], [581.0, 2560.0], [580.0, 2568.0], [590.0, 2585.0], [589.0, 2585.0], [588.0, 676.0], [587.0, 2581.5], [586.0, 1308.0], [585.0, 4520.0], [599.0, 2565.0], [598.0, 2577.0], [636.0, 2508.0], [639.0, 2520.0], [625.0, 2530.0], [624.0, 2520.0], [627.0, 2535.0], [626.0, 2518.0], [629.0, 2533.0], [628.0, 2538.0], [638.0, 4112.0], [637.0, 2505.0], [635.0, 2525.0], [634.0, 2511.0], [633.0, 2507.0], [632.0, 2535.0], [623.0, 2522.0], [608.0, 2545.0], [611.0, 2542.0], [610.0, 2553.0], [613.0, 2535.0], [612.0, 5453.0], [615.0, 1904.0], [614.0, 2548.0], [622.0, 2534.0], [621.0, 2532.0], [620.0, 2526.0], [619.0, 2538.0], [618.0, 2544.0], [617.0, 2550.0], [616.0, 2542.0], [631.0, 2507.0], [630.0, 2532.0], [668.0, 2493.0], [671.0, 2496.0], [657.0, 2455.0], [656.0, 2463.0], [659.0, 2523.0], [658.0, 2454.0], [661.0, 2454.0], [660.0, 2550.0], [670.0, 2691.0], [669.0, 2499.0], [667.0, 2493.0], [666.0, 2488.0], [665.0, 2488.0], [664.0, 2456.0], [655.0, 2471.0], [642.0, 4471.666666666667], [640.0, 2523.0], [644.0, 2601.0], [643.0, 2517.0], [646.0, 2924.0], [645.0, 3008.0], [654.0, 2565.0], [653.0, 2470.0], [652.0, 2471.0], [651.0, 2472.0], [650.0, 2479.0], [649.0, 2477.6666666666665], [663.0, 2456.0], [662.0, 2460.0], [697.0, 2594.0], [702.0, 2591.0], [703.0, 2539.0], [689.0, 2655.0], [688.0, 2735.0], [691.0, 2645.0], [690.0, 2653.0], [693.0, 2621.0], [692.0, 2632.0], [701.0, 2565.0], [700.0, 2591.0], [699.0, 2577.5], [696.0, 2587.0], [679.0, 5043.0], [678.0, 2674.0], [677.0, 2566.0], [676.0, 2567.0], [675.0, 2569.0], [674.0, 2676.0], [673.0, 2687.0], [672.0, 2516.0], [687.0, 2682.0], [686.0, 2618.0], [685.0, 2656.5], [684.0, 2669.5], [683.0, 2674.0], [681.0, 2675.0], [695.0, 4963.0], [694.0, 2606.0], [732.0, 2530.0], [735.0, 2606.0], [720.0, 2542.0], [722.0, 2536.0], [721.0, 2806.0], [724.0, 2534.0], [723.0, 2544.0], [734.0, 2317.0], [733.0, 2601.0], [731.0, 2616.0], [730.0, 2536.0], [729.0, 2534.0], [728.0, 2338.0], [719.0, 2564.0], [705.0, 2536.0], [704.0, 2539.0], [707.0, 2427.0], [706.0, 2433.0], [709.0, 2579.0], [708.0, 2430.0], [711.0, 2488.0], [710.0, 2440.0], [718.0, 2548.0], [717.0, 2544.0], [716.0, 2557.0], [715.0, 2548.0], [714.0, 2569.0], [713.0, 2544.0], [712.0, 2545.0], [727.0, 2532.0], [726.0, 2535.5], [764.0, 2513.0], [767.0, 2508.0], [753.0, 2520.0], [752.0, 2521.0], [755.0, 2516.0], [754.0, 2515.0], [757.0, 2539.0], [756.0, 2516.0], [766.0, 2508.0], [765.0, 2510.0], [763.0, 2506.0], [762.0, 2509.0], [761.0, 2550.0], [760.0, 2512.0], [751.0, 2523.0], [736.0, 2526.0], [738.0, 2550.0], [737.0, 2525.0], [740.0, 2558.0], [739.0, 2564.0], [743.0, 2549.0], [742.0, 2547.5], [750.0, 2526.0], [749.0, 2228.0], [748.0, 2541.0], [747.0, 3782.5], [746.0, 5126.5], [745.0, 2543.0], [759.0, 2512.0], [758.0, 2513.0], [793.0, 2516.0], [798.0, 2514.0], [799.0, 2502.0], [784.0, 2512.0], [786.0, 2510.0], [785.0, 2512.0], [789.0, 3421.0], [787.0, 2518.0], [797.0, 2504.0], [796.0, 2508.0], [795.0, 3410.0], [792.0, 2512.0], [775.0, 2492.0], [774.0, 4746.0], [773.0, 2498.0], [772.0, 2499.0], [771.0, 2506.0], [770.0, 2502.0], [769.0, 2505.5], [783.0, 2507.0], [782.0, 4732.0], [781.0, 3624.5], [780.0, 15.0], [779.0, 2515.0], [778.0, 2508.0], [777.0, 2498.0], [776.0, 2506.0], [791.0, 2513.0], [790.0, 2514.0], [828.0, 2459.0], [831.0, 2402.0], [817.0, 2457.0], [816.0, 2457.0], [819.0, 2451.0], [818.0, 2451.0], [821.0, 2443.0], [820.0, 4138.5], [830.0, 2431.0], [829.0, 2445.0], [827.0, 2465.0], [826.0, 2433.0], [825.0, 2435.0], [824.0, 2438.0], [815.0, 2459.0], [800.0, 2492.0], [803.0, 2490.0], [802.0, 1498.0], [805.0, 2483.0], [804.0, 2486.0], [807.0, 2476.0], [806.0, 2484.0], [814.0, 2463.0], [813.0, 2464.0], [811.0, 2468.0], [810.0, 2471.0], [809.0, 2468.0], [808.0, 2476.0], [823.0, 2440.0], [822.0, 2439.0], [857.0, 2391.0], [862.0, 3448.0], [863.0, 2411.0], [849.0, 2455.0], [848.0, 4023.0], [851.0, 2436.0], [850.0, 2452.0], [853.0, 2420.0], [852.0, 2433.0], [861.0, 2408.0], [860.0, 3073.0], [858.0, 2398.0], [856.0, 2398.0], [839.0, 21.0], [838.0, 2421.0], [837.0, 220.0], [836.0, 2380.0], [835.0, 2381.0], [834.0, 2376.0], [833.0, 2388.0], [832.0, 4943.5], [847.0, 2471.0], [846.0, 4712.0], [845.0, 2478.0], [844.0, 2478.0], [843.0, 2551.0], [842.0, 9.0], [841.0, 10.0], [840.0, 2389.0], [855.0, 2414.0], [854.0, 2421.0], [888.0, 2536.0], [894.0, 2435.0], [895.0, 2439.0], [881.0, 2601.0], [880.0, 2577.5], [883.0, 2495.0], [882.0, 2604.0], [893.0, 2449.0], [892.0, 2502.5], [890.0, 2540.5], [878.0, 2566.0], [865.0, 2401.0], [864.0, 24.0], [867.0, 2406.0], [866.0, 2402.0], [869.0, 2527.0], [868.0, 2404.0], [871.0, 2522.0], [870.0, 2525.0], [877.0, 2586.0], [876.0, 2527.0], [875.0, 2949.0], [873.0, 2525.0], [887.0, 2573.0], [886.0, 2588.0], [885.0, 2562.0], [884.0, 2585.0], [924.0, 33.0], [927.0, 3039.5], [913.0, 2356.0], [912.0, 2385.0], [915.0, 2394.0], [914.0, 2390.0], [917.0, 2382.0], [916.0, 2385.0], [926.0, 2344.0], [925.0, 2351.0], [923.0, 2344.0], [922.0, 2321.0], [921.0, 2374.0], [920.0, 2375.0], [911.0, 2385.0], [897.0, 2438.0], [896.0, 2427.0], [899.0, 2427.0], [898.0, 2429.0], [901.0, 2426.0], [900.0, 2431.0], [903.0, 2421.0], [902.0, 2425.0], [910.0, 2369.0], [909.0, 2408.0], [908.0, 2384.0], [907.0, 2402.0], [906.0, 2417.0], [905.0, 2421.0], [904.0, 2435.0], [919.0, 2377.0], [918.0, 138.0], [956.0, 2659.5], [959.0, 2723.0], [945.0, 3510.45], [944.0, 3496.1000000000004], [947.0, 2823.0], [946.0, 2959.0], [949.0, 2776.0], [948.0, 2791.0], [958.0, 2846.0], [957.0, 2715.5], [955.0, 3517.0], [954.0, 25.0], [953.0, 3019.0], [952.0, 4545.6], [943.0, 3788.5], [929.0, 2373.0], [928.0, 2373.0], [931.0, 4697.0], [930.0, 4431.5], [933.0, 2505.0], [932.0, 2494.0], [935.0, 2513.0], [934.0, 59.0], [942.0, 2606.0], [941.0, 4963.5], [940.0, 2611.0], [939.0, 2556.0], [938.0, 2562.0], [936.0, 1852.0], [951.0, 3844.5], [950.0, 2877.0], [988.0, 3181.0], [991.0, 2925.777777777778], [977.0, 3123.0], [976.0, 1651.0], [979.0, 3180.0], [978.0, 3107.0], [981.0, 3207.2000000000003], [980.0, 3202.0472440944877], [990.0, 3037.321917808219], [989.0, 3158.030303030303], [987.0, 3267.0], [986.0, 3113.0], [985.0, 3123.0], [984.0, 3160.0], [975.0, 3217.0], [961.0, 299.0], [960.0, 3349.0], [963.0, 3213.0], [962.0, 2744.0], [965.0, 2595.0], [964.0, 3572.6666666666665], [967.0, 2817.0], [966.0, 2776.0], [974.0, 3056.0], [973.0, 62.0], [972.0, 3634.166666666667], [971.0, 4575.333333333333], [970.0, 2940.0], [969.0, 4220.666666666667], [968.0, 2799.0], [983.0, 3216.0], [982.0, 3024.0], [1000.0, 83.0], [999.0, 1534.636363636364], [998.0, 2095.7083333333335], [997.0, 2360.227272727273], [996.0, 2507.999999999999], [995.0, 2532.4117647058824], [994.0, 2694.7441860465115], [993.0, 2330.8333333333335], [992.0, 2712.404761904762]], "isOverall": false, "label": "/car/manage/renew", "isController": false}, {"data": [[723.5285000000006, 2648.3689999999924]], "isOverall": false, "label": "/car/manage/renew-Aggregated", "isController": false}, {"data": [[3.0, 57.5], [4.0, 8640.0], [9.0, 18.0], [10.0, 4.0], [17.0, 3.0], [20.0, 4.0], [23.0, 3.0], [25.0, 8.0], [26.0, 10.0], [27.0, 7338.0], [33.0, 4.0], [35.0, 4504.0], [34.0, 8324.0], [39.0, 7.333333333333333], [40.0, 7137.0], [43.0, 4.0], [45.0, 6864.0], [47.0, 6.0], [46.0, 6.0], [48.0, 3389.0], [53.0, 5.0], [54.0, 265.5], [56.0, 8206.0], [58.0, 5883.0], [61.0, 979.0], [67.0, 15.0], [64.0, 4.0], [69.0, 3.0], [72.0, 9.0], [78.0, 7.0], [90.0, 104.0], [89.0, 116.0], [88.0, 126.0], [95.0, 3958.0], [94.0, 100.0], [93.0, 88.0], [92.0, 120.0], [99.0, 240.0], [98.0, 30.0], [97.0, 132.0], [102.0, 7467.0], [106.0, 10270.0], [108.0, 5701.0], [115.0, 336.0], [119.0, 998.0], [123.0, 1098.0], [122.0, 1082.0], [125.0, 1171.0], [124.0, 1124.0], [135.0, 9953.0], [129.0, 1423.0], [128.0, 1364.0], [149.0, 1508.5], [157.0, 1646.0], [155.0, 1562.0], [165.0, 1823.5], [171.0, 7085.0], [181.0, 2146.0], [178.0, 2036.0], [194.0, 4779.0], [221.0, 2177.0], [235.0, 2240.0], [358.0, 6904.0], [425.0, 2502.0], [439.0, 6680.0], [454.0, 2590.0], [451.0, 2507.0], [504.0, 5885.0], [543.0, 2501.0], [529.0, 2383.0], [528.0, 2383.0], [571.0, 2460.0], [561.0, 2437.0], [592.0, 5476.0], [587.0, 6146.0], [581.0, 2537.7272727272725], [580.0, 2517.0], [579.0, 2509.75], [577.0, 2478.0909090909095], [663.0, 2446.0], [662.0, 2443.0], [660.0, 2447.0], [643.0, 4477.666666666667], [642.0, 3556.0], [679.0, 2667.6666666666665], [677.0, 2522.0], [676.0, 2504.0], [710.0, 2433.5], [765.0, 2502.0], [747.0, 4639.0], [740.0, 2537.6666666666665], [739.0, 2537.5], [738.0, 2515.0], [737.0, 2515.0], [795.0, 4275.0], [791.0, 4290.0], [789.0, 4307.0], [787.0, 4333.75], [785.0, 4352.75], [784.0, 4452.0], [777.0, 2485.0], [773.0, 2493.0], [829.0, 2415.0], [830.0, 2400.6666666666665], [828.0, 2735.0], [825.0, 2437.0], [821.0, 4052.5], [820.0, 3248.5], [819.0, 4081.5], [818.0, 4094.0], [814.0, 4122.0], [803.0, 4213.0], [800.0, 4239.0], [807.0, 4199.0], [806.0, 4207.0], [811.0, 4148.5], [810.0, 4155.0], [808.0, 4179.6], [862.0, 2389.0], [858.0, 2914.0], [839.0, 2384.0], [838.0, 2394.4285714285716], [837.0, 2454.681818181818], [834.0, 2379.5], [832.0, 4210.0], [855.0, 2390.5], [854.0, 2409.0], [853.0, 2400.8], [852.0, 2421.0], [850.0, 2439.0], [847.0, 2458.5], [846.0, 2459.5], [845.0, 2464.0], [844.0, 2995.6363636363635], [843.0, 2447.75], [842.0, 2498.4545454545455], [841.0, 2412.0], [840.0, 2454.3902439024396], [893.0, 3126.0], [890.0, 2976.0], [871.0, 3337.3333333333335], [869.0, 2401.0], [868.0, 2563.5], [867.0, 2403.6666666666665], [866.0, 2889.0], [865.0, 3400.0], [864.0, 2396.0], [887.0, 2567.0], [886.0, 2878.0], [881.0, 3160.0], [880.0, 3277.0], [878.0, 2870.0], [875.0, 3313.5], [873.0, 2509.0], [920.0, 2963.6], [925.0, 2532.0], [923.0, 2539.0], [921.0, 2952.0], [918.0, 2990.0], [911.0, 3011.0], [909.0, 3038.0], [901.0, 3074.0], [898.0, 3090.0], [955.0, 2850.0909090909095], [948.0, 2839.3333333333335], [956.0, 2642.0], [945.0, 3023.6999999999994], [944.0, 2961.214285714286], [953.0, 2950.6666666666665], [952.0, 2924.0000000000005], [943.0, 2854.846153846154], [928.0, 2437.5], [930.0, 2420.1333333333337], [929.0, 2424.357142857143], [932.0, 2471.0], [931.0, 2469.357142857143], [934.0, 2489.25], [933.0, 2483.2], [942.0, 2643.3333333333335], [941.0, 2645.764705882353], [940.0, 2582.5], [939.0, 2563.0], [938.0, 2674.0], [936.0, 2542.9032258064512], [951.0, 2905.625], [950.0, 2874.3333333333335], [949.0, 2848.4], [947.0, 2809.741935483871], [946.0, 2936.125], [988.0, 3156.5], [991.0, 2081.0], [976.0, 2711.833333333333], [978.0, 3116.2999999999997], [977.0, 3091.2], [980.0, 3146.4814814814818], [979.0, 3157.75], [990.0, 3042.818181818182], [989.0, 3192.0303030303035], [987.0, 3147.8571428571427], [986.0, 3166.0], [985.0, 3115.0], [984.0, 3119.75], [975.0, 3062.9166666666665], [961.0, 2830.3333333333335], [960.0, 2644.6666666666665], [964.0, 2773.0], [962.0, 2659.3333333333335], [967.0, 2784.714285714286], [966.0, 2826.0], [974.0, 3045.6666666666665], [973.0, 3037.0], [972.0, 3087.142857142857], [971.0, 2987.666666666667], [970.0, 2937.833333333333], [969.0, 2845.2], [968.0, 2802.375], [982.0, 3183.0], [981.0, 2882.071428571428], [1000.0, 1765.9319286871944], [999.0, 2874.893258426966], [998.0, 3638.7712418300666], [997.0, 2160.666666666667], [996.0, 2104.4], [995.0, 2347.5], [994.0, 1018.2], [993.0, 4133.185185185185], [992.0, 1532.3999999999999]], "isOverall": false, "label": "/car/manage/getByPlateNumber", "isController": false}, {"data": [[922.5435, 2600.941500000004]], "isOverall": false, "label": "/car/manage/getByPlateNumber-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 33857.0, "minX": 1.629796796E12, "maxY": 218072.0, "series": [{"data": [[1.6297968E12, 93074.0], [1.629796798E12, 218072.0], [1.629796808E12, 40224.0], [1.629796796E12, 107298.0], [1.629796806E12, 79330.0], [1.629796804E12, 170328.0], [1.629796802E12, 147674.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.6297968E12, 82947.5], [1.629796798E12, 101668.0], [1.629796808E12, 33857.0], [1.629796796E12, 45656.5], [1.629796806E12, 84072.5], [1.629796804E12, 93372.0], [1.629796802E12, 86426.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629796808E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 74.3846153846154, "minX": 1.629796796E12, "maxY": 3424.538461538462, "series": [{"data": [[1.6297968E12, 2708.1207243460767], [1.629796798E12, 1472.1066666666663], [1.629796808E12, 3110.720207253887], [1.629796796E12, 74.3846153846154], [1.629796806E12, 2565.150877192985], [1.629796804E12, 2685.462962962964], [1.629796802E12, 3198.8843537414973]], "isOverall": false, "label": "/car/manage/renew", "isController": false}, {"data": [[1.6297968E12, 3424.538461538462], [1.629796798E12, 2695.0659163987134], [1.629796808E12, 1874.714285714286], [1.629796796E12, 1451.3831775700928], [1.629796806E12, 2939.0769230769224], [1.629796804E12, 2798.9200913241984], [1.629796802E12, 2990.0110803324105]], "isOverall": false, "label": "/car/manage/getByPlateNumber", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629796808E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 71.6923076923077, "minX": 1.629796796E12, "maxY": 3419.507692307693, "series": [{"data": [[1.6297968E12, 2707.859154929576], [1.629796798E12, 1471.8666666666668], [1.629796808E12, 3110.658031088083], [1.629796796E12, 71.6923076923077], [1.629796806E12, 2565.0912280701787], [1.629796804E12, 2685.4148148148147], [1.629796802E12, 3198.605442176872]], "isOverall": false, "label": "/car/manage/renew", "isController": false}, {"data": [[1.6297968E12, 3419.507692307693], [1.629796798E12, 2694.181672025726], [1.629796808E12, 1874.5714285714287], [1.629796796E12, 1450.4797507788169], [1.629796806E12, 2938.969230769231], [1.629796804E12, 2798.4086757990863], [1.629796802E12, 2989.9612188365645]], "isOverall": false, "label": "/car/manage/getByPlateNumber", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629796808E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.629796796E12, "maxY": 614.7877813504828, "series": [{"data": [[1.6297968E12, 0.0], [1.629796798E12, 0.0], [1.629796808E12, 0.0], [1.629796796E12, 0.0], [1.629796806E12, 0.0], [1.629796804E12, 0.0], [1.629796802E12, 0.0]], "isOverall": false, "label": "/car/manage/renew", "isController": false}, {"data": [[1.6297968E12, 296.2692307692306], [1.629796798E12, 614.7877813504828], [1.629796808E12, 0.0], [1.629796796E12, 358.8660436137069], [1.629796806E12, 0.0], [1.629796804E12, 0.0], [1.629796802E12, 0.0]], "isOverall": false, "label": "/car/manage/getByPlateNumber", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629796808E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 2.0, "minX": 1.629796796E12, "maxY": 10783.0, "series": [{"data": [[1.6297968E12, 5222.0], [1.629796798E12, 4188.0], [1.629796808E12, 10783.0], [1.629796796E12, 2215.0], [1.629796806E12, 9176.0], [1.629796804E12, 7708.0], [1.629796802E12, 5723.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.6297968E12, 4280.2], [1.629796798E12, 3661.7], [1.629796808E12, 9466.100000000002], [1.629796796E12, 2001.4], [1.629796806E12, 2629.0], [1.629796804E12, 3731.6000000000004], [1.629796802E12, 3251.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.6297968E12, 5172.4000000000015], [1.629796798E12, 3928.4899999999984], [1.629796808E12, 10751.43], [1.629796796E12, 2204.7599999999998], [1.629796806E12, 8376.64], [1.629796804E12, 6087.3799999999965], [1.629796802E12, 5246.039999999992]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.6297968E12, 4940.2], [1.629796798E12, 3713.0], [1.629796808E12, 10412.049999999997], [1.629796796E12, 2101.7999999999997], [1.629796806E12, 3514.3999999999965], [1.629796804E12, 4301.75], [1.629796802E12, 3536.599999999993]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.6297968E12, 2.0], [1.629796798E12, 8.0], [1.629796808E12, 3.0], [1.629796796E12, 9.0], [1.629796806E12, 27.0], [1.629796804E12, 9.0], [1.629796802E12, 3.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.6297968E12, 2906.0], [1.629796798E12, 2446.5], [1.629796808E12, 1475.0], [1.629796796E12, 1368.0], [1.629796806E12, 2456.0], [1.629796804E12, 2512.0], [1.629796802E12, 3095.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629796808E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 1112.0, "minX": 16.0, "maxY": 3328.0, "series": [{"data": [[16.0, 1112.0], [256.0, 1475.0], [296.0, 3164.0], [298.0, 2522.5], [305.0, 3028.0], [331.0, 1384.0], [325.0, 3328.0], [322.0, 2733.0], [338.0, 2468.0], [337.0, 2313.0], [359.0, 2963.0], [370.0, 2561.5], [447.0, 2259.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 447.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 1109.5, "minX": 16.0, "maxY": 3321.0, "series": [{"data": [[16.0, 1109.5], [256.0, 1474.5], [296.0, 3164.0], [298.0, 2522.5], [305.0, 3026.0], [331.0, 1383.0], [325.0, 3321.0], [322.0, 2732.0], [338.0, 2467.5], [337.0, 2313.0], [359.0, 2963.0], [370.0, 2560.5], [447.0, 2259.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 447.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 40.0, "minX": 1.629796794E12, "maxY": 433.0, "series": [{"data": [[1.6297968E12, 309.0], [1.629796798E12, 385.0], [1.629796808E12, 50.0], [1.629796796E12, 433.0], [1.629796806E12, 40.0], [1.629796794E12, 240.5], [1.629796804E12, 237.5], [1.629796802E12, 305.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629796808E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 128.0, "minX": 1.629796796E12, "maxY": 386.0, "series": [{"data": [[1.6297968E12, 313.5], [1.629796798E12, 386.0], [1.629796808E12, 128.0], [1.629796796E12, 173.5], [1.629796806E12, 317.5], [1.629796804E12, 354.0], [1.629796802E12, 327.5]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629796808E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 13.0, "minX": 1.629796796E12, "maxY": 311.0, "series": [{"data": [[1.6297968E12, 65.0], [1.629796798E12, 311.0], [1.629796808E12, 31.5], [1.629796796E12, 160.5], [1.629796806E12, 32.5], [1.629796804E12, 219.0], [1.629796802E12, 180.5]], "isOverall": false, "label": "/car/manage/getByPlateNumber-success", "isController": false}, {"data": [[1.6297968E12, 248.5], [1.629796798E12, 75.0], [1.629796808E12, 96.5], [1.629796796E12, 13.0], [1.629796806E12, 285.0], [1.629796804E12, 135.0], [1.629796802E12, 147.0]], "isOverall": false, "label": "/car/manage/renew-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629796808E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 128.0, "minX": 1.629796796E12, "maxY": 386.0, "series": [{"data": [[1.6297968E12, 313.5], [1.629796798E12, 386.0], [1.629796808E12, 128.0], [1.629796796E12, 173.5], [1.629796806E12, 317.5], [1.629796804E12, 354.0], [1.629796802E12, 327.5]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629796808E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

