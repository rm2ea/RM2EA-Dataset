/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 44.0, "minX": 0.0, "maxY": 7150.0, "series": [{"data": [[0.0, 61.0], [0.1, 69.0], [0.2, 77.0], [0.3, 100.0], [0.4, 623.0], [0.5, 977.0], [0.6, 994.0], [0.7, 999.0], [0.8, 1009.0], [0.9, 1010.0], [1.0, 1019.0], [1.1, 1029.0], [1.2, 1035.0], [1.3, 1040.0], [1.4, 1054.0], [1.5, 1072.0], [1.6, 1088.0], [1.7, 1098.0], [1.8, 1099.0], [1.9, 1106.0], [2.0, 1114.0], [2.1, 1128.0], [2.2, 1154.0], [2.3, 1163.0], [2.4, 1168.0], [2.5, 1177.0], [2.6, 1191.0], [2.7, 1211.0], [2.8, 1228.0], [2.9, 1230.0], [3.0, 1232.0], [3.1, 1246.0], [3.2, 1250.0], [3.3, 1274.0], [3.4, 1290.0], [3.5, 1299.0], [3.6, 1316.0], [3.7, 1333.0], [3.8, 1333.0], [3.9, 1343.0], [4.0, 1348.0], [4.1, 1351.0], [4.2, 1362.0], [4.3, 1382.0], [4.4, 1390.0], [4.5, 1392.0], [4.6, 1400.0], [4.7, 1403.0], [4.8, 1416.0], [4.9, 1418.0], [5.0, 1427.0], [5.1, 1432.0], [5.2, 1446.0], [5.3, 1454.0], [5.4, 1474.0], [5.5, 1483.0], [5.6, 1507.0], [5.7, 1516.0], [5.8, 1546.0], [5.9, 1568.0], [6.0, 1580.0], [6.1, 1586.0], [6.2, 1602.0], [6.3, 1607.0], [6.4, 1618.0], [6.5, 1628.0], [6.6, 1635.0], [6.7, 1658.0], [6.8, 1662.0], [6.9, 1667.0], [7.0, 1686.0], [7.1, 1689.0], [7.2, 1706.0], [7.3, 1711.0], [7.4, 1725.0], [7.5, 1727.0], [7.6, 1765.0], [7.7, 1825.0], [7.8, 1865.0], [7.9, 1871.0], [8.0, 1878.0], [8.1, 1881.0], [8.2, 1889.0], [8.3, 1896.0], [8.4, 1916.0], [8.5, 1923.0], [8.6, 1924.0], [8.7, 1927.0], [8.8, 1930.0], [8.9, 1935.0], [9.0, 1947.0], [9.1, 1948.0], [9.2, 1953.0], [9.3, 1962.0], [9.4, 1968.0], [9.5, 1978.0], [9.6, 1982.0], [9.7, 1994.0], [9.8, 2042.0], [9.9, 2050.0], [10.0, 2068.0], [10.1, 2072.0], [10.2, 2076.0], [10.3, 2083.0], [10.4, 2085.0], [10.5, 2092.0], [10.6, 2097.0], [10.7, 2099.0], [10.8, 2103.0], [10.9, 2115.0], [11.0, 2125.0], [11.1, 2139.0], [11.2, 2153.0], [11.3, 2178.0], [11.4, 2203.0], [11.5, 2212.0], [11.6, 2222.0], [11.7, 2228.0], [11.8, 2230.0], [11.9, 2234.0], [12.0, 2235.0], [12.1, 2247.0], [12.2, 2256.0], [12.3, 2292.0], [12.4, 2302.0], [12.5, 2305.0], [12.6, 2322.0], [12.7, 2335.0], [12.8, 2337.0], [12.9, 2343.0], [13.0, 2352.0], [13.1, 2386.0], [13.2, 2400.0], [13.3, 2418.0], [13.4, 2427.0], [13.5, 2430.0], [13.6, 2442.0], [13.7, 2447.0], [13.8, 2455.0], [13.9, 2460.0], [14.0, 2463.0], [14.1, 2467.0], [14.2, 2475.0], [14.3, 2479.0], [14.4, 2482.0], [14.5, 2494.0], [14.6, 2498.0], [14.7, 2508.0], [14.8, 2518.0], [14.9, 2525.0], [15.0, 2530.0], [15.1, 2541.0], [15.2, 2550.0], [15.3, 2557.0], [15.4, 2589.0], [15.5, 2601.0], [15.6, 2612.0], [15.7, 2646.0], [15.8, 2655.0], [15.9, 2745.0], [16.0, 2792.0], [16.1, 2799.0], [16.2, 2866.0], [16.3, 2884.0], [16.4, 2892.0], [16.5, 2927.0], [16.6, 3170.0], [16.7, 3203.0], [16.8, 3224.0], [16.9, 3241.0], [17.0, 3266.0], [17.1, 3274.0], [17.2, 3278.0], [17.3, 3294.0], [17.4, 3299.0], [17.5, 3311.0], [17.6, 3325.0], [17.7, 3352.0], [17.8, 3379.0], [17.9, 3389.0], [18.0, 3406.0], [18.1, 3413.0], [18.2, 3440.0], [18.3, 3461.0], [18.4, 3481.0], [18.5, 3534.0], [18.6, 3538.0], [18.7, 3539.0], [18.8, 3568.0], [18.9, 3589.0], [19.0, 3594.0], [19.1, 3614.0], [19.2, 3631.0], [19.3, 3649.0], [19.4, 3669.0], [19.5, 3678.0], [19.6, 3681.0], [19.7, 3685.0], [19.8, 3718.0], [19.9, 3736.0], [20.0, 3741.0], [20.1, 3746.0], [20.2, 3754.0], [20.3, 3764.0], [20.4, 3791.0], [20.5, 3811.0], [20.6, 3815.0], [20.7, 3822.0], [20.8, 3833.0], [20.9, 3837.0], [21.0, 3848.0], [21.1, 3876.0], [21.2, 3892.0], [21.3, 3905.0], [21.4, 3916.0], [21.5, 3922.0], [21.6, 3927.0], [21.7, 3946.0], [21.8, 3963.0], [21.9, 3975.0], [22.0, 3988.0], [22.1, 4013.0], [22.2, 4027.0], [22.3, 4046.0], [22.4, 4062.0], [22.5, 4081.0], [22.6, 4087.0], [22.7, 4128.0], [22.8, 4144.0], [22.9, 4158.0], [23.0, 4184.0], [23.1, 4185.0], [23.2, 4188.0], [23.3, 4196.0], [23.4, 4197.0], [23.5, 4199.0], [23.6, 4202.0], [23.7, 4204.0], [23.8, 4209.0], [23.9, 4213.0], [24.0, 4228.0], [24.1, 4235.0], [24.2, 4258.0], [24.3, 4262.0], [24.4, 4269.0], [24.5, 4277.0], [24.6, 4286.0], [24.7, 4290.0], [24.8, 4291.0], [24.9, 4315.0], [25.0, 4320.0], [25.1, 4324.0], [25.2, 4330.0], [25.3, 4333.0], [25.4, 4337.0], [25.5, 4341.0], [25.6, 4347.0], [25.7, 4360.0], [25.8, 4367.0], [25.9, 4371.0], [26.0, 4377.0], [26.1, 4382.0], [26.2, 4388.0], [26.3, 4390.0], [26.4, 4392.0], [26.5, 4393.0], [26.6, 4395.0], [26.7, 4397.0], [26.8, 4400.0], [26.9, 4402.0], [27.0, 4414.0], [27.1, 4422.0], [27.2, 4432.0], [27.3, 4434.0], [27.4, 4446.0], [27.5, 4449.0], [27.6, 4450.0], [27.7, 4453.0], [27.8, 4456.0], [27.9, 4458.0], [28.0, 4459.0], [28.1, 4461.0], [28.2, 4468.0], [28.3, 4472.0], [28.4, 4477.0], [28.5, 4490.0], [28.6, 4506.0], [28.7, 4512.0], [28.8, 4521.0], [28.9, 4521.0], [29.0, 4536.0], [29.1, 4548.0], [29.2, 4554.0], [29.3, 4558.0], [29.4, 4572.0], [29.5, 4574.0], [29.6, 4575.0], [29.7, 4583.0], [29.8, 4584.0], [29.9, 4588.0], [30.0, 4593.0], [30.1, 4604.0], [30.2, 4606.0], [30.3, 4621.0], [30.4, 4624.0], [30.5, 4634.0], [30.6, 4639.0], [30.7, 4647.0], [30.8, 4652.0], [30.9, 4662.0], [31.0, 4670.0], [31.1, 4671.0], [31.2, 4679.0], [31.3, 4691.0], [31.4, 4699.0], [31.5, 4701.0], [31.6, 4717.0], [31.7, 4720.0], [31.8, 4731.0], [31.9, 4739.0], [32.0, 4742.0], [32.1, 4753.0], [32.2, 4757.0], [32.3, 4766.0], [32.4, 4770.0], [32.5, 4774.0], [32.6, 4775.0], [32.7, 4781.0], [32.8, 4784.0], [32.9, 4788.0], [33.0, 4791.0], [33.1, 4792.0], [33.2, 4797.0], [33.3, 4800.0], [33.4, 4802.0], [33.5, 4808.0], [33.6, 4814.0], [33.7, 4815.0], [33.8, 4820.0], [33.9, 4827.0], [34.0, 4834.0], [34.1, 4843.0], [34.2, 4846.0], [34.3, 4851.0], [34.4, 4862.0], [34.5, 4864.0], [34.6, 4864.0], [34.7, 4869.0], [34.8, 4876.0], [34.9, 4880.0], [35.0, 4887.0], [35.1, 4894.0], [35.2, 4896.0], [35.3, 4899.0], [35.4, 4904.0], [35.5, 4907.0], [35.6, 4909.0], [35.7, 4916.0], [35.8, 4928.0], [35.9, 4930.0], [36.0, 4932.0], [36.1, 4934.0], [36.2, 4936.0], [36.3, 4941.0], [36.4, 4944.0], [36.5, 4957.0], [36.6, 4962.0], [36.7, 4964.0], [36.8, 4975.0], [36.9, 4977.0], [37.0, 4985.0], [37.1, 4990.0], [37.2, 4996.0], [37.3, 4997.0], [37.4, 5001.0], [37.5, 5004.0], [37.6, 5005.0], [37.7, 5011.0], [37.8, 5015.0], [37.9, 5018.0], [38.0, 5028.0], [38.1, 5029.0], [38.2, 5033.0], [38.3, 5037.0], [38.4, 5038.0], [38.5, 5041.0], [38.6, 5049.0], [38.7, 5056.0], [38.8, 5062.0], [38.9, 5065.0], [39.0, 5070.0], [39.1, 5075.0], [39.2, 5075.0], [39.3, 5078.0], [39.4, 5086.0], [39.5, 5089.0], [39.6, 5092.0], [39.7, 5094.0], [39.8, 5102.0], [39.9, 5105.0], [40.0, 5109.0], [40.1, 5111.0], [40.2, 5115.0], [40.3, 5121.0], [40.4, 5125.0], [40.5, 5130.0], [40.6, 5133.0], [40.7, 5136.0], [40.8, 5136.0], [40.9, 5137.0], [41.0, 5140.0], [41.1, 5143.0], [41.2, 5148.0], [41.3, 5151.0], [41.4, 5156.0], [41.5, 5158.0], [41.6, 5160.0], [41.7, 5164.0], [41.8, 5171.0], [41.9, 5175.0], [42.0, 5177.0], [42.1, 5181.0], [42.2, 5183.0], [42.3, 5191.0], [42.4, 5194.0], [42.5, 5197.0], [42.6, 5199.0], [42.7, 5204.0], [42.8, 5205.0], [42.9, 5212.0], [43.0, 5214.0], [43.1, 5215.0], [43.2, 5217.0], [43.3, 5218.0], [43.4, 5222.0], [43.5, 5223.0], [43.6, 5225.0], [43.7, 5227.0], [43.8, 5231.0], [43.9, 5232.0], [44.0, 5235.0], [44.1, 5236.0], [44.2, 5237.0], [44.3, 5239.0], [44.4, 5241.0], [44.5, 5241.0], [44.6, 5247.0], [44.7, 5249.0], [44.8, 5251.0], [44.9, 5252.0], [45.0, 5253.0], [45.1, 5253.0], [45.2, 5258.0], [45.3, 5259.0], [45.4, 5260.0], [45.5, 5260.0], [45.6, 5262.0], [45.7, 5264.0], [45.8, 5264.0], [45.9, 5265.0], [46.0, 5266.0], [46.1, 5267.0], [46.2, 5268.0], [46.3, 5270.0], [46.4, 5273.0], [46.5, 5274.0], [46.6, 5276.0], [46.7, 5277.0], [46.8, 5279.0], [46.9, 5283.0], [47.0, 5284.0], [47.1, 5285.0], [47.2, 5287.0], [47.3, 5289.0], [47.4, 5290.0], [47.5, 5290.0], [47.6, 5296.0], [47.7, 5298.0], [47.8, 5300.0], [47.9, 5302.0], [48.0, 5304.0], [48.1, 5306.0], [48.2, 5306.0], [48.3, 5307.0], [48.4, 5311.0], [48.5, 5313.0], [48.6, 5318.0], [48.7, 5320.0], [48.8, 5322.0], [48.9, 5324.0], [49.0, 5325.0], [49.1, 5327.0], [49.2, 5331.0], [49.3, 5332.0], [49.4, 5336.0], [49.5, 5337.0], [49.6, 5341.0], [49.7, 5343.0], [49.8, 5346.0], [49.9, 5347.0], [50.0, 5350.0], [50.1, 5351.0], [50.2, 5353.0], [50.3, 5358.0], [50.4, 5363.0], [50.5, 5364.0], [50.6, 5365.0], [50.7, 5366.0], [50.8, 5373.0], [50.9, 5374.0], [51.0, 5374.0], [51.1, 5377.0], [51.2, 5388.0], [51.3, 5395.0], [51.4, 5400.0], [51.5, 5404.0], [51.6, 5408.0], [51.7, 5409.0], [51.8, 5416.0], [51.9, 5417.0], [52.0, 5420.0], [52.1, 5426.0], [52.2, 5427.0], [52.3, 5432.0], [52.4, 5432.0], [52.5, 5435.0], [52.6, 5440.0], [52.7, 5442.0], [52.8, 5445.0], [52.9, 5448.0], [53.0, 5456.0], [53.1, 5459.0], [53.2, 5464.0], [53.3, 5473.0], [53.4, 5479.0], [53.5, 5484.0], [53.6, 5486.0], [53.7, 5490.0], [53.8, 5494.0], [53.9, 5497.0], [54.0, 5505.0], [54.1, 5506.0], [54.2, 5508.0], [54.3, 5513.0], [54.4, 5515.0], [54.5, 5516.0], [54.6, 5520.0], [54.7, 5522.0], [54.8, 5531.0], [54.9, 5535.0], [55.0, 5535.0], [55.1, 5541.0], [55.2, 5549.0], [55.3, 5551.0], [55.4, 5554.0], [55.5, 5555.0], [55.6, 5564.0], [55.7, 5566.0], [55.8, 5568.0], [55.9, 5569.0], [56.0, 5570.0], [56.1, 5571.0], [56.2, 5573.0], [56.3, 5574.0], [56.4, 5576.0], [56.5, 5580.0], [56.6, 5581.0], [56.7, 5582.0], [56.8, 5583.0], [56.9, 5584.0], [57.0, 5586.0], [57.1, 5589.0], [57.2, 5591.0], [57.3, 5593.0], [57.4, 5595.0], [57.5, 5597.0], [57.6, 5598.0], [57.7, 5599.0], [57.8, 5600.0], [57.9, 5602.0], [58.0, 5604.0], [58.1, 5608.0], [58.2, 5611.0], [58.3, 5614.0], [58.4, 5616.0], [58.5, 5619.0], [58.6, 5621.0], [58.7, 5624.0], [58.8, 5626.0], [58.9, 5627.0], [59.0, 5631.0], [59.1, 5632.0], [59.2, 5638.0], [59.3, 5639.0], [59.4, 5642.0], [59.5, 5644.0], [59.6, 5644.0], [59.7, 5646.0], [59.8, 5647.0], [59.9, 5650.0], [60.0, 5653.0], [60.1, 5654.0], [60.2, 5656.0], [60.3, 5659.0], [60.4, 5661.0], [60.5, 5663.0], [60.6, 5663.0], [60.7, 5667.0], [60.8, 5669.0], [60.9, 5671.0], [61.0, 5673.0], [61.1, 5674.0], [61.2, 5680.0], [61.3, 5682.0], [61.4, 5686.0], [61.5, 5687.0], [61.6, 5689.0], [61.7, 5689.0], [61.8, 5695.0], [61.9, 5699.0], [62.0, 5702.0], [62.1, 5704.0], [62.2, 5705.0], [62.3, 5706.0], [62.4, 5715.0], [62.5, 5717.0], [62.6, 5725.0], [62.7, 5727.0], [62.8, 5731.0], [62.9, 5733.0], [63.0, 5733.0], [63.1, 5734.0], [63.2, 5737.0], [63.3, 5737.0], [63.4, 5740.0], [63.5, 5743.0], [63.6, 5744.0], [63.7, 5745.0], [63.8, 5748.0], [63.9, 5753.0], [64.0, 5754.0], [64.1, 5756.0], [64.2, 5760.0], [64.3, 5764.0], [64.4, 5766.0], [64.5, 5767.0], [64.6, 5769.0], [64.7, 5770.0], [64.8, 5771.0], [64.9, 5774.0], [65.0, 5777.0], [65.1, 5779.0], [65.2, 5779.0], [65.3, 5781.0], [65.4, 5782.0], [65.5, 5783.0], [65.6, 5785.0], [65.7, 5787.0], [65.8, 5789.0], [65.9, 5793.0], [66.0, 5793.0], [66.1, 5794.0], [66.2, 5797.0], [66.3, 5799.0], [66.4, 5802.0], [66.5, 5813.0], [66.6, 5815.0], [66.7, 5820.0], [66.8, 5822.0], [66.9, 5825.0], [67.0, 5829.0], [67.1, 5836.0], [67.2, 5837.0], [67.3, 5839.0], [67.4, 5841.0], [67.5, 5844.0], [67.6, 5847.0], [67.7, 5850.0], [67.8, 5851.0], [67.9, 5854.0], [68.0, 5857.0], [68.1, 5857.0], [68.2, 5861.0], [68.3, 5867.0], [68.4, 5873.0], [68.5, 5876.0], [68.6, 5880.0], [68.7, 5883.0], [68.8, 5885.0], [68.9, 5893.0], [69.0, 5893.0], [69.1, 5899.0], [69.2, 5900.0], [69.3, 5901.0], [69.4, 5905.0], [69.5, 5909.0], [69.6, 5916.0], [69.7, 5926.0], [69.8, 5928.0], [69.9, 5933.0], [70.0, 5935.0], [70.1, 5939.0], [70.2, 5943.0], [70.3, 5947.0], [70.4, 5948.0], [70.5, 5949.0], [70.6, 5957.0], [70.7, 5963.0], [70.8, 5969.0], [70.9, 5970.0], [71.0, 5975.0], [71.1, 5989.0], [71.2, 5989.0], [71.3, 5992.0], [71.4, 6000.0], [71.5, 6003.0], [71.6, 6004.0], [71.7, 6006.0], [71.8, 6009.0], [71.9, 6013.0], [72.0, 6015.0], [72.1, 6017.0], [72.2, 6019.0], [72.3, 6023.0], [72.4, 6032.0], [72.5, 6040.0], [72.6, 6047.0], [72.7, 6052.0], [72.8, 6054.0], [72.9, 6057.0], [73.0, 6058.0], [73.1, 6059.0], [73.2, 6060.0], [73.3, 6061.0], [73.4, 6066.0], [73.5, 6069.0], [73.6, 6072.0], [73.7, 6073.0], [73.8, 6077.0], [73.9, 6078.0], [74.0, 6079.0], [74.1, 6080.0], [74.2, 6082.0], [74.3, 6084.0], [74.4, 6088.0], [74.5, 6088.0], [74.6, 6089.0], [74.7, 6091.0], [74.8, 6095.0], [74.9, 6096.0], [75.0, 6097.0], [75.1, 6100.0], [75.2, 6102.0], [75.3, 6105.0], [75.4, 6107.0], [75.5, 6109.0], [75.6, 6111.0], [75.7, 6113.0], [75.8, 6115.0], [75.9, 6115.0], [76.0, 6117.0], [76.1, 6119.0], [76.2, 6122.0], [76.3, 6123.0], [76.4, 6125.0], [76.5, 6125.0], [76.6, 6126.0], [76.7, 6131.0], [76.8, 6132.0], [76.9, 6133.0], [77.0, 6135.0], [77.1, 6138.0], [77.2, 6141.0], [77.3, 6142.0], [77.4, 6143.0], [77.5, 6143.0], [77.6, 6146.0], [77.7, 6146.0], [77.8, 6153.0], [77.9, 6154.0], [78.0, 6157.0], [78.1, 6158.0], [78.2, 6159.0], [78.3, 6163.0], [78.4, 6171.0], [78.5, 6174.0], [78.6, 6177.0], [78.7, 6180.0], [78.8, 6181.0], [78.9, 6183.0], [79.0, 6184.0], [79.1, 6185.0], [79.2, 6186.0], [79.3, 6189.0], [79.4, 6192.0], [79.5, 6194.0], [79.6, 6194.0], [79.7, 6197.0], [79.8, 6198.0], [79.9, 6199.0], [80.0, 6199.0], [80.1, 6202.0], [80.2, 6204.0], [80.3, 6206.0], [80.4, 6207.0], [80.5, 6210.0], [80.6, 6215.0], [80.7, 6216.0], [80.8, 6217.0], [80.9, 6219.0], [81.0, 6221.0], [81.1, 6223.0], [81.2, 6225.0], [81.3, 6227.0], [81.4, 6229.0], [81.5, 6233.0], [81.6, 6235.0], [81.7, 6236.0], [81.8, 6236.0], [81.9, 6238.0], [82.0, 6239.0], [82.1, 6240.0], [82.2, 6243.0], [82.3, 6243.0], [82.4, 6244.0], [82.5, 6247.0], [82.6, 6248.0], [82.7, 6249.0], [82.8, 6251.0], [82.9, 6253.0], [83.0, 6254.0], [83.1, 6256.0], [83.2, 6257.0], [83.3, 6259.0], [83.4, 6262.0], [83.5, 6264.0], [83.6, 6266.0], [83.7, 6267.0], [83.8, 6273.0], [83.9, 6279.0], [84.0, 6285.0], [84.1, 6289.0], [84.2, 6290.0], [84.3, 6290.0], [84.4, 6295.0], [84.5, 6296.0], [84.6, 6298.0], [84.7, 6302.0], [84.8, 6306.0], [84.9, 6307.0], [85.0, 6309.0], [85.1, 6311.0], [85.2, 6312.0], [85.3, 6313.0], [85.4, 6314.0], [85.5, 6318.0], [85.6, 6321.0], [85.7, 6322.0], [85.8, 6325.0], [85.9, 6327.0], [86.0, 6327.0], [86.1, 6327.0], [86.2, 6329.0], [86.3, 6333.0], [86.4, 6336.0], [86.5, 6337.0], [86.6, 6338.0], [86.7, 6340.0], [86.8, 6341.0], [86.9, 6343.0], [87.0, 6346.0], [87.1, 6348.0], [87.2, 6348.0], [87.3, 6349.0], [87.4, 6350.0], [87.5, 6352.0], [87.6, 6354.0], [87.7, 6355.0], [87.8, 6357.0], [87.9, 6357.0], [88.0, 6360.0], [88.1, 6362.0], [88.2, 6365.0], [88.3, 6369.0], [88.4, 6371.0], [88.5, 6374.0], [88.6, 6379.0], [88.7, 6381.0], [88.8, 6383.0], [88.9, 6384.0], [89.0, 6386.0], [89.1, 6387.0], [89.2, 6392.0], [89.3, 6394.0], [89.4, 6396.0], [89.5, 6397.0], [89.6, 6400.0], [89.7, 6404.0], [89.8, 6406.0], [89.9, 6409.0], [90.0, 6409.0], [90.1, 6412.0], [90.2, 6413.0], [90.3, 6418.0], [90.4, 6423.0], [90.5, 6425.0], [90.6, 6425.0], [90.7, 6428.0], [90.8, 6431.0], [90.9, 6433.0], [91.0, 6442.0], [91.1, 6445.0], [91.2, 6446.0], [91.3, 6451.0], [91.4, 6458.0], [91.5, 6460.0], [91.6, 6462.0], [91.7, 6464.0], [91.8, 6470.0], [91.9, 6477.0], [92.0, 6479.0], [92.1, 6485.0], [92.2, 6487.0], [92.3, 6489.0], [92.4, 6493.0], [92.5, 6494.0], [92.6, 6495.0], [92.7, 6500.0], [92.8, 6500.0], [92.9, 6502.0], [93.0, 6503.0], [93.1, 6509.0], [93.2, 6514.0], [93.3, 6522.0], [93.4, 6523.0], [93.5, 6526.0], [93.6, 6528.0], [93.7, 6533.0], [93.8, 6543.0], [93.9, 6548.0], [94.0, 6550.0], [94.1, 6551.0], [94.2, 6552.0], [94.3, 6556.0], [94.4, 6559.0], [94.5, 6560.0], [94.6, 6562.0], [94.7, 6564.0], [94.8, 6570.0], [94.9, 6571.0], [95.0, 6577.0], [95.1, 6578.0], [95.2, 6583.0], [95.3, 6589.0], [95.4, 6592.0], [95.5, 6593.0], [95.6, 6593.0], [95.7, 6594.0], [95.8, 6598.0], [95.9, 6605.0], [96.0, 6607.0], [96.1, 6611.0], [96.2, 6612.0], [96.3, 6614.0], [96.4, 6620.0], [96.5, 6624.0], [96.6, 6628.0], [96.7, 6631.0], [96.8, 6635.0], [96.9, 6642.0], [97.0, 6644.0], [97.1, 6644.0], [97.2, 6656.0], [97.3, 6661.0], [97.4, 6671.0], [97.5, 6674.0], [97.6, 6680.0], [97.7, 6686.0], [97.8, 6688.0], [97.9, 6691.0], [98.0, 6704.0], [98.1, 6709.0], [98.2, 6714.0], [98.3, 6733.0], [98.4, 6752.0], [98.5, 6759.0], [98.6, 6776.0], [98.7, 6778.0], [98.8, 6792.0], [98.9, 6812.0], [99.0, 6833.0], [99.1, 6865.0], [99.2, 6920.0], [99.3, 6953.0], [99.4, 6961.0], [99.5, 6979.0], [99.6, 6993.0], [99.7, 7070.0], [99.8, 7108.0], [99.9, 7120.0]], "isOverall": false, "label": "/baoxiu/baoxiuAdd", "isController": false}, {"data": [[0.0, 44.0], [0.1, 932.0], [0.2, 938.0], [0.3, 1542.0], [0.4, 2547.0], [0.5, 4428.0], [0.6, 4431.0], [0.7, 4432.0], [0.8, 4439.0], [0.9, 4457.0], [1.0, 4458.0], [1.1, 4459.0], [1.2, 4465.0], [1.3, 4472.0], [1.4, 4475.0], [1.5, 4477.0], [1.6, 4493.0], [1.7, 4503.0], [1.8, 4511.0], [1.9, 4531.0], [2.0, 4533.0], [2.1, 4537.0], [2.2, 4544.0], [2.3, 4544.0], [2.4, 4545.0], [2.5, 4548.0], [2.6, 4552.0], [2.7, 4553.0], [2.8, 4554.0], [2.9, 4556.0], [3.0, 4561.0], [3.1, 4564.0], [3.2, 4565.0], [3.3, 4566.0], [3.4, 4567.0], [3.5, 4570.0], [3.6, 4571.0], [3.7, 4576.0], [3.8, 4578.0], [3.9, 4579.0], [4.0, 4581.0], [4.1, 4584.0], [4.2, 4585.0], [4.3, 4587.0], [4.4, 4588.0], [4.5, 4589.0], [4.6, 4592.0], [4.7, 4593.0], [4.8, 4594.0], [4.9, 4594.0], [5.0, 4600.0], [5.1, 4601.0], [5.2, 4601.0], [5.3, 4602.0], [5.4, 4605.0], [5.5, 4606.0], [5.6, 4606.0], [5.7, 4608.0], [5.8, 4609.0], [5.9, 4610.0], [6.0, 4612.0], [6.1, 4613.0], [6.2, 4615.0], [6.3, 4616.0], [6.4, 4619.0], [6.5, 4622.0], [6.6, 4624.0], [6.7, 4625.0], [6.8, 4627.0], [6.9, 4629.0], [7.0, 4631.0], [7.1, 4632.0], [7.2, 4634.0], [7.3, 4637.0], [7.4, 4640.0], [7.5, 4641.0], [7.6, 4641.0], [7.7, 4642.0], [7.8, 4647.0], [7.9, 4649.0], [8.0, 4650.0], [8.1, 4652.0], [8.2, 4653.0], [8.3, 4654.0], [8.4, 4655.0], [8.5, 4655.0], [8.6, 4656.0], [8.7, 4656.0], [8.8, 4657.0], [8.9, 4658.0], [9.0, 4660.0], [9.1, 4663.0], [9.2, 4665.0], [9.3, 4667.0], [9.4, 4668.0], [9.5, 4668.0], [9.6, 4668.0], [9.7, 4670.0], [9.8, 4671.0], [9.9, 4673.0], [10.0, 4674.0], [10.1, 4675.0], [10.2, 4678.0], [10.3, 4679.0], [10.4, 4681.0], [10.5, 4681.0], [10.6, 4683.0], [10.7, 4686.0], [10.8, 4688.0], [10.9, 4689.0], [11.0, 4691.0], [11.1, 4692.0], [11.2, 4693.0], [11.3, 4695.0], [11.4, 4696.0], [11.5, 4697.0], [11.6, 4697.0], [11.7, 4699.0], [11.8, 4701.0], [11.9, 4705.0], [12.0, 4707.0], [12.1, 4708.0], [12.2, 4710.0], [12.3, 4710.0], [12.4, 4712.0], [12.5, 4712.0], [12.6, 4715.0], [12.7, 4715.0], [12.8, 4718.0], [12.9, 4718.0], [13.0, 4718.0], [13.1, 4720.0], [13.2, 4720.0], [13.3, 4721.0], [13.4, 4721.0], [13.5, 4722.0], [13.6, 4723.0], [13.7, 4723.0], [13.8, 4724.0], [13.9, 4724.0], [14.0, 4725.0], [14.1, 4725.0], [14.2, 4726.0], [14.3, 4728.0], [14.4, 4729.0], [14.5, 4730.0], [14.6, 4731.0], [14.7, 4732.0], [14.8, 4733.0], [14.9, 4734.0], [15.0, 4736.0], [15.1, 4736.0], [15.2, 4737.0], [15.3, 4738.0], [15.4, 4740.0], [15.5, 4741.0], [15.6, 4741.0], [15.7, 4742.0], [15.8, 4744.0], [15.9, 4744.0], [16.0, 4745.0], [16.1, 4745.0], [16.2, 4745.0], [16.3, 4746.0], [16.4, 4747.0], [16.5, 4747.0], [16.6, 4748.0], [16.7, 4748.0], [16.8, 4749.0], [16.9, 4749.0], [17.0, 4750.0], [17.1, 4750.0], [17.2, 4751.0], [17.3, 4751.0], [17.4, 4751.0], [17.5, 4752.0], [17.6, 4753.0], [17.7, 4753.0], [17.8, 4753.0], [17.9, 4754.0], [18.0, 4754.0], [18.1, 4755.0], [18.2, 4755.0], [18.3, 4755.0], [18.4, 4755.0], [18.5, 4756.0], [18.6, 4756.0], [18.7, 4759.0], [18.8, 4760.0], [18.9, 4761.0], [19.0, 4761.0], [19.1, 4762.0], [19.2, 4763.0], [19.3, 4763.0], [19.4, 4763.0], [19.5, 4765.0], [19.6, 4766.0], [19.7, 4767.0], [19.8, 4770.0], [19.9, 4770.0], [20.0, 4771.0], [20.1, 4771.0], [20.2, 4771.0], [20.3, 4772.0], [20.4, 4772.0], [20.5, 4773.0], [20.6, 4775.0], [20.7, 4776.0], [20.8, 4776.0], [20.9, 4777.0], [21.0, 4778.0], [21.1, 4778.0], [21.2, 4778.0], [21.3, 4779.0], [21.4, 4780.0], [21.5, 4780.0], [21.6, 4780.0], [21.7, 4781.0], [21.8, 4782.0], [21.9, 4782.0], [22.0, 4784.0], [22.1, 4784.0], [22.2, 4785.0], [22.3, 4786.0], [22.4, 4786.0], [22.5, 4787.0], [22.6, 4788.0], [22.7, 4788.0], [22.8, 4790.0], [22.9, 4790.0], [23.0, 4793.0], [23.1, 4793.0], [23.2, 4795.0], [23.3, 4795.0], [23.4, 4796.0], [23.5, 4797.0], [23.6, 4798.0], [23.7, 4799.0], [23.8, 4801.0], [23.9, 4801.0], [24.0, 4801.0], [24.1, 4802.0], [24.2, 4802.0], [24.3, 4803.0], [24.4, 4804.0], [24.5, 4805.0], [24.6, 4807.0], [24.7, 4807.0], [24.8, 4809.0], [24.9, 4812.0], [25.0, 4813.0], [25.1, 4813.0], [25.2, 4814.0], [25.3, 4814.0], [25.4, 4816.0], [25.5, 4816.0], [25.6, 4817.0], [25.7, 4818.0], [25.8, 4818.0], [25.9, 4819.0], [26.0, 4820.0], [26.1, 4820.0], [26.2, 4822.0], [26.3, 4823.0], [26.4, 4823.0], [26.5, 4823.0], [26.6, 4824.0], [26.7, 4824.0], [26.8, 4826.0], [26.9, 4827.0], [27.0, 4827.0], [27.1, 4829.0], [27.2, 4829.0], [27.3, 4830.0], [27.4, 4830.0], [27.5, 4831.0], [27.6, 4832.0], [27.7, 4833.0], [27.8, 4834.0], [27.9, 4834.0], [28.0, 4835.0], [28.1, 4835.0], [28.2, 4836.0], [28.3, 4836.0], [28.4, 4838.0], [28.5, 4838.0], [28.6, 4839.0], [28.7, 4840.0], [28.8, 4840.0], [28.9, 4841.0], [29.0, 4842.0], [29.1, 4843.0], [29.2, 4843.0], [29.3, 4844.0], [29.4, 4844.0], [29.5, 4844.0], [29.6, 4845.0], [29.7, 4845.0], [29.8, 4846.0], [29.9, 4846.0], [30.0, 4847.0], [30.1, 4849.0], [30.2, 4851.0], [30.3, 4851.0], [30.4, 4852.0], [30.5, 4852.0], [30.6, 4853.0], [30.7, 4854.0], [30.8, 4854.0], [30.9, 4855.0], [31.0, 4858.0], [31.1, 4859.0], [31.2, 4859.0], [31.3, 4860.0], [31.4, 4861.0], [31.5, 4861.0], [31.6, 4862.0], [31.7, 4864.0], [31.8, 4864.0], [31.9, 4866.0], [32.0, 4866.0], [32.1, 4866.0], [32.2, 4867.0], [32.3, 4867.0], [32.4, 4868.0], [32.5, 4869.0], [32.6, 4870.0], [32.7, 4872.0], [32.8, 4873.0], [32.9, 4874.0], [33.0, 4874.0], [33.1, 4875.0], [33.2, 4876.0], [33.3, 4877.0], [33.4, 4878.0], [33.5, 4878.0], [33.6, 4879.0], [33.7, 4881.0], [33.8, 4883.0], [33.9, 4884.0], [34.0, 4884.0], [34.1, 4884.0], [34.2, 4888.0], [34.3, 4888.0], [34.4, 4890.0], [34.5, 4891.0], [34.6, 4892.0], [34.7, 4893.0], [34.8, 4893.0], [34.9, 4894.0], [35.0, 4895.0], [35.1, 4896.0], [35.2, 4897.0], [35.3, 4897.0], [35.4, 4899.0], [35.5, 4900.0], [35.6, 4900.0], [35.7, 4902.0], [35.8, 4902.0], [35.9, 4904.0], [36.0, 4905.0], [36.1, 4905.0], [36.2, 4905.0], [36.3, 4906.0], [36.4, 4909.0], [36.5, 4912.0], [36.6, 4912.0], [36.7, 4914.0], [36.8, 4914.0], [36.9, 4915.0], [37.0, 4916.0], [37.1, 4920.0], [37.2, 4923.0], [37.3, 4925.0], [37.4, 4926.0], [37.5, 4926.0], [37.6, 4927.0], [37.7, 4929.0], [37.8, 4931.0], [37.9, 4933.0], [38.0, 4934.0], [38.1, 4935.0], [38.2, 4936.0], [38.3, 4937.0], [38.4, 4938.0], [38.5, 4938.0], [38.6, 4940.0], [38.7, 4940.0], [38.8, 4941.0], [38.9, 4941.0], [39.0, 4942.0], [39.1, 4944.0], [39.2, 4947.0], [39.3, 4949.0], [39.4, 4950.0], [39.5, 4950.0], [39.6, 4951.0], [39.7, 4954.0], [39.8, 4954.0], [39.9, 4955.0], [40.0, 4956.0], [40.1, 4958.0], [40.2, 4959.0], [40.3, 4960.0], [40.4, 4960.0], [40.5, 4961.0], [40.6, 4963.0], [40.7, 4965.0], [40.8, 4965.0], [40.9, 4968.0], [41.0, 4970.0], [41.1, 4970.0], [41.2, 4972.0], [41.3, 4973.0], [41.4, 4975.0], [41.5, 4977.0], [41.6, 4981.0], [41.7, 4982.0], [41.8, 4984.0], [41.9, 4985.0], [42.0, 4987.0], [42.1, 4989.0], [42.2, 4992.0], [42.3, 4993.0], [42.4, 4994.0], [42.5, 4995.0], [42.6, 5001.0], [42.7, 5002.0], [42.8, 5003.0], [42.9, 5004.0], [43.0, 5006.0], [43.1, 5008.0], [43.2, 5008.0], [43.3, 5011.0], [43.4, 5012.0], [43.5, 5014.0], [43.6, 5015.0], [43.7, 5016.0], [43.8, 5018.0], [43.9, 5019.0], [44.0, 5021.0], [44.1, 5023.0], [44.2, 5024.0], [44.3, 5026.0], [44.4, 5027.0], [44.5, 5029.0], [44.6, 5032.0], [44.7, 5033.0], [44.8, 5034.0], [44.9, 5036.0], [45.0, 5039.0], [45.1, 5042.0], [45.2, 5043.0], [45.3, 5045.0], [45.4, 5046.0], [45.5, 5049.0], [45.6, 5052.0], [45.7, 5054.0], [45.8, 5059.0], [45.9, 5061.0], [46.0, 5062.0], [46.1, 5066.0], [46.2, 5072.0], [46.3, 5085.0], [46.4, 5086.0], [46.5, 5092.0], [46.6, 5096.0], [46.7, 5099.0], [46.8, 5105.0], [46.9, 5107.0], [47.0, 5110.0], [47.1, 5113.0], [47.2, 5118.0], [47.3, 5118.0], [47.4, 5121.0], [47.5, 5124.0], [47.6, 5126.0], [47.7, 5127.0], [47.8, 5129.0], [47.9, 5133.0], [48.0, 5135.0], [48.1, 5140.0], [48.2, 5141.0], [48.3, 5154.0], [48.4, 5159.0], [48.5, 5162.0], [48.6, 5163.0], [48.7, 5168.0], [48.8, 5170.0], [48.9, 5172.0], [49.0, 5174.0], [49.1, 5176.0], [49.2, 5176.0], [49.3, 5178.0], [49.4, 5179.0], [49.5, 5181.0], [49.6, 5183.0], [49.7, 5185.0], [49.8, 5188.0], [49.9, 5195.0], [50.0, 5197.0], [50.1, 5202.0], [50.2, 5206.0], [50.3, 5208.0], [50.4, 5211.0], [50.5, 5213.0], [50.6, 5215.0], [50.7, 5218.0], [50.8, 5221.0], [50.9, 5223.0], [51.0, 5223.0], [51.1, 5228.0], [51.2, 5230.0], [51.3, 5234.0], [51.4, 5236.0], [51.5, 5236.0], [51.6, 5239.0], [51.7, 5242.0], [51.8, 5244.0], [51.9, 5244.0], [52.0, 5245.0], [52.1, 5248.0], [52.2, 5248.0], [52.3, 5250.0], [52.4, 5250.0], [52.5, 5251.0], [52.6, 5251.0], [52.7, 5251.0], [52.8, 5252.0], [52.9, 5253.0], [53.0, 5256.0], [53.1, 5258.0], [53.2, 5262.0], [53.3, 5265.0], [53.4, 5266.0], [53.5, 5268.0], [53.6, 5271.0], [53.7, 5275.0], [53.8, 5276.0], [53.9, 5287.0], [54.0, 5289.0], [54.1, 5293.0], [54.2, 5294.0], [54.3, 5295.0], [54.4, 5297.0], [54.5, 5298.0], [54.6, 5299.0], [54.7, 5302.0], [54.8, 5306.0], [54.9, 5308.0], [55.0, 5310.0], [55.1, 5311.0], [55.2, 5313.0], [55.3, 5314.0], [55.4, 5315.0], [55.5, 5317.0], [55.6, 5320.0], [55.7, 5325.0], [55.8, 5325.0], [55.9, 5327.0], [56.0, 5329.0], [56.1, 5330.0], [56.2, 5331.0], [56.3, 5333.0], [56.4, 5333.0], [56.5, 5335.0], [56.6, 5337.0], [56.7, 5338.0], [56.8, 5339.0], [56.9, 5342.0], [57.0, 5344.0], [57.1, 5345.0], [57.2, 5347.0], [57.3, 5350.0], [57.4, 5351.0], [57.5, 5354.0], [57.6, 5354.0], [57.7, 5355.0], [57.8, 5355.0], [57.9, 5356.0], [58.0, 5356.0], [58.1, 5356.0], [58.2, 5358.0], [58.3, 5360.0], [58.4, 5361.0], [58.5, 5362.0], [58.6, 5363.0], [58.7, 5364.0], [58.8, 5365.0], [58.9, 5367.0], [59.0, 5368.0], [59.1, 5369.0], [59.2, 5370.0], [59.3, 5371.0], [59.4, 5371.0], [59.5, 5372.0], [59.6, 5373.0], [59.7, 5374.0], [59.8, 5377.0], [59.9, 5377.0], [60.0, 5378.0], [60.1, 5378.0], [60.2, 5379.0], [60.3, 5380.0], [60.4, 5381.0], [60.5, 5383.0], [60.6, 5384.0], [60.7, 5384.0], [60.8, 5386.0], [60.9, 5388.0], [61.0, 5389.0], [61.1, 5389.0], [61.2, 5390.0], [61.3, 5391.0], [61.4, 5392.0], [61.5, 5393.0], [61.6, 5396.0], [61.7, 5397.0], [61.8, 5399.0], [61.9, 5402.0], [62.0, 5403.0], [62.1, 5403.0], [62.2, 5404.0], [62.3, 5405.0], [62.4, 5408.0], [62.5, 5410.0], [62.6, 5412.0], [62.7, 5412.0], [62.8, 5413.0], [62.9, 5414.0], [63.0, 5416.0], [63.1, 5418.0], [63.2, 5419.0], [63.3, 5419.0], [63.4, 5420.0], [63.5, 5422.0], [63.6, 5424.0], [63.7, 5426.0], [63.8, 5427.0], [63.9, 5427.0], [64.0, 5429.0], [64.1, 5429.0], [64.2, 5430.0], [64.3, 5431.0], [64.4, 5432.0], [64.5, 5433.0], [64.6, 5434.0], [64.7, 5435.0], [64.8, 5436.0], [64.9, 5437.0], [65.0, 5438.0], [65.1, 5439.0], [65.2, 5440.0], [65.3, 5440.0], [65.4, 5441.0], [65.5, 5442.0], [65.6, 5443.0], [65.7, 5444.0], [65.8, 5445.0], [65.9, 5448.0], [66.0, 5450.0], [66.1, 5451.0], [66.2, 5451.0], [66.3, 5452.0], [66.4, 5453.0], [66.5, 5454.0], [66.6, 5454.0], [66.7, 5455.0], [66.8, 5457.0], [66.9, 5457.0], [67.0, 5458.0], [67.1, 5460.0], [67.2, 5462.0], [67.3, 5463.0], [67.4, 5464.0], [67.5, 5466.0], [67.6, 5469.0], [67.7, 5473.0], [67.8, 5475.0], [67.9, 5477.0], [68.0, 5478.0], [68.1, 5479.0], [68.2, 5481.0], [68.3, 5482.0], [68.4, 5483.0], [68.5, 5484.0], [68.6, 5485.0], [68.7, 5488.0], [68.8, 5489.0], [68.9, 5493.0], [69.0, 5497.0], [69.1, 5499.0], [69.2, 5500.0], [69.3, 5503.0], [69.4, 5505.0], [69.5, 5507.0], [69.6, 5509.0], [69.7, 5510.0], [69.8, 5511.0], [69.9, 5513.0], [70.0, 5515.0], [70.1, 5517.0], [70.2, 5521.0], [70.3, 5522.0], [70.4, 5524.0], [70.5, 5530.0], [70.6, 5531.0], [70.7, 5533.0], [70.8, 5536.0], [70.9, 5540.0], [71.0, 5543.0], [71.1, 5546.0], [71.2, 5547.0], [71.3, 5553.0], [71.4, 5554.0], [71.5, 5557.0], [71.6, 5559.0], [71.7, 5560.0], [71.8, 5561.0], [71.9, 5566.0], [72.0, 5568.0], [72.1, 5572.0], [72.2, 5574.0], [72.3, 5575.0], [72.4, 5576.0], [72.5, 5578.0], [72.6, 5579.0], [72.7, 5579.0], [72.8, 5580.0], [72.9, 5585.0], [73.0, 5586.0], [73.1, 5588.0], [73.2, 5590.0], [73.3, 5592.0], [73.4, 5594.0], [73.5, 5595.0], [73.6, 5596.0], [73.7, 5597.0], [73.8, 5602.0], [73.9, 5602.0], [74.0, 5604.0], [74.1, 5606.0], [74.2, 5608.0], [74.3, 5610.0], [74.4, 5613.0], [74.5, 5613.0], [74.6, 5614.0], [74.7, 5617.0], [74.8, 5618.0], [74.9, 5619.0], [75.0, 5619.0], [75.1, 5621.0], [75.2, 5622.0], [75.3, 5624.0], [75.4, 5625.0], [75.5, 5629.0], [75.6, 5629.0], [75.7, 5631.0], [75.8, 5633.0], [75.9, 5633.0], [76.0, 5633.0], [76.1, 5635.0], [76.2, 5635.0], [76.3, 5637.0], [76.4, 5639.0], [76.5, 5640.0], [76.6, 5642.0], [76.7, 5643.0], [76.8, 5643.0], [76.9, 5644.0], [77.0, 5645.0], [77.1, 5645.0], [77.2, 5646.0], [77.3, 5647.0], [77.4, 5648.0], [77.5, 5649.0], [77.6, 5650.0], [77.7, 5650.0], [77.8, 5651.0], [77.9, 5655.0], [78.0, 5655.0], [78.1, 5656.0], [78.2, 5658.0], [78.3, 5658.0], [78.4, 5662.0], [78.5, 5663.0], [78.6, 5663.0], [78.7, 5663.0], [78.8, 5664.0], [78.9, 5666.0], [79.0, 5667.0], [79.1, 5668.0], [79.2, 5668.0], [79.3, 5670.0], [79.4, 5671.0], [79.5, 5671.0], [79.6, 5672.0], [79.7, 5672.0], [79.8, 5674.0], [79.9, 5676.0], [80.0, 5678.0], [80.1, 5680.0], [80.2, 5681.0], [80.3, 5683.0], [80.4, 5684.0], [80.5, 5686.0], [80.6, 5687.0], [80.7, 5690.0], [80.8, 5690.0], [80.9, 5691.0], [81.0, 5693.0], [81.1, 5695.0], [81.2, 5696.0], [81.3, 5699.0], [81.4, 5700.0], [81.5, 5701.0], [81.6, 5702.0], [81.7, 5705.0], [81.8, 5707.0], [81.9, 5708.0], [82.0, 5710.0], [82.1, 5714.0], [82.2, 5715.0], [82.3, 5716.0], [82.4, 5716.0], [82.5, 5717.0], [82.6, 5718.0], [82.7, 5719.0], [82.8, 5721.0], [82.9, 5722.0], [83.0, 5722.0], [83.1, 5724.0], [83.2, 5725.0], [83.3, 5726.0], [83.4, 5728.0], [83.5, 5731.0], [83.6, 5737.0], [83.7, 5738.0], [83.8, 5740.0], [83.9, 5741.0], [84.0, 5743.0], [84.1, 5745.0], [84.2, 5747.0], [84.3, 5750.0], [84.4, 5752.0], [84.5, 5757.0], [84.6, 5759.0], [84.7, 5760.0], [84.8, 5761.0], [84.9, 5766.0], [85.0, 5774.0], [85.1, 5782.0], [85.2, 5784.0], [85.3, 5788.0], [85.4, 5805.0], [85.5, 5807.0], [85.6, 5809.0], [85.7, 5817.0], [85.8, 5830.0], [85.9, 5832.0], [86.0, 5842.0], [86.1, 5846.0], [86.2, 5855.0], [86.3, 5864.0], [86.4, 5865.0], [86.5, 5889.0], [86.6, 5913.0], [86.7, 5937.0], [86.8, 5963.0], [86.9, 6004.0], [87.0, 6014.0], [87.1, 6020.0], [87.2, 6026.0], [87.3, 6030.0], [87.4, 6035.0], [87.5, 6035.0], [87.6, 6038.0], [87.7, 6039.0], [87.8, 6042.0], [87.9, 6044.0], [88.0, 6045.0], [88.1, 6047.0], [88.2, 6055.0], [88.3, 6063.0], [88.4, 6067.0], [88.5, 6070.0], [88.6, 6075.0], [88.7, 6076.0], [88.8, 6078.0], [88.9, 6081.0], [89.0, 6082.0], [89.1, 6085.0], [89.2, 6089.0], [89.3, 6094.0], [89.4, 6096.0], [89.5, 6102.0], [89.6, 6108.0], [89.7, 6113.0], [89.8, 6118.0], [89.9, 6123.0], [90.0, 6126.0], [90.1, 6126.0], [90.2, 6129.0], [90.3, 6131.0], [90.4, 6134.0], [90.5, 6135.0], [90.6, 6141.0], [90.7, 6143.0], [90.8, 6149.0], [90.9, 6151.0], [91.0, 6152.0], [91.1, 6152.0], [91.2, 6159.0], [91.3, 6160.0], [91.4, 6161.0], [91.5, 6161.0], [91.6, 6167.0], [91.7, 6171.0], [91.8, 6172.0], [91.9, 6175.0], [92.0, 6177.0], [92.1, 6177.0], [92.2, 6186.0], [92.3, 6191.0], [92.4, 6191.0], [92.5, 6194.0], [92.6, 6197.0], [92.7, 6199.0], [92.8, 6203.0], [92.9, 6204.0], [93.0, 6209.0], [93.1, 6210.0], [93.2, 6211.0], [93.3, 6211.0], [93.4, 6212.0], [93.5, 6213.0], [93.6, 6215.0], [93.7, 6220.0], [93.8, 6234.0], [93.9, 6235.0], [94.0, 6237.0], [94.1, 6244.0], [94.2, 6257.0], [94.3, 6259.0], [94.4, 6262.0], [94.5, 6266.0], [94.6, 6273.0], [94.7, 6274.0], [94.8, 6279.0], [94.9, 6287.0], [95.0, 6294.0], [95.1, 6299.0], [95.2, 6303.0], [95.3, 6303.0], [95.4, 6304.0], [95.5, 6308.0], [95.6, 6314.0], [95.7, 6319.0], [95.8, 6326.0], [95.9, 6333.0], [96.0, 6339.0], [96.1, 6341.0], [96.2, 6354.0], [96.3, 6358.0], [96.4, 6366.0], [96.5, 6369.0], [96.6, 6371.0], [96.7, 6373.0], [96.8, 6379.0], [96.9, 6384.0], [97.0, 6389.0], [97.1, 6394.0], [97.2, 6397.0], [97.3, 6404.0], [97.4, 6424.0], [97.5, 6428.0], [97.6, 6442.0], [97.7, 6449.0], [97.8, 6469.0], [97.9, 6477.0], [98.0, 6481.0], [98.1, 6500.0], [98.2, 6504.0], [98.3, 6520.0], [98.4, 6527.0], [98.5, 6537.0], [98.6, 6545.0], [98.7, 6558.0], [98.8, 6568.0], [98.9, 6586.0], [99.0, 6589.0], [99.1, 6592.0], [99.2, 6604.0], [99.3, 6609.0], [99.4, 6616.0], [99.5, 6658.0], [99.6, 6674.0], [99.7, 6712.0], [99.8, 6738.0], [99.9, 6779.0]], "isOverall": false, "label": "/weixiuMaster/backBaoXiu", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 241.0, "series": [{"data": [[0.0, 6.0], [600.0, 1.0], [900.0, 5.0], [1000.0, 22.0], [1100.0, 18.0], [1200.0, 17.0], [1300.0, 21.0], [1400.0, 20.0], [1500.0, 12.0], [1600.0, 20.0], [1700.0, 10.0], [1800.0, 14.0], [1900.0, 27.0], [2000.0, 19.0], [2100.0, 13.0], [2200.0, 19.0], [2300.0, 17.0], [2400.0, 29.0], [2500.0, 17.0], [2600.0, 8.0], [2700.0, 5.0], [2800.0, 6.0], [2900.0, 3.0], [3100.0, 2.0], [3200.0, 15.0], [3300.0, 10.0], [3400.0, 10.0], [3500.0, 13.0], [3600.0, 14.0], [3700.0, 14.0], [3800.0, 16.0], [3900.0, 15.0], [4000.0, 13.0], [4100.0, 17.0], [4200.0, 26.0], [4300.0, 39.0], [4400.0, 36.0], [4500.0, 29.0], [4600.0, 28.0], [4700.0, 37.0], [4800.0, 41.0], [4900.0, 41.0], [5100.0, 60.0], [5000.0, 47.0], [5200.0, 102.0], [5300.0, 72.0], [5400.0, 51.0], [5500.0, 76.0], [5600.0, 84.0], [5700.0, 89.0], [5800.0, 56.0], [6100.0, 99.0], [6000.0, 74.0], [5900.0, 44.0], [6200.0, 92.0], [6300.0, 99.0], [6400.0, 62.0], [6500.0, 63.0], [6600.0, 43.0], [6700.0, 18.0], [6900.0, 9.0], [6800.0, 6.0], [7000.0, 3.0], [7100.0, 4.0], [100.0, 2.0]], "isOverall": false, "label": "/baoxiu/baoxiuAdd", "isController": false}, {"data": [[0.0, 1.0], [900.0, 5.0], [1500.0, 1.0], [2000.0, 1.0], [2500.0, 1.0], [4600.0, 134.0], [4500.0, 68.0], [4400.0, 23.0], [4800.0, 235.0], [4700.0, 241.0], [5100.0, 67.0], [5000.0, 83.0], [4900.0, 142.0], [5300.0, 144.0], [5200.0, 91.0], [5600.0, 152.0], [5500.0, 91.0], [5400.0, 147.0], [5800.0, 24.0], [5700.0, 81.0], [5900.0, 6.0], [6100.0, 66.0], [6000.0, 51.0], [6300.0, 42.0], [6200.0, 48.0], [6600.0, 10.0], [6400.0, 17.0], [6500.0, 22.0], [6700.0, 5.0], [6800.0, 1.0]], "isOverall": false, "label": "/weixiuMaster/backBaoXiu", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 7100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 3882.0, "series": [{"data": [[0.0, 9.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 109.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 3882.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 134.54166666666666, "minX": 1.62981476E12, "maxY": 1000.0, "series": [{"data": [[1.629814774E12, 991.9464285714294], [1.629814764E12, 1000.0], [1.629814776E12, 991.0], [1.629814766E12, 999.5361596009972], [1.629814778E12, 879.4511111111113], [1.629814768E12, 999.0], [1.62981478E12, 470.0902439024386], [1.62981477E12, 999.0], [1.62981476E12, 1000.0], [1.629814782E12, 134.54166666666666], [1.629814772E12, 997.1277258566977], [1.629814762E12, 1000.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629814782E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 3476.3333333333335, "minX": 1.0, "maxY": 6712.0, "series": [{"data": [[959.0, 5223.0], [955.0, 5222.0], [990.0, 5166.6], [991.0, 5769.381692573402], [989.0, 5037.0], [988.0, 5138.0], [987.0, 5070.0], [985.0, 5071.666666666667], [984.0, 5086.0], [962.0, 5215.0], [972.0, 5241.0], [971.0, 5276.0], [970.0, 5260.0], [983.0, 5084.5], [982.0, 5094.0], [976.0, 5146.5], [1000.0, 3780.2445328031818], [999.0, 5536.333333333333], [998.0, 6298.0], [996.0, 6319.5], [995.0, 6334.2], [994.0, 6423.712121212121], [993.0, 6602.170212765957], [992.0, 6368.74537037037]], "isOverall": false, "label": "/baoxiu/baoxiuAdd", "isController": false}, {"data": [[995.7075, 4887.524499999992]], "isOverall": false, "label": "/baoxiu/baoxiuAdd-Aggregated", "isController": false}, {"data": [[2.0, 4970.0], [3.0, 4622.0], [4.0, 5223.0], [5.0, 4961.0], [6.0, 4568.0], [8.0, 4883.5], [9.0, 4914.0], [10.0, 4950.0], [11.0, 4954.0], [12.0, 4947.0], [14.0, 4836.0], [16.0, 4550.5], [17.0, 4882.0], [18.0, 5073.0], [19.0, 4602.0], [21.0, 4678.0], [22.0, 4902.0], [23.0, 4873.0], [24.0, 5054.0], [25.0, 4844.0], [26.0, 5174.0], [59.0, 4811.363636363635], [61.0, 4826.0], [60.0, 4915.0], [63.0, 4760.0], [62.0, 4843.0], [67.0, 4787.5], [65.0, 4837.0], [64.0, 4759.0], [71.0, 4787.0], [69.0, 4748.0], [68.0, 4809.0], [75.0, 4773.0], [74.0, 4830.0], [73.0, 4866.0], [72.0, 4836.0], [79.0, 4816.0], [78.0, 4750.0], [77.0, 4854.0], [76.0, 4905.0], [83.0, 4726.0], [82.0, 5012.0], [81.0, 5033.0], [80.0, 4851.0], [87.0, 4734.0], [86.0, 4776.0], [84.0, 4807.0], [91.0, 4915.0], [90.0, 4723.0], [89.0, 4742.0], [88.0, 4985.0], [94.0, 4855.0], [93.0, 4938.0], [92.0, 4920.0], [99.0, 4941.0], [98.0, 4780.0], [97.0, 4895.0], [96.0, 4967.5], [103.0, 5006.0], [102.0, 4767.0], [101.0, 4876.0], [100.0, 4929.0], [107.0, 4759.0], [106.0, 4818.0], [105.0, 4827.0], [104.0, 4851.0], [111.0, 4754.0], [110.0, 4906.0], [109.0, 4900.0], [108.0, 4940.0], [115.0, 4744.0], [114.0, 4747.0], [113.0, 4753.0], [112.0, 4926.0], [119.0, 4736.0], [118.0, 4732.0], [117.0, 4737.0], [116.0, 4824.0], [123.0, 4720.0], [122.0, 4725.0], [121.0, 4727.0], [120.0, 4970.0], [127.0, 4752.0], [126.0, 4705.0], [125.0, 4868.0], [124.0, 4715.0], [135.0, 4753.0], [134.0, 4816.0], [133.0, 4778.0], [132.0, 4761.0], [131.0, 4741.0], [130.0, 4824.0], [129.0, 4823.0], [128.0, 4782.0], [143.0, 4813.0], [142.0, 4778.0], [141.0, 4788.0], [140.0, 4741.0], [139.0, 4807.0], [138.0, 4822.0], [137.0, 4912.0], [136.0, 4815.0], [151.0, 4835.0], [150.0, 4765.0], [149.0, 4750.0], [148.0, 4823.0], [147.0, 4805.0], [146.0, 4820.0], [145.0, 4803.0], [144.0, 4724.0], [159.0, 4721.0], [158.0, 4751.0], [157.0, 4668.0], [156.0, 4778.0], [155.0, 4656.0], [154.0, 4752.0], [153.0, 4748.0], [152.0, 4772.0], [167.0, 4818.0], [166.0, 4613.0], [165.0, 4838.0], [164.0, 4772.0], [163.0, 4753.0], [162.0, 4772.0], [161.0, 4770.0], [160.0, 4878.0], [175.0, 4671.0], [174.0, 4793.0], [173.0, 4695.0], [172.0, 4697.0], [171.0, 4766.0], [170.0, 4763.0], [169.0, 4773.0], [183.0, 4696.0], [182.0, 4784.0], [181.0, 4650.0], [180.0, 4790.5], [178.0, 4797.0], [177.0, 4760.0], [176.0, 4823.0], [191.0, 4749.0], [190.0, 4739.0], [189.0, 4637.0], [188.0, 4770.0], [187.0, 4701.0], [186.0, 4668.0], [185.0, 4761.0], [184.0, 4771.0], [199.0, 4754.0], [198.0, 4756.0], [197.0, 4693.0], [196.0, 4579.0], [195.0, 4776.0], [194.0, 4634.0], [193.0, 4626.0], [192.0, 4640.0], [207.0, 4653.0], [206.0, 4699.0], [205.0, 4652.0], [204.0, 4675.0], [203.0, 4656.0], [202.0, 4681.0], [201.0, 4751.0], [200.0, 4748.0], [215.0, 4602.0], [214.0, 4745.0], [213.0, 4675.0], [212.0, 4634.0], [211.0, 4678.0], [210.0, 4697.0], [209.0, 4693.0], [208.0, 4692.0], [223.0, 4724.0], [222.0, 4615.0], [221.0, 4722.0], [220.0, 4731.0], [219.0, 4581.0], [218.0, 4665.0], [217.0, 4753.0], [216.0, 4655.0], [231.0, 4861.0], [230.0, 4793.0], [229.0, 4694.0], [228.0, 4710.0], [227.0, 4584.0], [226.0, 4679.0], [225.0, 4793.0], [224.0, 4606.0], [239.0, 4747.0], [238.0, 4788.0], [237.0, 4797.0], [236.0, 4702.0], [235.0, 4713.0], [234.0, 4846.0], [233.0, 4709.0], [232.0, 4561.0], [247.0, 4799.0], [246.0, 4686.0], [245.0, 4642.0], [244.0, 4628.0], [243.0, 4723.0], [242.0, 4711.0], [241.0, 4790.0], [240.0, 4712.0], [255.0, 4801.0], [254.0, 4707.0], [252.0, 4748.0], [251.0, 4641.0], [250.0, 4648.0], [249.0, 4749.0], [248.0, 4755.0], [270.0, 4697.0], [271.0, 4722.0], [269.0, 4724.0], [268.0, 4663.0], [267.0, 4641.0], [266.0, 4718.0], [265.0, 4657.0], [264.0, 4733.0], [263.0, 4720.0], [257.0, 4756.0], [256.0, 4777.0], [259.0, 4736.0], [258.0, 4682.0], [262.0, 4772.0], [261.0, 4775.0], [260.0, 4707.0], [286.0, 4822.0], [287.0, 4701.0], [285.0, 4668.0], [284.0, 4827.0], [283.0, 4668.0], [282.0, 4668.0], [281.0, 4823.0], [280.0, 4689.0], [279.0, 4801.0], [273.0, 4813.0], [272.0, 4845.0], [275.0, 4843.0], [274.0, 4804.0], [278.0, 4768.0], [276.0, 4802.0], [302.0, 4805.0], [301.0, 4733.0], [291.0, 4661.0], [290.0, 4655.0], [289.0, 4829.0], [288.0, 4753.0], [299.0, 4802.0], [298.0, 4812.0], [297.0, 4796.0], [296.0, 4712.0], [295.0, 4807.5], [293.0, 4770.0], [292.0, 4718.0], [318.0, 4701.5], [319.0, 4679.0], [316.0, 4726.0], [307.0, 4720.0], [306.0, 4798.0], [305.0, 4814.0], [304.0, 4737.0], [315.0, 4674.0], [314.0, 4751.0], [313.0, 4733.0], [312.0, 4778.0], [311.0, 4792.0], [310.0, 4738.0], [309.0, 4812.0], [308.0, 4849.0], [334.0, 4780.0], [335.0, 4654.0], [333.0, 4691.0], [332.0, 4583.0], [331.0, 4708.0], [330.0, 4650.0], [329.0, 4742.0], [328.0, 4688.0], [327.0, 4695.0], [321.0, 4656.0], [320.0, 4684.0], [323.0, 4755.0], [322.0, 4642.0], [326.0, 4763.0], [325.0, 4840.0], [324.0, 4745.0], [349.0, 4730.0], [350.0, 4721.0], [348.0, 4667.0], [339.0, 4627.0], [338.0, 4588.5], [336.0, 4751.0], [347.0, 4729.0], [346.0, 4664.0], [345.0, 4594.0], [344.0, 4606.0], [343.0, 4755.0], [342.0, 4730.0], [341.0, 4536.0], [340.0, 4533.0], [366.0, 4681.0], [367.0, 4658.0], [365.0, 4649.0], [364.0, 4796.0], [363.0, 4795.0], [362.0, 4780.0], [361.0, 4611.0], [360.0, 4605.0], [359.0, 4578.0], [353.0, 4762.0], [352.0, 4702.0], [355.0, 4571.0], [354.0, 4565.0], [358.0, 4592.0], [357.0, 4564.0], [356.0, 4563.0], [382.0, 4655.0], [383.0, 4637.0], [381.0, 4631.0], [380.0, 4476.0], [379.0, 4459.0], [378.0, 4503.0], [377.0, 4742.0], [376.0, 4464.0], [375.0, 4466.0], [369.0, 4801.0], [368.0, 4734.0], [371.0, 4683.0], [370.0, 4913.0], [374.0, 4501.0], [373.0, 4465.0], [372.0, 4677.0], [398.0, 4538.0], [399.0, 4475.0], [397.0, 4477.0], [396.0, 4640.0], [395.0, 4625.0], [394.0, 4745.0], [393.0, 4771.0], [392.0, 4482.0], [391.0, 4594.0], [385.0, 4458.0], [384.0, 4610.0], [387.0, 4707.0], [386.0, 4458.0], [390.0, 4578.0], [389.0, 4594.0], [388.0, 4597.0], [414.0, 4647.0], [415.0, 4439.0], [413.0, 4674.0], [412.0, 4601.0], [411.0, 4859.0], [410.0, 4657.0], [409.0, 4656.0], [408.0, 4690.0], [407.0, 4741.0], [401.0, 4472.0], [400.0, 4503.0], [403.0, 4610.0], [402.0, 4458.0], [406.0, 4493.0], [405.0, 4472.0], [404.0, 4606.0], [430.0, 4437.0], [431.0, 4446.0], [429.0, 4768.5], [419.0, 4825.0], [418.0, 4537.0], [417.0, 4554.0], [416.0, 4540.0], [427.0, 4601.5], [425.0, 4431.0], [424.0, 4698.0], [423.0, 4822.0], [422.0, 4432.0], [421.0, 4428.0], [420.0, 4428.0], [446.0, 4925.0], [447.0, 4754.0], [445.0, 4589.0], [444.0, 4584.0], [443.0, 4728.0], [442.0, 4687.0], [441.0, 4544.0], [440.0, 4744.0], [439.0, 4556.0], [432.0, 4615.0], [435.0, 4600.0], [434.0, 4579.5], [438.0, 4566.0], [437.0, 4567.0], [436.0, 4457.0], [462.0, 4631.0], [463.0, 4593.0], [461.0, 4660.0], [460.0, 4593.0], [459.0, 4580.0], [458.0, 4729.0], [457.0, 4655.0], [456.0, 4533.0], [455.0, 5030.0], [449.0, 4649.0], [448.0, 4899.0], [451.0, 4621.0], [450.0, 4545.0], [454.0, 4732.0], [453.0, 4574.0], [478.0, 4839.0], [479.0, 4845.0], [477.0, 4802.0], [476.0, 4553.0], [475.0, 4554.0], [474.0, 4670.0], [473.0, 4721.0], [472.0, 4608.0], [471.0, 4777.0], [464.0, 4601.0], [470.0, 4600.0], [469.0, 4592.8], [494.0, 4719.0], [495.0, 4856.0], [493.0, 4889.0], [492.0, 4609.0], [491.0, 4624.0], [490.0, 4641.0], [489.0, 4710.0], [488.0, 4616.0], [487.0, 4589.0], [480.0, 4786.0], [483.0, 4652.5], [481.0, 4785.0], [486.0, 4778.0], [485.0, 4766.0], [510.0, 4613.0], [511.0, 4585.0], [509.0, 4570.0], [508.0, 4619.0], [507.0, 4589.0], [506.0, 4576.0], [505.0, 4609.0], [503.0, 4601.0], [497.0, 4834.0], [496.0, 4631.0], [499.0, 4554.0], [498.0, 4756.0], [502.0, 4552.0], [501.0, 4552.0], [500.0, 4622.0], [536.0, 4701.0], [540.0, 4795.0], [541.0, 4799.0], [529.0, 4776.0], [528.0, 4608.0], [539.0, 4734.0], [538.0, 4715.0], [537.0, 4740.0], [527.0, 4629.0], [513.0, 4578.0], [512.0, 4718.0], [515.0, 4566.0], [514.0, 4653.0], [517.0, 4710.0], [516.0, 4718.0], [519.0, 4750.0], [518.0, 4587.0], [526.0, 4625.0], [525.0, 4748.0], [523.0, 4737.0], [522.0, 4765.0], [521.0, 4737.5], [534.0, 4654.0], [532.0, 4830.0], [531.0, 4632.0], [530.0, 4659.0], [564.0, 4771.0], [573.0, 4875.0], [575.0, 4786.0], [561.0, 4862.0], [560.0, 4725.9], [563.0, 4780.0], [562.0, 4884.0], [571.0, 4826.5], [569.0, 4753.0], [568.0, 4836.0], [567.0, 4860.0], [566.0, 4755.0], [565.0, 4832.0], [601.0, 4874.0], [606.0, 4802.0], [607.0, 4973.0], [594.0, 4962.0], [593.0, 4861.5], [596.0, 4820.0], [595.0, 4854.0], [605.0, 4927.0], [604.0, 4830.0], [603.0, 4825.0], [600.0, 4825.0], [583.0, 4874.0], [582.0, 4914.0], [581.0, 4906.0], [580.0, 4893.0], [579.0, 4842.0], [578.0, 4851.0], [577.0, 4852.0], [576.0, 4796.5], [591.0, 4867.0], [590.0, 4848.5], [588.0, 4869.0], [587.0, 4894.0], [586.0, 4843.0], [585.0, 4853.0], [584.0, 4840.0], [598.0, 4830.0], [597.0, 4840.0], [634.0, 4959.5], [638.0, 4846.0], [639.0, 4905.0], [624.0, 4927.0], [626.0, 4890.0], [625.0, 4891.0], [628.0, 4926.0], [627.0, 4917.0], [637.0, 4902.0], [636.0, 4958.0], [635.0, 4961.0], [632.0, 4950.0], [615.0, 4881.5], [613.0, 4958.0], [612.0, 4905.0], [611.0, 4929.0], [609.0, 4982.0], [608.0, 4973.0], [623.0, 4896.0], [622.0, 4898.0], [621.0, 4939.0], [620.0, 4874.0], [619.0, 4870.0], [618.0, 4949.0], [617.0, 4932.0], [616.0, 4957.0], [631.0, 4925.0], [629.0, 4926.0], [665.0, 5131.0], [669.0, 4951.0], [671.0, 4943.5], [656.0, 4799.0], [658.0, 4861.0], [657.0, 4904.0], [660.0, 4970.0], [659.0, 4987.0], [668.0, 4844.0], [667.0, 4929.0], [666.0, 4875.0], [664.0, 4805.5], [647.0, 4843.0], [646.0, 5017.0], [645.0, 4866.5], [643.0, 4905.0], [642.0, 4888.0], [641.0, 4844.0], [640.0, 4910.0], [655.0, 4808.0], [654.0, 4933.0], [653.0, 4941.0], [652.0, 4884.0], [651.0, 4909.0], [650.0, 4916.0], [649.0, 4912.0], [648.0, 4942.0], [662.0, 4893.0], [661.0, 4906.0], [697.0, 4783.5], [702.0, 4789.0], [703.0, 4894.0], [689.0, 4977.0], [688.0, 4952.0], [691.0, 5019.0], [690.0, 4941.0], [701.0, 4968.0], [700.0, 4786.0], [699.0, 4839.0], [687.0, 4949.0], [673.0, 4869.0], [672.0, 5038.0], [675.0, 4941.0], [674.0, 4784.0], [679.0, 4940.0], [677.0, 4864.0], [686.0, 4944.0], [685.0, 4884.0], [684.0, 4785.0], [683.0, 4866.0], [682.0, 4746.0], [681.0, 4867.0], [680.0, 4868.0], [695.0, 4886.0], [694.0, 4878.0], [693.0, 4884.0], [692.0, 4890.0], [732.0, 5049.0], [735.0, 4829.0], [721.0, 4905.0], [720.0, 4884.0], [723.0, 5105.0], [722.0, 4902.0], [725.0, 5085.0], [724.0, 4801.0], [734.0, 4879.0], [733.0, 5002.0], [731.0, 4844.0], [730.0, 4861.0], [729.0, 5043.0], [728.0, 4937.0], [719.0, 5046.0], [704.0, 4940.0], [706.0, 4964.0], [705.0, 4972.0], [709.0, 4782.0], [708.0, 4824.0], [711.0, 4938.0], [710.0, 4865.0], [718.0, 4873.0], [717.0, 5059.0], [716.0, 4771.0], [715.0, 4766.0], [714.0, 4878.0], [713.0, 4770.0], [712.0, 4779.0], [727.0, 5015.0], [726.0, 4960.0], [750.0, 4897.0], [752.0, 4884.5], [749.0, 5135.0], [748.0, 5140.0], [747.0, 5061.0], [746.0, 5067.0], [745.0, 4960.0], [743.0, 4854.0], [742.0, 4949.5], [740.0, 5042.0], [739.0, 4818.0], [738.0, 4938.5], [736.0, 5046.0], [792.0, 5024.0], [796.0, 4935.0], [799.0, 4844.0], [787.0, 5022.333333333333], [784.0, 5047.0], [789.0, 4900.0], [788.0, 4874.0], [798.0, 4836.0], [797.0, 4843.0], [795.0, 4848.0], [794.0, 4850.0], [793.0, 5003.0], [783.0, 5045.0], [770.0, 4939.11111111111], [772.0, 5014.0], [771.0, 5032.0], [774.0, 5018.0], [773.0, 4863.0], [782.0, 4931.0], [781.0, 4904.0], [780.0, 4933.0], [779.0, 5062.0], [778.0, 5008.0], [777.0, 4986.0], [776.0, 4994.0], [791.0, 4987.0], [790.0, 5014.0], [826.0, 5108.0], [830.0, 4814.0], [831.0, 4897.0], [817.0, 4937.0], [816.0, 4866.0], [821.0, 4901.0], [819.0, 4876.0], [829.0, 4883.0], [828.0, 4965.0], [827.0, 4989.0], [825.0, 5176.5], [807.0, 4833.0], [806.0, 5093.0], [805.0, 4896.0], [804.0, 4841.0], [803.0, 4835.0], [802.0, 5111.0], [801.0, 5110.0], [800.0, 4963.0], [815.0, 4880.0], [814.0, 4845.0], [813.0, 4897.0], [812.0, 4847.0], [811.0, 4830.0], [810.0, 4882.5], [808.0, 4942.0], [823.0, 4992.0], [822.0, 4874.0], [860.0, 4780.0], [863.0, 4776.0], [849.0, 4985.5], [851.0, 4867.0], [850.0, 4776.0], [853.0, 4833.0], [852.0, 4838.0], [862.0, 4807.0], [861.0, 4820.0], [859.0, 4819.0], [858.0, 4763.0], [857.0, 4765.0], [856.0, 4763.0], [847.0, 4940.0], [833.0, 4879.0], [832.0, 4876.0], [835.0, 4813.0], [834.0, 4818.0], [837.0, 4812.0], [836.0, 4834.0], [839.0, 4877.0], [838.0, 4795.0], [846.0, 5162.0], [845.0, 4936.0], [844.0, 4920.0], [842.0, 4794.0], [841.0, 5136.0], [840.0, 4945.0], [855.0, 4834.0], [854.0, 4859.0], [888.0, 5049.0], [892.0, 4845.0], [895.0, 4847.0], [881.0, 4895.0], [880.0, 5059.0], [883.0, 5010.0], [882.0, 5052.0], [894.0, 5106.0], [893.0, 4965.0], [891.0, 4853.0], [890.0, 4787.0], [889.0, 4787.0], [879.0, 5097.0], [865.0, 4830.5], [867.0, 4832.0], [866.0, 4954.0], [869.0, 5159.0], [868.0, 4955.0], [871.0, 4935.0], [870.0, 4934.0], [878.0, 5183.0], [877.0, 5214.0], [876.0, 5015.0], [875.0, 4823.0], [874.0, 5141.0], [873.0, 4842.0], [872.0, 4841.0], [887.0, 4888.0], [885.0, 4880.5], [924.0, 5335.0], [927.0, 5001.0], [912.0, 5188.0], [915.0, 5012.0], [913.0, 5016.0], [917.0, 5032.5], [916.0, 5004.0], [926.0, 4896.0], [925.0, 5036.0], [923.0, 5173.0], [922.0, 5275.0], [921.0, 5315.0], [920.0, 4914.0], [911.0, 4992.0], [897.0, 4858.0], [896.0, 4771.0], [899.0, 4840.0], [898.0, 4817.0], [901.0, 4955.0], [900.0, 4838.0], [903.0, 5133.0], [902.0, 5040.0], [910.0, 4937.0], [909.0, 5043.0], [908.0, 5133.0], [907.0, 5126.0], [906.0, 5021.0], [905.0, 5339.0], [904.0, 5377.0], [919.0, 4977.0], [918.0, 5063.0], [953.0, 5011.0], [958.0, 5126.0], [959.0, 5288.0], [944.0, 5029.0], [946.0, 5062.0], [945.0, 5141.0], [949.0, 5112.0], [947.0, 4990.0], [956.0, 5185.0], [955.0, 5008.0], [954.0, 5053.0], [952.0, 5113.0], [935.0, 4954.0], [934.0, 4924.0], [933.0, 5029.0], [932.0, 4954.0], [931.0, 5020.0], [930.0, 4901.0], [929.0, 4893.0], [928.0, 5072.0], [943.0, 5033.0], [942.0, 5191.5], [940.0, 5192.0], [938.0, 5223.0], [937.0, 4923.0], [936.0, 5004.0], [951.0, 5122.0], [950.0, 5085.0], [988.0, 5129.0], [991.0, 5154.0], [976.0, 5162.0], [978.0, 5096.0], [977.0, 5025.0], [980.0, 5086.0], [979.0, 4971.0], [990.0, 5118.0], [989.0, 5088.0], [987.0, 5159.0], [986.0, 5045.0], [985.0, 5159.0], [984.0, 5176.0], [975.0, 5120.666666666667], [960.0, 5195.0], [962.0, 5107.0], [961.0, 5223.0], [964.0, 4996.0], [963.0, 5163.0], [967.0, 5090.0], [965.0, 5034.0], [972.0, 5178.0], [971.0, 5213.0], [970.0, 5237.5], [968.0, 5199.0], [983.0, 5165.0], [982.0, 5008.5], [1000.0, 3476.3333333333335], [999.0, 5671.310272536684], [998.0, 6356.6], [997.0, 6421.0], [996.0, 6355.0], [995.0, 6475.5], [994.0, 6608.045454545454], [993.0, 6712.0], [992.0, 6609.0], [1.0, 4915.0]], "isOverall": false, "label": "/weixiuMaster/backBaoXiu", "isController": false}, {"data": [[750.183499999999, 5246.208999999999]], "isOverall": false, "label": "/weixiuMaster/backBaoXiu-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1000.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 12562.5, "minX": 1.62981476E12, "maxY": 56542.0, "series": [{"data": [[1.629814774E12, 39396.0], [1.629814764E12, 36582.0], [1.629814776E12, 37788.0], [1.629814766E12, 40300.5], [1.629814778E12, 45225.0], [1.629814768E12, 31356.0], [1.62981478E12, 41205.0], [1.62981477E12, 26632.5], [1.62981476E12, 12562.5], [1.629814782E12, 26532.0], [1.629814772E12, 32260.5], [1.629814762E12, 32160.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.629814774E12, 56542.0], [1.629814764E12, 52598.0], [1.629814776E12, 54332.0], [1.629814766E12, 48101.5], [1.629814778E12, 48858.0], [1.629814768E12, 29223.0], [1.62981478E12, 38335.0], [1.62981477E12, 24777.5], [1.62981476E12, 17705.5], [1.629814782E12, 24684.0], [1.629814772E12, 34705.5], [1.629814762E12, 46138.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629814782E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 894.0, "minX": 1.62981476E12, "maxY": 6660.5, "series": [{"data": [[1.629814774E12, 6393.258974358977], [1.629814764E12, 4657.788461538462], [1.629814776E12, 5759.694148936169], [1.629814766E12, 5479.5673076923085], [1.629814778E12, 5307.255639097743], [1.629814768E12, 5479.0], [1.62981476E12, 1170.1186440677968], [1.629814772E12, 6419.923913043481], [1.629814762E12, 2644.0157232704387]], "isOverall": false, "label": "/baoxiu/baoxiuAdd", "isController": false}, {"data": [[1.629814774E12, 6660.5], [1.629814766E12, 5538.922279792745], [1.629814778E12, 4970.760252365936], [1.629814768E12, 5393.273311897105], [1.62981478E12, 4731.40975609756], [1.62981477E12, 5687.9283018867945], [1.62981476E12, 894.0], [1.629814782E12, 4779.973484848486], [1.629814772E12, 6275.606986899565], [1.629814762E12, 2291.0]], "isOverall": false, "label": "/weixiuMaster/backBaoXiu", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629814782E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 893.8571428571429, "minX": 1.62981476E12, "maxY": 6660.5, "series": [{"data": [[1.629814774E12, 6393.197435897433], [1.629814764E12, 4657.71978021978], [1.629814776E12, 5759.648936170218], [1.629814766E12, 5479.504807692309], [1.629814778E12, 5307.2180451127815], [1.629814768E12, 5479.0], [1.62981476E12, 1160.313559322034], [1.629814772E12, 6419.880434782609], [1.629814762E12, 2637.6132075471714]], "isOverall": false, "label": "/baoxiu/baoxiuAdd", "isController": false}, {"data": [[1.629814774E12, 6660.5], [1.629814766E12, 5538.834196891192], [1.629814778E12, 4970.703470031544], [1.629814768E12, 5393.170418006432], [1.62981478E12, 4731.353658536585], [1.62981477E12, 5687.788679245283], [1.62981476E12, 893.8571428571429], [1.629814782E12, 4779.928030303032], [1.629814772E12, 6275.4890829694305], [1.629814762E12, 2270.5]], "isOverall": false, "label": "/weixiuMaster/backBaoXiu", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629814782E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.62981476E12, "maxY": 465.6648351648357, "series": [{"data": [[1.629814774E12, 0.0], [1.629814764E12, 465.6648351648357], [1.629814776E12, 0.0], [1.629814766E12, 0.9326923076923079], [1.629814778E12, 0.0], [1.629814768E12, 0.0], [1.62981476E12, 2.7711864406779667], [1.629814772E12, 0.0], [1.629814762E12, 223.58490566037736]], "isOverall": false, "label": "/baoxiu/baoxiuAdd", "isController": false}, {"data": [[1.629814774E12, 0.0], [1.629814766E12, 0.0], [1.629814778E12, 0.0], [1.629814768E12, 0.0], [1.62981478E12, 0.0], [1.62981477E12, 0.0], [1.62981476E12, 0.0], [1.629814782E12, 0.0], [1.629814772E12, 0.0], [1.629814762E12, 0.0]], "isOverall": false, "label": "/weixiuMaster/backBaoXiu", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629814782E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 44.0, "minX": 1.62981476E12, "maxY": 7150.0, "series": [{"data": [[1.629814774E12, 7150.0], [1.629814764E12, 5515.0], [1.629814776E12, 6320.0], [1.629814766E12, 5890.0], [1.629814778E12, 5894.0], [1.629814768E12, 5757.0], [1.62981478E12, 5131.0], [1.62981477E12, 6607.0], [1.62981476E12, 1714.0], [1.629814782E12, 5223.0], [1.629814772E12, 6807.0], [1.629814762E12, 3963.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.629814774E12, 6708.1], [1.629814764E12, 5114.0], [1.629814776E12, 6096.3], [1.629814766E12, 5750.8], [1.629814778E12, 5320.400000000001], [1.629814768E12, 5588.8], [1.62981478E12, 4909.9], [1.62981477E12, 6033.2], [1.62981476E12, 1458.0], [1.629814782E12, 4944.0], [1.629814772E12, 6560.0], [1.629814762E12, 3755.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.629814774E12, 7108.14], [1.629814764E12, 5399.900000000001], [1.629814776E12, 6269.92], [1.629814766E12, 5854.9400000000005], [1.629814778E12, 5746.6], [1.629814768E12, 5736.57], [1.62981478E12, 5014.36], [1.62981477E12, 6375.38], [1.62981476E12, 1705.1599999999999], [1.629814782E12, 5141.500000000001], [1.629814772E12, 6758.279999999999], [1.629814762E12, 3942.2200000000003]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.629814774E12, 6834.05], [1.629814764E12, 5247.0], [1.629814776E12, 6171.0], [1.629814766E12, 5812.9], [1.629814778E12, 5414.9], [1.629814768E12, 5652.599999999999], [1.62981478E12, 4950.45], [1.62981477E12, 6191.6], [1.62981476E12, 1520.8999999999999], [1.629814782E12, 5000.75], [1.629814772E12, 6615.4], [1.629814762E12, 3853.7]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.629814774E12, 6051.0], [1.629814764E12, 3973.0], [1.629814776E12, 5205.0], [1.629814766E12, 4996.0], [1.629814778E12, 4746.0], [1.629814768E12, 5115.0], [1.62981478E12, 4428.0], [1.62981477E12, 5329.0], [1.62981476E12, 44.0], [1.629814782E12, 4531.0], [1.629814772E12, 5995.0], [1.629814762E12, 1477.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.629814774E12, 6340.5], [1.629814764E12, 4665.0], [1.629814776E12, 5777.5], [1.629814766E12, 5566.0], [1.629814778E12, 5034.0], [1.629814768E12, 5378.0], [1.62981478E12, 4735.5], [1.62981477E12, 5661.0], [1.62981476E12, 1228.0], [1.629814782E12, 4760.5], [1.629814772E12, 6322.0], [1.629814762E12, 2458.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629814782E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 73.0, "minX": 10.0, "maxY": 6500.0, "series": [{"data": [[138.0, 1964.5], [149.0, 5416.0], [147.0, 5577.0], [159.0, 6171.0], [10.0, 73.0], [162.0, 5765.5], [163.0, 5362.0], [167.0, 4681.0], [173.0, 5549.0], [168.0, 4750.5], [182.0, 3291.5], [191.0, 6202.0], [193.0, 5568.0], [202.0, 4647.0], [201.0, 6500.0], [203.0, 5933.0], [208.0, 5565.0], [222.0, 5215.0], [228.0, 4896.5], [243.0, 4788.0], [96.0, 4820.0], [115.0, 1237.0], [118.0, 5744.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 243.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 68.5, "minX": 10.0, "maxY": 6499.0, "series": [{"data": [[138.0, 1938.0], [149.0, 5416.0], [147.0, 5577.0], [159.0, 6171.0], [10.0, 68.5], [162.0, 5765.5], [163.0, 5362.0], [167.0, 4681.0], [173.0, 5549.0], [168.0, 4750.5], [182.0, 3291.5], [191.0, 6202.0], [193.0, 5568.0], [202.0, 4647.0], [201.0, 6499.0], [203.0, 5933.0], [208.0, 5565.0], [222.0, 5214.5], [228.0, 4896.5], [243.0, 4788.0], [96.0, 4820.0], [115.0, 1232.0], [118.0, 5744.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 243.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 64.5, "minX": 1.629814758E12, "maxY": 498.0, "series": [{"data": [[1.629814774E12, 195.0], [1.629814764E12, 182.0], [1.629814776E12, 188.0], [1.629814766E12, 200.0], [1.629814778E12, 66.5], [1.629814768E12, 155.5], [1.629814758E12, 64.5], [1.62981477E12, 133.0], [1.62981476E12, 498.0], [1.629814772E12, 157.5], [1.629814762E12, 160.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629814778E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 62.5, "minX": 1.62981476E12, "maxY": 225.0, "series": [{"data": [[1.629814774E12, 196.0], [1.629814764E12, 182.0], [1.629814776E12, 188.0], [1.629814766E12, 200.5], [1.629814778E12, 225.0], [1.629814768E12, 156.0], [1.62981478E12, 205.0], [1.62981477E12, 132.5], [1.62981476E12, 62.5], [1.629814782E12, 132.0], [1.629814772E12, 160.5], [1.629814762E12, 160.0]], "isOverall": false, "label": "200", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 2000, "maxX": 1.629814782E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5, "minX": 1.62981476E12, "maxY": 205.0, "series": [{"data": [[1.629814774E12, 195.0], [1.629814764E12, 182.0], [1.629814776E12, 188.0], [1.629814766E12, 104.0], [1.629814778E12, 66.5], [1.629814768E12, 0.5], [1.62981476E12, 59.0], [1.629814772E12, 46.0], [1.629814762E12, 159.0]], "isOverall": false, "label": "/baoxiu/baoxiuAdd-success", "isController": false}, {"data": [[1.629814774E12, 1.0], [1.629814766E12, 96.5], [1.629814778E12, 158.5], [1.629814768E12, 155.5], [1.62981478E12, 205.0], [1.62981477E12, 132.5], [1.62981476E12, 3.5], [1.629814782E12, 132.0], [1.629814772E12, 114.5], [1.629814762E12, 1.0]], "isOverall": false, "label": "/weixiuMaster/backBaoXiu-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629814782E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 62.5, "minX": 1.62981476E12, "maxY": 225.0, "series": [{"data": [[1.629814774E12, 196.0], [1.629814764E12, 182.0], [1.629814776E12, 188.0], [1.629814766E12, 200.5], [1.629814778E12, 225.0], [1.629814768E12, 156.0], [1.62981478E12, 205.0], [1.62981477E12, 132.5], [1.62981476E12, 62.5], [1.629814782E12, 132.0], [1.629814772E12, 160.5], [1.629814762E12, 160.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 2000, "maxX": 1.629814782E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 28800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

